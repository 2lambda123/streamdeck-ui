{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Read Latest Documentation - Browse GitHub Code Repository streamdeck_ui A Linux compatible UI for the Elgato Stream Deck. Key Features Linux Compatible : Enables usage of all Stream Deck devices on Linux without needing to code. Multi-device : Enables connecting and configuring multiple Stream Deck devices on one computer. Brightness Control : Supports controlling the brightness from both the configuration UI and buttons on the device itself. Configurable Button Display : Icons + Text, Icon Only, and Text Only configurable per button on the Stream Deck. Multi-Action Support : Run commands, write text and press hotkey combinations at the press of a single button on your Stream Deck. Button Pages : streamdeck_ui supports multiple pages of buttons and dynamically setting up buttons to switch between those pages. Auto Reconnect : Automatically and gracefully reconnects, in the case the device is unplugged and replugged in. Import/Export : Supports saving and restoring Stream Deck configuration. Communication with the Streamdeck is powered by the Python Elgato Stream Deck Library . Linux Quick Start Precooked Scripts There are scripts for setting up streamdeck_ui on Debian/Ubuntu and Fedora . Manual installation To use streamdeck_ui on Linux, you will need first to install some prerequisite system libraries. The name of those libraries will differ depending on your Operating System. Debian / Ubuntu: sudo apt install python3-pip libhidapi-libusb0 libxcb-xinerama0 Fedora: sudo dnf install python3-pip python3-devel hidapi If you're using GNOME shell, you might need to manually install an extension that adds KStatusNotifierItem/AppIndicator Support to make the tray icon show up. To use streamdeck_ui without root permissions, you have to give your user full access to the device. Add the udev rules using your text editor: sudoedit /etc/udev/rules.d/70-streamdeck.rules # If that doesn't work, try: sudo nano /etc/udev/rules.d/70-streamdeck.rules Paste the following lines: SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", ATTRS{idProduct}==\"0060\", TAG+=\"uaccess\" SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", ATTRS{idProduct}==\"0063\", TAG+=\"uaccess\" SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", ATTRS{idProduct}==\"006c\", TAG+=\"uaccess\" SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", ATTRS{idProduct}==\"006d\", TAG+=\"uaccess\" Reload the rules: sudo udevadm control -- reload - rules Make sure you unplug and replug your device before continuing. Once complete, you should be able to install streamdeck_ui. Installing the application itself is done via pip: pip3 install --user streamdeck_ui Make sure to include $HOME/.local/bin to your PATH. If you haven't already, add PATH = $PATH : $HOME /.local/bin to the bottom your shell config file (most likely .bashrc in your home directory) You can then launch streamdeck to start configuring your device. streamdeck It's recommended that you include streamdeck in your windowing environment's list of applications to auto-start. Generic Quick Start On other Operating Systems, you'll need to install the required dependencies of the library. After that, use pip to install the app: pip3 install streamdeck_ui --user streamdeck See the guide for CentOS 7 Help Command Enter a value in the command field to execute a command. For example, gnome-terminal will launch a new terminal on Ubuntu/Fedora or obs will launch OBS. Some examples (Ubuntu) You can use a tool like xdotool to interact with other applications. Find the window with a title starting with Meet - and bring it to focus. This helps if you have a Google Meet session on a tab somewhere but you lost it behind another window. xdotool search --name '^Meet - .+$' windowactivate The meeting tab must be active one if you have multiple tabs open, since the window title is set by the currently active tab. Find the window with a title starting with Meet - and then send ctrl+d to it. This has the effect of toggling the mute button in Google Meet. xdotool search --name '^Meet - .+$' windowactivate --sync key ctrl+d Change the system volume up (or down) by a certain percentage. Assumes you're using PulseAudio/Alsa Mixer. amixer -D pulse sset Master 20%+ Press Keys Simulates key press combinations (hot keys). The basic format is a group of keys, separated by a + sign to press simultaneously. Separate key combination groups with a , if additional key combinations are needed. For example, alt+F4,f means press and hold alt , followed by F4 and then release both. Next, press and release f . Use comma or plus if you want to actually output , or + respectively. Use delay to add a short (0.5 seconds) delay. Examples F11 - Press F11. If you have focus on a browser this will toggle full screen. alt+F4 - Closes the current window. ctrl+w - Closes the current browser tab. cmd+left - View split on left. Note cmd is the super key (equivalent of the Windows key). alt+plus - Presses the alt and the + key at the same time. alt+delay+F4 - Press alt, then wait 0.5 seconds, then press F4. Release both. 1,delay,delay,2,delay,delay,3 - Type 123 with a second delay between key presses. The standard list of keys can be found at the source . Known issues Streamdeck uses pynput for simulating Key Presses but it lacks proper support for Wayland . Generally your results will be good when using X (Ubuntu/Linux Mint). This thread may be useful. Key Press or Write Text does not work on Fedora (outside of the streamdeck itself), which is not particularly useful. However, still do a lot with the Command feature. On Ubuntu, the Key Press ctrl+alt+t doesn't work . However using the Command gnome-terminal achieves the same result. Version 1.0.2 lacks error handling when executing Command and Key Press actions. As a result, you have to be careful - an invalid command or key press makes everything else also stop working. The upcoming 1.0.3 release will resolve this. Some users have reported that the Stream Deck device does not work on all on specific USB ports, as it draws quite a bit of power and/or has strict bandwidth requirements . Try a different port.","title":"Home"},{"location":"#key-features","text":"Linux Compatible : Enables usage of all Stream Deck devices on Linux without needing to code. Multi-device : Enables connecting and configuring multiple Stream Deck devices on one computer. Brightness Control : Supports controlling the brightness from both the configuration UI and buttons on the device itself. Configurable Button Display : Icons + Text, Icon Only, and Text Only configurable per button on the Stream Deck. Multi-Action Support : Run commands, write text and press hotkey combinations at the press of a single button on your Stream Deck. Button Pages : streamdeck_ui supports multiple pages of buttons and dynamically setting up buttons to switch between those pages. Auto Reconnect : Automatically and gracefully reconnects, in the case the device is unplugged and replugged in. Import/Export : Supports saving and restoring Stream Deck configuration. Communication with the Streamdeck is powered by the Python Elgato Stream Deck Library .","title":"Key Features"},{"location":"#linux-quick-start","text":"","title":"Linux Quick Start"},{"location":"#precooked-scripts","text":"There are scripts for setting up streamdeck_ui on Debian/Ubuntu and Fedora .","title":"Precooked Scripts"},{"location":"#manual-installation","text":"To use streamdeck_ui on Linux, you will need first to install some prerequisite system libraries. The name of those libraries will differ depending on your Operating System. Debian / Ubuntu: sudo apt install python3-pip libhidapi-libusb0 libxcb-xinerama0 Fedora: sudo dnf install python3-pip python3-devel hidapi If you're using GNOME shell, you might need to manually install an extension that adds KStatusNotifierItem/AppIndicator Support to make the tray icon show up. To use streamdeck_ui without root permissions, you have to give your user full access to the device. Add the udev rules using your text editor: sudoedit /etc/udev/rules.d/70-streamdeck.rules # If that doesn't work, try: sudo nano /etc/udev/rules.d/70-streamdeck.rules Paste the following lines: SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", ATTRS{idProduct}==\"0060\", TAG+=\"uaccess\" SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", ATTRS{idProduct}==\"0063\", TAG+=\"uaccess\" SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", ATTRS{idProduct}==\"006c\", TAG+=\"uaccess\" SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", ATTRS{idProduct}==\"006d\", TAG+=\"uaccess\" Reload the rules: sudo udevadm control -- reload - rules Make sure you unplug and replug your device before continuing. Once complete, you should be able to install streamdeck_ui. Installing the application itself is done via pip: pip3 install --user streamdeck_ui Make sure to include $HOME/.local/bin to your PATH. If you haven't already, add PATH = $PATH : $HOME /.local/bin to the bottom your shell config file (most likely .bashrc in your home directory) You can then launch streamdeck to start configuring your device. streamdeck It's recommended that you include streamdeck in your windowing environment's list of applications to auto-start.","title":"Manual installation"},{"location":"#generic-quick-start","text":"On other Operating Systems, you'll need to install the required dependencies of the library. After that, use pip to install the app: pip3 install streamdeck_ui --user streamdeck See the guide for CentOS 7","title":"Generic Quick Start"},{"location":"#help","text":"","title":"Help"},{"location":"#command","text":"Enter a value in the command field to execute a command. For example, gnome-terminal will launch a new terminal on Ubuntu/Fedora or obs will launch OBS.","title":"Command"},{"location":"#some-examples-ubuntu","text":"You can use a tool like xdotool to interact with other applications. Find the window with a title starting with Meet - and bring it to focus. This helps if you have a Google Meet session on a tab somewhere but you lost it behind another window. xdotool search --name '^Meet - .+$' windowactivate The meeting tab must be active one if you have multiple tabs open, since the window title is set by the currently active tab. Find the window with a title starting with Meet - and then send ctrl+d to it. This has the effect of toggling the mute button in Google Meet. xdotool search --name '^Meet - .+$' windowactivate --sync key ctrl+d Change the system volume up (or down) by a certain percentage. Assumes you're using PulseAudio/Alsa Mixer. amixer -D pulse sset Master 20%+","title":"Some examples (Ubuntu)"},{"location":"#press-keys","text":"Simulates key press combinations (hot keys). The basic format is a group of keys, separated by a + sign to press simultaneously. Separate key combination groups with a , if additional key combinations are needed. For example, alt+F4,f means press and hold alt , followed by F4 and then release both. Next, press and release f . Use comma or plus if you want to actually output , or + respectively. Use delay to add a short (0.5 seconds) delay.","title":"Press Keys"},{"location":"#examples","text":"F11 - Press F11. If you have focus on a browser this will toggle full screen. alt+F4 - Closes the current window. ctrl+w - Closes the current browser tab. cmd+left - View split on left. Note cmd is the super key (equivalent of the Windows key). alt+plus - Presses the alt and the + key at the same time. alt+delay+F4 - Press alt, then wait 0.5 seconds, then press F4. Release both. 1,delay,delay,2,delay,delay,3 - Type 123 with a second delay between key presses. The standard list of keys can be found at the source .","title":"Examples"},{"location":"#known-issues","text":"Streamdeck uses pynput for simulating Key Presses but it lacks proper support for Wayland . Generally your results will be good when using X (Ubuntu/Linux Mint). This thread may be useful. Key Press or Write Text does not work on Fedora (outside of the streamdeck itself), which is not particularly useful. However, still do a lot with the Command feature. On Ubuntu, the Key Press ctrl+alt+t doesn't work . However using the Command gnome-terminal achieves the same result. Version 1.0.2 lacks error handling when executing Command and Key Press actions. As a result, you have to be careful - an invalid command or key press makes everything else also stop working. The upcoming 1.0.3 release will resolve this. Some users have reported that the Stream Deck device does not work on all on specific USB ports, as it draws quite a bit of power and/or has strict bandwidth requirements . Try a different port.","title":"Known issues"},{"location":"CHANGELOG/","text":"Install the latest To install the latest version of streamdeck_ui simply run: pip3 install streamdeck_ui OR poetry add streamdeck_ui OR pipenv install streamdeck_ui Change log 1.0.7 - April 6, 2021 Features Drag and drop support for rearranging buttons around in UI. Launches minimized with -n or --no-ui . Window title has been updated to Stream Deck UI . A remove image button has been added. Cancelling during image selection no longer removes image. Image selection button defaults to previous image path, if there is one. Reset to the standby image after exiting. This makes it easy to see if streamdeck-ui is running or not. Supports delay in Key Press action to add a 0.5 second delay. Supports plus and comma in the Key Press action to output + and , respectively. Separator added between Exit and other menu items. Avoid unnecessary writes to settings file. Improved parsing of command line arguments for launching programs. Fixes Missing button image error handling added. Avoid losing configuration if there is an exception while writing file. Updated to streamdeck 0.8.4 to improve stability. Updated to Pillow 8.2 to improve stability and fixes jpeg artifacts. Fixed race condition where streamdeck buttons get scrambled. Fixed core dumped error when exiting. Improved error handling for invalid command or key press actions. Fixed black on black color issue on UI buttons. Removed requirement for plugdev group. Waits for Stream Deck to be attached on start up. 1.0.2 - November 25, 2019 Updated driver requirement to enable full compatibility with XL. 1.0.1 - October 8, 2019 Initial API stable release.","title":"Changelog"},{"location":"CHANGELOG/#install-the-latest","text":"To install the latest version of streamdeck_ui simply run: pip3 install streamdeck_ui OR poetry add streamdeck_ui OR pipenv install streamdeck_ui","title":"Install the latest"},{"location":"CHANGELOG/#change-log","text":"","title":"Change log"},{"location":"CHANGELOG/#107-april-6-2021","text":"","title":"1.0.7 - April 6, 2021"},{"location":"CHANGELOG/#features","text":"Drag and drop support for rearranging buttons around in UI. Launches minimized with -n or --no-ui . Window title has been updated to Stream Deck UI . A remove image button has been added. Cancelling during image selection no longer removes image. Image selection button defaults to previous image path, if there is one. Reset to the standby image after exiting. This makes it easy to see if streamdeck-ui is running or not. Supports delay in Key Press action to add a 0.5 second delay. Supports plus and comma in the Key Press action to output + and , respectively. Separator added between Exit and other menu items. Avoid unnecessary writes to settings file. Improved parsing of command line arguments for launching programs.","title":"Features"},{"location":"CHANGELOG/#fixes","text":"Missing button image error handling added. Avoid losing configuration if there is an exception while writing file. Updated to streamdeck 0.8.4 to improve stability. Updated to Pillow 8.2 to improve stability and fixes jpeg artifacts. Fixed race condition where streamdeck buttons get scrambled. Fixed core dumped error when exiting. Improved error handling for invalid command or key press actions. Fixed black on black color issue on UI buttons. Removed requirement for plugdev group. Waits for Stream Deck to be attached on start up.","title":"Fixes"},{"location":"CHANGELOG/#102-november-25-2019","text":"Updated driver requirement to enable full compatibility with XL.","title":"1.0.2 - November 25, 2019"},{"location":"CHANGELOG/#101-october-8-2019","text":"Initial API stable release.","title":"1.0.1 - October 8, 2019"},{"location":"docs/centos/","text":"Installing on CentOS The following guide was tested on CentOS 7. Add the following repositry. This is needed because hidapi does not exist in the standard repo. sudo rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm Install hidapi sudo yum install hidapi Streamdeck-ui has a dependency on Python 3.8, but CentOS 7 only supports Python 3.6. The following steps will build Python 3.8 ( source ). sudo yum -y groupinstall \"Development Tools\" sudo yum -y install openssl-devel bzip2-devel libffi-devel wget https://www.python.org/ftp/python/3.8.3/Python-3.8.3.tgz tar xvf Python-3.8.3.tgz cd Python-3.8.3/ ./configure --enable-optimizations sudo make altinstall This should now work python3.8 --version Install all the dependencies pip3.8 install streamdeck==0.8.3 pynput==1.7.3 pyside2==5.15.2 python3-xlib==0.15 pillow==8.1.2 --user pip3.8 install -i https://test.pypi.org/simple/ streamdeck-ui==1.0.4 --user PATH=$PATH:$HOME/.local/bin We need configure the USB device to be accessible by the currently logged in user, when it is attached: sudo nano /etc/udev/rules.d/70-streamdeck.rules SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", ATTRS{idProduct}==\"0060\", TAG+=\"uaccess\" SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", ATTRS{idProduct}==\"0063\", TAG+=\"uaccess\" SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", ATTRS{idProduct}==\"006c\", TAG+=\"uaccess\" SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", ATTRS{idProduct}==\"006d\", TAG+=\"uaccess\" Remove and plug your Stream Deck in. streamdeck","title":"Centos"},{"location":"docs/centos/#installing-on-centos","text":"The following guide was tested on CentOS 7. Add the following repositry. This is needed because hidapi does not exist in the standard repo. sudo rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm Install hidapi sudo yum install hidapi Streamdeck-ui has a dependency on Python 3.8, but CentOS 7 only supports Python 3.6. The following steps will build Python 3.8 ( source ). sudo yum -y groupinstall \"Development Tools\" sudo yum -y install openssl-devel bzip2-devel libffi-devel wget https://www.python.org/ftp/python/3.8.3/Python-3.8.3.tgz tar xvf Python-3.8.3.tgz cd Python-3.8.3/ ./configure --enable-optimizations sudo make altinstall This should now work python3.8 --version Install all the dependencies pip3.8 install streamdeck==0.8.3 pynput==1.7.3 pyside2==5.15.2 python3-xlib==0.15 pillow==8.1.2 --user pip3.8 install -i https://test.pypi.org/simple/ streamdeck-ui==1.0.4 --user PATH=$PATH:$HOME/.local/bin We need configure the USB device to be accessible by the currently logged in user, when it is attached: sudo nano /etc/udev/rules.d/70-streamdeck.rules SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", ATTRS{idProduct}==\"0060\", TAG+=\"uaccess\" SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", ATTRS{idProduct}==\"0063\", TAG+=\"uaccess\" SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", ATTRS{idProduct}==\"006c\", TAG+=\"uaccess\" SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", ATTRS{idProduct}==\"006d\", TAG+=\"uaccess\" Remove and plug your Stream Deck in. streamdeck","title":"Installing on CentOS"},{"location":"docs/contributing/1.-contributing-guide/","text":"Contributing to streamdeck_ui Looking for a useful open source project to contribute to? Want your contributions to be warmly welcomed and acknowledged? Welcome! You have found the right place. Getting streamdeck_ui set up for local development The first step when contributing to any project is getting it set up on your local machine. streamdeck_ui aims to make this as simple as possible. Account Requirements: A valid GitHub account Base System Requirements: Python3.8+ poetry bash or a bash compatible shell (should be auto-installed on Linux / Mac) Once you have verified that you system matches the base requirements you can start to get the project working by following these steps: Fork the project on GitHub . Clone your fork to your local file system: git clone https://github.com/$GITHUB_ACCOUNT/streamdeck_ui.git `cd streamdeck_ui poetry install Making a contribution Congrats! You're now ready to make a contribution! Use the following as a guide to help you reach a successful pull-request: Check the issues page on GitHub to see if the task you want to complete is listed there. If it's listed there, write a comment letting others know you are working on it. If it's not listed in GitHub issues, go ahead and log a new issue. Then add a comment letting everyone know you have it under control. If you're not sure if it's something that is good for the main streamdeck_ui project and want immediate feedback, you can discuss it here . Create an issue branch for your local work git checkout -b issue/$ISSUE-NUMBER . Do your magic here. Ensure your code matches the HOPE-8 Coding Standard used by the project. Submit a pull request to the main project repository via GitHub. Thanks for the contribution! It will quickly get reviewed, and, once accepted, will result in your name being added to the acknowledgments list :). Thank you! I can not tell you how thankful I am for the hard work done by streamdeck_ui contributors like you . Thank you! ~Timothy Crosley","title":"1. Contributing Guide"},{"location":"docs/contributing/1.-contributing-guide/#contributing-to-streamdeck_ui","text":"Looking for a useful open source project to contribute to? Want your contributions to be warmly welcomed and acknowledged? Welcome! You have found the right place.","title":"Contributing to streamdeck_ui"},{"location":"docs/contributing/1.-contributing-guide/#getting-streamdeck_ui-set-up-for-local-development","text":"The first step when contributing to any project is getting it set up on your local machine. streamdeck_ui aims to make this as simple as possible. Account Requirements: A valid GitHub account Base System Requirements: Python3.8+ poetry bash or a bash compatible shell (should be auto-installed on Linux / Mac) Once you have verified that you system matches the base requirements you can start to get the project working by following these steps: Fork the project on GitHub . Clone your fork to your local file system: git clone https://github.com/$GITHUB_ACCOUNT/streamdeck_ui.git `cd streamdeck_ui poetry install","title":"Getting streamdeck_ui set up for local development"},{"location":"docs/contributing/1.-contributing-guide/#making-a-contribution","text":"Congrats! You're now ready to make a contribution! Use the following as a guide to help you reach a successful pull-request: Check the issues page on GitHub to see if the task you want to complete is listed there. If it's listed there, write a comment letting others know you are working on it. If it's not listed in GitHub issues, go ahead and log a new issue. Then add a comment letting everyone know you have it under control. If you're not sure if it's something that is good for the main streamdeck_ui project and want immediate feedback, you can discuss it here . Create an issue branch for your local work git checkout -b issue/$ISSUE-NUMBER . Do your magic here. Ensure your code matches the HOPE-8 Coding Standard used by the project. Submit a pull request to the main project repository via GitHub. Thanks for the contribution! It will quickly get reviewed, and, once accepted, will result in your name being added to the acknowledgments list :).","title":"Making a contribution"},{"location":"docs/contributing/1.-contributing-guide/#thank-you","text":"I can not tell you how thankful I am for the hard work done by streamdeck_ui contributors like you . Thank you! ~Timothy Crosley","title":"Thank you!"},{"location":"docs/contributing/2.-coding-standard/","text":"HOPE 8 -- Style Guide for Hug Code HOPE: 8 Title: Style Guide for Hug Code Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 19-May-2019 Updated: 17-August-2019 Introduction This document gives coding conventions for the Hug code comprising the Hug core as well as all official interfaces, extensions, and plugins for the framework. Optionally, projects that use Hug are encouraged to follow this HOPE and link to it as a reference. PEP 8 Foundation All guidelines in this document are in addition to those defined in Python's PEP 8 and PEP 257 guidelines. Line Length Too short of lines discourage descriptive variable names where they otherwise make sense. Too long of lines reduce overall readability and make it hard to compare 2 files side by side. There is no perfect number: but for Hug, we've decided to cap the lines at 100 characters. Descriptive Variable names Naming things is hard. Hug has a few strict guidelines on the usage of variable names, which hopefully will reduce some of the guesswork: - No one character variable names. - Except for x, y, and z as coordinates. - It's not okay to override built-in functions. - Except for id . Guido himself thought that shouldn't have been moved to the system module. It's too commonly used, and alternatives feel very artificial. - Avoid Acronyms, Abbreviations, or any other short forms - unless they are almost universally understand. Adding new modules New modules added to the a project that follows the HOPE-8 standard should all live directly within the base PROJECT_NAME/ directory without nesting. If the modules are meant only for internal use within the project, they should be prefixed with a leading underscore. For example, def _internal_function. Modules should contain a docstring at the top that gives a general explanation of the purpose and then restates the project's use of the MIT license. There should be a tests/test_$MODULE_NAME.py file created to correspond to every new module that contains test coverage for the module. Ideally, tests should be 1:1 (one test object per code object, one test method per code method) to the extent cleanly possible. Automated Code Cleaners All code submitted to Hug should be formatted using Black and isort. Black should be run with the line length set to 100, and isort with Black compatible settings in place. Automated Code Linting All code submitted to hug should run through the following tools: Black and isort verification. Flake8 flake8-bugbear Bandit pep8-naming vulture safety","title":"2. Coding Standard"},{"location":"docs/contributing/2.-coding-standard/#hope-8-style-guide-for-hug-code","text":"HOPE: 8 Title: Style Guide for Hug Code Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 19-May-2019 Updated: 17-August-2019","title":"HOPE 8 -- Style Guide for Hug Code"},{"location":"docs/contributing/2.-coding-standard/#introduction","text":"This document gives coding conventions for the Hug code comprising the Hug core as well as all official interfaces, extensions, and plugins for the framework. Optionally, projects that use Hug are encouraged to follow this HOPE and link to it as a reference.","title":"Introduction"},{"location":"docs/contributing/2.-coding-standard/#pep-8-foundation","text":"All guidelines in this document are in addition to those defined in Python's PEP 8 and PEP 257 guidelines.","title":"PEP 8 Foundation"},{"location":"docs/contributing/2.-coding-standard/#line-length","text":"Too short of lines discourage descriptive variable names where they otherwise make sense. Too long of lines reduce overall readability and make it hard to compare 2 files side by side. There is no perfect number: but for Hug, we've decided to cap the lines at 100 characters.","title":"Line Length"},{"location":"docs/contributing/2.-coding-standard/#descriptive-variable-names","text":"Naming things is hard. Hug has a few strict guidelines on the usage of variable names, which hopefully will reduce some of the guesswork: - No one character variable names. - Except for x, y, and z as coordinates. - It's not okay to override built-in functions. - Except for id . Guido himself thought that shouldn't have been moved to the system module. It's too commonly used, and alternatives feel very artificial. - Avoid Acronyms, Abbreviations, or any other short forms - unless they are almost universally understand.","title":"Descriptive Variable names"},{"location":"docs/contributing/2.-coding-standard/#adding-new-modules","text":"New modules added to the a project that follows the HOPE-8 standard should all live directly within the base PROJECT_NAME/ directory without nesting. If the modules are meant only for internal use within the project, they should be prefixed with a leading underscore. For example, def _internal_function. Modules should contain a docstring at the top that gives a general explanation of the purpose and then restates the project's use of the MIT license. There should be a tests/test_$MODULE_NAME.py file created to correspond to every new module that contains test coverage for the module. Ideally, tests should be 1:1 (one test object per code object, one test method per code method) to the extent cleanly possible.","title":"Adding new modules"},{"location":"docs/contributing/2.-coding-standard/#automated-code-cleaners","text":"All code submitted to Hug should be formatted using Black and isort. Black should be run with the line length set to 100, and isort with Black compatible settings in place.","title":"Automated Code Cleaners"},{"location":"docs/contributing/2.-coding-standard/#automated-code-linting","text":"All code submitted to hug should run through the following tools: Black and isort verification. Flake8 flake8-bugbear Bandit pep8-naming vulture safety","title":"Automated Code Linting"},{"location":"docs/contributing/3.-code-of-conduct/","text":"HOPE 11 -- Code of Conduct HOPE: 11 Title: Code of Conduct Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 17-August-2019 Updated: 17-August-2019 Abstract Defines the Code of Conduct for Hug and all related projects. Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting timothy.crosley@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Confidentiality will be maintained with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the [Contributor Covenant][https://www.contributor-covenant.org], version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"3. Code Of Conduct"},{"location":"docs/contributing/3.-code-of-conduct/#hope-11-code-of-conduct","text":"HOPE: 11 Title: Code of Conduct Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 17-August-2019 Updated: 17-August-2019","title":"HOPE 11 -- Code of Conduct"},{"location":"docs/contributing/3.-code-of-conduct/#abstract","text":"Defines the Code of Conduct for Hug and all related projects.","title":"Abstract"},{"location":"docs/contributing/3.-code-of-conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"docs/contributing/3.-code-of-conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"docs/contributing/3.-code-of-conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"docs/contributing/3.-code-of-conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"docs/contributing/3.-code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting timothy.crosley@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Confidentiality will be maintained with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"docs/contributing/3.-code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the [Contributor Covenant][https://www.contributor-covenant.org], version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"docs/contributing/4.-acknowledgements/","text":"Contributors Core Developers Timothy Crosley (@timothycrosley) Notable Bug Reporters - Code Contributors - Documenters @xorbital Chris Rogers (@chrisprad) @simonCor Afonso F. Garcia (@AfonsoFGarcia) A sincere thanks to everyone who helps make streamdeck_ui into a great Python3 project! ~Timothy Crosley","title":"4. Acknowledgements"},{"location":"docs/contributing/4.-acknowledgements/#contributors","text":"","title":"Contributors"},{"location":"docs/contributing/4.-acknowledgements/#core-developers","text":"Timothy Crosley (@timothycrosley)","title":"Core Developers"},{"location":"docs/contributing/4.-acknowledgements/#notable-bug-reporters","text":"-","title":"Notable Bug Reporters"},{"location":"docs/contributing/4.-acknowledgements/#code-contributors","text":"-","title":"Code Contributors"},{"location":"docs/contributing/4.-acknowledgements/#documenters","text":"@xorbital Chris Rogers (@chrisprad) @simonCor Afonso F. Garcia (@AfonsoFGarcia) A sincere thanks to everyone who helps make streamdeck_ui into a great Python3 project! ~Timothy Crosley","title":"Documenters"},{"location":"reference/streamdeck_ui/","text":"Module streamdeck_ui streamdeck_ui A Linux compatible UI for the Elgato Stream Deck. View Source \"\"\" **streamdeck_ui** A Linux compatible UI for the Elgato Stream Deck . \"\"\" __version__ = \" 1.0.2 \" Sub-modules streamdeck_ui.api streamdeck_ui.config streamdeck_ui.gui streamdeck_ui.resources_rc streamdeck_ui.ui_main","title":"Index"},{"location":"reference/streamdeck_ui/#module-streamdeck_ui","text":"streamdeck_ui A Linux compatible UI for the Elgato Stream Deck. View Source \"\"\" **streamdeck_ui** A Linux compatible UI for the Elgato Stream Deck . \"\"\" __version__ = \" 1.0.2 \"","title":"Module streamdeck_ui"},{"location":"reference/streamdeck_ui/#sub-modules","text":"streamdeck_ui.api streamdeck_ui.config streamdeck_ui.gui streamdeck_ui.resources_rc streamdeck_ui.ui_main","title":"Sub-modules"},{"location":"reference/streamdeck_ui/api/","text":"Module streamdeck_ui.api Defines the Python API for interacting with the StreamDeck Configuration UI None View Source \"\"\"Defines the Python API for interacting with the StreamDeck Configuration UI\"\"\" import json import os import shlex import threading import time from functools import partial from subprocess import Popen # nosec - Need to allow users to specify arbitrary commands from typing import Dict , Tuple , Union , cast from warnings import warn from PIL import Image , ImageDraw , ImageFont from pynput.keyboard import Controller , Key from StreamDeck import DeviceManager from StreamDeck.Devices import StreamDeck from StreamDeck.ImageHelpers import PILHelper from streamdeck_ui.config import CONFIG_FILE_VERSION , DEFAULT_FONT , FONTS_PATH , STATE_FILE image_cache : Dict [ str , memoryview ] = {} decks : Dict [ str , StreamDeck . StreamDeck ] = {} state : Dict [ str , Dict [ str , Union [ int , Dict [ int , Dict [ int , Dict [ str , str ]]]]]] = {} streamdecks_lock = threading . Lock () def _replace_special_keys ( key ): \"\"\"Replaces special keywords the user can use with their character equivalent.\"\"\" if key . lower () == \"plus\" : return \"+\" if key . lower () == \"comma\" : return \",\" if key . lower () == \"delay\" : return \"delay\" return key def _key_change_callback ( deck_id : str , _deck : StreamDeck . StreamDeck , key : int , state : bool ) -> None : \"\"\" Callback whenever a key is pressed. This is method runs the various actions defined for the key being pressed, sequentially. \"\"\" if state : keyboard = Controller () page = get_page ( deck_id ) command = get_button_command ( deck_id , page , key ) if command : try : Popen ( shlex . split ( command )) except Exception as error : print ( f \"The command ' { command } ' failed: { error } \" ) keys = get_button_keys ( deck_id , page , key ) if keys : keys = keys . strip () . replace ( \" \" , \"\" ) for section in keys . split ( \",\" ): # Since + and , are used to delimit our section and keys to press, # they need to be substituded with keywords. section_keys = [ _replace_special_keys ( key_name ) for key_name in section . split ( \"+\" )] # Translate string to enum, or just the string itself if not found section_keys = [ getattr ( Key , key_name . lower (), key_name ) for key_name in section_keys ] for key_name in section_keys : try : if key_name == \"delay\" : time . sleep ( 0.5 ) else : keyboard . press ( key_name ) except Exception : print ( f \"Could not press key ' { key_name } '\" ) for key_name in section_keys : try : if key_name != \"delay\" : keyboard . release ( key_name ) except Exception : print ( f \"Could not release key ' { key_name } '\" ) write = get_button_write ( deck_id , page , key ) if write : try : keyboard . type ( write ) except Exception as error : print ( f \"Could not complete the write command: { error } \" ) brightness_change = get_button_change_brightness ( deck_id , page , key ) if brightness_change : try : change_brightness ( deck_id , brightness_change ) except Exception as error : print ( f \"Could not change brightness: { error } \" ) switch_page = get_button_switch_page ( deck_id , page , key ) if switch_page : set_page ( deck_id , switch_page - 1 ) def _save_state (): export_config ( STATE_FILE ) def _open_config ( config_file : str ): global state with open ( config_file ) as state_file : config = json . loads ( state_file . read ()) file_version = config . get ( \"streamdeck_ui_version\" , 0 ) if file_version != CONFIG_FILE_VERSION : raise ValueError ( \"Incompatible version of config file found: \" f \" { file_version } does not match required version \" f \" { CONFIG_FILE_VERSION } .\" ) state = {} for deck_id , deck in config [ \"state\" ] . items (): deck [ \"buttons\" ] = { int ( page_id ): { int ( button_id ): button for button_id , button in buttons . items ()} for page_id , buttons in deck . get ( \"buttons\" , {}) . items () } state [ deck_id ] = deck def import_config ( config_file : str ) -> None : _open_config ( config_file ) render () _save_state () def export_config ( output_file : str ) -> None : try : with open ( output_file + \".tmp\" , \"w\" ) as state_file : state_file . write ( json . dumps ( { \"streamdeck_ui_version\" : CONFIG_FILE_VERSION , \"state\" : state }, indent = 4 , separators = ( \",\" , \": \" ), ) ) except Exception as error : print ( f \"The configuration file ' { output_file } ' was not updated. Error: { error } \" ) raise else : os . replace ( output_file + \".tmp\" , output_file ) def open_decks () -> Dict [ str , Dict [ str , Union [ str , Tuple [ int , int ]]]]: \"\"\"Opens and then returns all known stream deck devices\"\"\" for deck in DeviceManager . DeviceManager () . enumerate (): deck . open () deck . reset () deck_id = deck . get_serial_number () decks [ deck_id ] = deck deck . set_key_callback ( partial ( _key_change_callback , deck_id )) return { deck_id : { \"type\" : deck . deck_type (), \"layout\" : deck . key_layout ()} for deck_id , deck in decks . items () } def close_decks () -> None : \"\"\"Closes open decks for input/ouput.\"\"\" for _deck_serial , deck in decks . items (): if deck . connected (): deck . reset () deck . close () def ensure_decks_connected () -> None : \"\"\"Reconnects to any decks that lost connection. If they did, re-renders them.\"\"\" for deck_serial , deck in decks . copy () . items (): if not deck . connected (): for new_deck in DeviceManager . DeviceManager () . enumerate (): try : new_deck . open () new_deck_serial = new_deck . get_serial_number () except Exception as error : warn ( f \"A { error } error occurred when trying to reconnect to { deck_serial } \" ) new_deck_serial = None if new_deck_serial == deck_serial : deck . close () new_deck . reset () new_deck . set_key_callback ( partial ( _key_change_callback , new_deck_serial )) decks [ new_deck_serial ] = new_deck render () def get_deck ( deck_id : str ) -> Dict [ str , Dict [ str , Union [ str , Tuple [ int , int ]]]]: return { \"type\" : decks [ deck_id ] . deck_type (), \"layout\" : decks [ deck_id ] . key_layout ()} def _button_state ( deck_id : str , page : int , button : int ) -> dict : buttons = state . setdefault ( deck_id , {}) . setdefault ( \"buttons\" , {}) buttons_state = buttons . setdefault ( page , {}) # type: ignore return buttons_state . setdefault ( button , {}) # type: ignore def swap_buttons ( deck_id : str , page : int , source_button : int , target_button : int ) -> None : \"\"\"Swaps the properties of the source and target buttons\"\"\" temp = cast ( dict , state [ deck_id ][ \"buttons\" ])[ page ][ source_button ] cast ( dict , state [ deck_id ][ \"buttons\" ])[ page ][ source_button ] = cast ( dict , state [ deck_id ][ \"buttons\" ] )[ page ][ target_button ] cast ( dict , state [ deck_id ][ \"buttons\" ])[ page ][ target_button ] = temp # Clear the cache so images will be recreated on render image_cache . pop ( f \" { deck_id } . { page } . { source_button } \" , None ) image_cache . pop ( f \" { deck_id } . { page } . { target_button } \" , None ) _save_state () render () def set_button_text ( deck_id : str , page : int , button : int , text : str ) -> None : \"\"\"Set the text associated with a button\"\"\" if get_button_text ( deck_id , page , button ) != text : _button_state ( deck_id , page , button )[ \"text\" ] = text image_cache . pop ( f \" { deck_id } . { page } . { button } \" , None ) render () _save_state () def get_button_text ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the text set for the specified button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"text\" , \"\" ) def set_button_icon ( deck_id : str , page : int , button : int , icon : str ) -> None : \"\"\"Sets the icon associated with a button\"\"\" if get_button_icon ( deck_id , page , button ) != icon : _button_state ( deck_id , page , button )[ \"icon\" ] = icon image_cache . pop ( f \" { deck_id } . { page } . { button } \" , None ) render () _save_state () def get_button_icon ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the icon set for a particular button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"icon\" , \"\" ) def set_button_change_brightness ( deck_id : str , page : int , button : int , amount : int ) -> None : \"\"\"Sets the brightness changing associated with a button\"\"\" if get_button_change_brightness ( deck_id , page , button ) != amount : _button_state ( deck_id , page , button )[ \"brightness_change\" ] = amount render () _save_state () def get_button_change_brightness ( deck_id : str , page : int , button : int ) -> int : \"\"\"Returns the brightness change set for a particular button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"brightness_change\" , 0 ) def set_button_command ( deck_id : str , page : int , button : int , command : str ) -> None : \"\"\"Sets the command associated with the button\"\"\" if get_button_command ( deck_id , page , button ) != command : _button_state ( deck_id , page , button )[ \"command\" ] = command _save_state () def get_button_command ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the command set for the specified button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"command\" , \"\" ) def set_button_switch_page ( deck_id : str , page : int , button : int , switch_page : int ) -> None : \"\"\"Sets the page switch associated with the button\"\"\" if get_button_switch_page ( deck_id , page , button ) != switch_page : _button_state ( deck_id , page , button )[ \"switch_page\" ] = switch_page _save_state () def get_button_switch_page ( deck_id : str , page : int , button : int ) -> int : \"\"\"Returns the page switch set for the specified button. 0 implies no page switch.\"\"\" return _button_state ( deck_id , page , button ) . get ( \"switch_page\" , 0 ) def set_button_keys ( deck_id : str , page : int , button : int , keys : str ) -> None : \"\"\"Sets the keys associated with the button\"\"\" if get_button_keys ( deck_id , page , button ) != keys : _button_state ( deck_id , page , button )[ \"keys\" ] = keys _save_state () def get_button_keys ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the keys set for the specified button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"keys\" , \"\" ) def set_button_write ( deck_id : str , page : int , button : int , write : str ) -> None : \"\"\"Sets the text meant to be written when button is pressed\"\"\" if get_button_write ( deck_id , page , button ) != write : _button_state ( deck_id , page , button )[ \"write\" ] = write _save_state () def get_button_write ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the text to be produced when the specified button is pressed\"\"\" return _button_state ( deck_id , page , button ) . get ( \"write\" , \"\" ) def set_brightness ( deck_id : str , brightness : int ) -> None : \"\"\"Sets the brightness for every button on the deck\"\"\" if get_brightness ( deck_id ) != brightness : decks [ deck_id ] . set_brightness ( brightness ) state . setdefault ( deck_id , {})[ \"brightness\" ] = brightness _save_state () def get_brightness ( deck_id : str ) -> int : \"\"\"Gets the brightness that is set for the specified stream deck\"\"\" return state . get ( deck_id , {}) . get ( \"brightness\" , 100 ) # type: ignore def change_brightness ( deck_id : str , amount : int = 1 ) -> None : \"\"\"Change the brightness of the deck by the specified amount\"\"\" set_brightness ( deck_id , max ( min ( get_brightness ( deck_id ) + amount , 100 ), 0 )) def get_page ( deck_id : str ) -> int : \"\"\"Gets the current page shown on the stream deck\"\"\" return state . get ( deck_id , {}) . get ( \"page\" , 0 ) # type: ignore def set_page ( deck_id : str , page : int ) -> None : \"\"\"Sets the current page shown on the stream deck\"\"\" if get_page ( deck_id ) != page : state . setdefault ( deck_id , {})[ \"page\" ] = page render () _save_state () def render () -> None : \"\"\"renders all decks\"\"\" for deck_id , deck_state in state . items (): deck = decks . get ( deck_id , None ) if not deck : warn ( f \" { deck_id } has settings specified but is not seen. Likely unplugged!\" ) continue page = get_page ( deck_id ) for button_id , button_settings in ( deck_state . get ( \"buttons\" , {}) . get ( page , {}) . items () # type: ignore ): key = f \" { deck_id } . { page } . { button_id } \" if key in image_cache : image = image_cache [ key ] else : image = _render_key_image ( deck , ** button_settings ) image_cache [ key ] = image with streamdecks_lock : deck . set_key_image ( button_id , image ) def _render_key_image ( deck , icon : str = \"\" , text : str = \"\" , font : str = DEFAULT_FONT , ** kwargs ): \"\"\"Renders an individual key image\"\"\" image = PILHelper . create_image ( deck ) draw = ImageDraw . Draw ( image ) if icon : try : rgba_icon = Image . open ( icon ) . convert ( \"RGBA\" ) except ( OSError , IOError ) as icon_error : print ( f \"Unable to load icon { icon } with error { icon_error } \" ) rgba_icon = Image . new ( \"RGBA\" , ( 300 , 300 )) else : rgba_icon = Image . new ( \"RGBA\" , ( 300 , 300 )) icon_width , icon_height = image . width , image . height if text : icon_height -= 20 rgba_icon . thumbnail (( icon_width , icon_height ), Image . LANCZOS ) icon_pos = (( image . width - rgba_icon . width ) // 2 , 0 ) image . paste ( rgba_icon , icon_pos , rgba_icon ) if text : true_font = ImageFont . truetype ( os . path . join ( FONTS_PATH , font ), 14 ) label_w , label_h = draw . textsize ( text , font = true_font ) if icon : label_pos = (( image . width - label_w ) // 2 , image . height - 20 ) else : label_pos = (( image . width - label_w ) // 2 , ( image . height // 2 ) - 7 ) draw . text ( label_pos , text = text , font = true_font , fill = \"white\" ) return PILHelper . to_native_format ( deck , image ) if os . path . isfile ( STATE_FILE ): _open_config ( STATE_FILE ) Variables CONFIG_FILE_VERSION DEFAULT_FONT FONTS_PATH STATE_FILE decks image_cache state streamdecks_lock Functions change_brightness def change_brightness ( deck_id : str , amount : int = 1 ) -> None Change the brightness of the deck by the specified amount View Source def change_brightness ( deck_id : str , amount : int = 1 ) -> None : \"\"\"Change the brightness of the deck by the specified amount\"\"\" set_brightness ( deck_id , max ( min ( get_brightness ( deck_id ) + amount , 100 ), 0 )) close_decks def close_decks ( ) -> None Closes open decks for input/ouput. View Source def close_decks () -> None : \"\"\"Closes open decks for input/ouput.\"\"\" for _deck_serial , deck in decks . items () : if deck . connected () : deck . reset () deck . close () ensure_decks_connected def ensure_decks_connected ( ) -> None Reconnects to any decks that lost connection. If they did, re-renders them. View Source def ensure_decks_connected () -> None : \"\"\"Reconnects to any decks that lost connection. If they did, re-renders them.\"\"\" for deck_serial , deck in decks . copy (). items () : if not deck . connected () : for new_deck in DeviceManager . DeviceManager (). enumerate () : try : new_deck . open () new_deck_serial = new_deck . get_serial_number () except Exception as error : warn ( f \"A {error} error occurred when trying to reconnect to {deck_serial}\" ) new_deck_serial = None if new_deck_serial == deck_serial : deck . close () new_deck . reset () new_deck . set_key_callback ( partial ( _key_change_callback , new_deck_serial )) decks [ new_deck_serial ] = new_deck render () export_config def export_config ( output_file : str ) -> None View Source def export_config ( output_file : str ) -> None : try : with open ( output_file + \".tmp\" , \"w\" ) as state_file : state_file . write ( json . dumps ( { \"streamdeck_ui_version\" : CONFIG_FILE_VERSION , \"state\" : state }, indent = 4 , separators = ( \",\" , \": \" ), ) ) except Exception as error : print ( f \"The configuration file '{output_file}' was not updated. Error: {error}\" ) raise else : os . replace ( output_file + \".tmp\" , output_file ) get_brightness def get_brightness ( deck_id : str ) -> int Gets the brightness that is set for the specified stream deck View Source def get_brightness ( deck_id : str ) -> int : \"\"\"Gets the brightness that is set for the specified stream deck\"\"\" return state . get ( deck_id , {}). get ( \"brightness\" , 100 ) # type : ignore get_button_change_brightness def get_button_change_brightness ( deck_id : str , page : int , button : int ) -> int Returns the brightness change set for a particular button View Source def get_button_change_brightness ( deck_id : str , page : int , button : int ) -> int : \"\"\"Returns the brightness change set for a particular button\"\"\" return _button_state ( deck_id , page , button ). get ( \"brightness_change\" , 0 ) get_button_command def get_button_command ( deck_id : str , page : int , button : int ) -> str Returns the command set for the specified button View Source def get_button_command ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the command set for the specified button\"\"\" return _button_state ( deck_id , page , button ). get ( \"command\" , \"\" ) get_button_icon def get_button_icon ( deck_id : str , page : int , button : int ) -> str Returns the icon set for a particular button View Source def get_button_icon ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the icon set for a particular button\"\"\" return _button_state ( deck_id , page , button ). get ( \"icon\" , \"\" ) get_button_keys def get_button_keys ( deck_id : str , page : int , button : int ) -> str Returns the keys set for the specified button View Source def get_button_keys ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the keys set for the specified button\"\"\" return _button_state ( deck_id , page , button ). get ( \"keys\" , \"\" ) get_button_switch_page def get_button_switch_page ( deck_id : str , page : int , button : int ) -> int Returns the page switch set for the specified button. 0 implies no page switch. View Source def get_button_switch_page ( deck_id : str , page : int , button : int ) -> int : \"\"\"Returns the page switch set for the specified button. 0 implies no page switch.\"\"\" return _button_state ( deck_id , page , button ). get ( \"switch_page\" , 0 ) get_button_text def get_button_text ( deck_id : str , page : int , button : int ) -> str Returns the text set for the specified button View Source def get_button_text ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the text set for the specified button\"\"\" return _button_state ( deck_id , page , button ). get ( \"text\" , \"\" ) get_button_write def get_button_write ( deck_id : str , page : int , button : int ) -> str Returns the text to be produced when the specified button is pressed View Source def get_button_write ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the text to be produced when the specified button is pressed\"\"\" return _button_state ( deck_id , page , button ). get ( \"write\" , \"\" ) get_deck def get_deck ( deck_id : str ) -> typing . Dict [ str , typing . Dict [ str , typing . Union [ str , typing . Tuple [ int , int ]]]] View Source def get_deck ( deck_id : str ) -> Dict [ str, Dict[str, Union[str, Tuple[int, int ] ]]]: return { \"type\" : decks [ deck_id ] . deck_type (), \"layout\" : decks [ deck_id ] . key_layout () } get_page def get_page ( deck_id : str ) -> int Gets the current page shown on the stream deck View Source def get_page ( deck_id : str ) -> int : \"\"\"Gets the current page shown on the stream deck\"\"\" return state . get ( deck_id , {}). get ( \"page\" , 0 ) # type : ignore import_config def import_config ( config_file : str ) -> None View Source def import_config ( config_file : str ) -> None : _open_config ( config_file ) render () _save_state () open_decks def open_decks ( ) -> typing . Dict [ str , typing . Dict [ str , typing . Union [ str , typing . Tuple [ int , int ]]]] Opens and then returns all known stream deck devices View Source def open_decks () -> Dict [ str, Dict[str, Union[str, Tuple[int, int ] ]]]: \"\"\"Opens and then returns all known stream deck devices\"\"\" for deck in DeviceManager . DeviceManager (). enumerate () : deck . open () deck . reset () deck_id = deck . get_serial_number () decks [ deck_id ] = deck deck . set_key_callback ( partial ( _key_change_callback , deck_id )) return { deck_id : { \"type\" : deck . deck_type (), \"layout\" : deck . key_layout () } for deck_id , deck in decks . items () } render def render ( ) -> None renders all decks View Source def render () -> None : \"\"\"renders all decks\"\"\" for deck_id , deck_state in state . items () : deck = decks . get ( deck_id , None ) if not deck : warn ( f \"{deck_id} has settings specified but is not seen. Likely unplugged!\" ) continue page = get_page ( deck_id ) for button_id , button_settings in ( deck_state . get ( \"buttons\" , {} ). get ( page , {} ). items () # type : ignore ) : key = f \"{deck_id}.{page}.{button_id}\" if key in image_cache : image = image_cache [ key ] else : image = _render_key_image ( deck , ** button_settings ) image_cache [ key ] = image with streamdecks_lock : deck . set_key_image ( button_id , image ) set_brightness def set_brightness ( deck_id : str , brightness : int ) -> None Sets the brightness for every button on the deck View Source def set_brightness ( deck_id : str , brightness : int ) -> None : \"\"\"Sets the brightness for every button on the deck\"\"\" if get_brightness ( deck_id ) != brightness : decks [ deck_id ] . set_brightness ( brightness ) state . setdefault ( deck_id , {} ) [ \"brightness\" ] = brightness _save_state () set_button_change_brightness def set_button_change_brightness ( deck_id : str , page : int , button : int , amount : int ) -> None Sets the brightness changing associated with a button View Source def set_button_change_brightness ( deck_id : str , page : int , button : int , amount : int ) -> None : \"\"\"Sets the brightness changing associated with a button\"\"\" if get_button_change_brightness ( deck_id , page , button ) != amount : _button_state ( deck_id , page , button )[ \"brightness_change\" ] = amount render () _save_state () set_button_command def set_button_command ( deck_id : str , page : int , button : int , command : str ) -> None Sets the command associated with the button View Source def set_button_command ( deck_id : str , page : int , button : int , command : str ) -> None : \"\"\"Sets the command associated with the button\"\"\" if get_button_command ( deck_id , page , button ) != command : _button_state ( deck_id , page , button )[ \"command\" ] = command _save_state () set_button_icon def set_button_icon ( deck_id : str , page : int , button : int , icon : str ) -> None Sets the icon associated with a button View Source def set_button_icon ( deck_id : str , page : int , button : int , icon : str ) -> None : \"\"\"Sets the icon associated with a button\"\"\" if get_button_icon ( deck_id , page , button ) != icon : _button_state ( deck_id , page , button )[ \"icon\" ] = icon image_cache . pop ( f \"{deck_id}.{page}.{button}\" , None ) render () _save_state () set_button_keys def set_button_keys ( deck_id : str , page : int , button : int , keys : str ) -> None Sets the keys associated with the button View Source def set_button_keys ( deck_id : str , page : int , button : int , keys : str ) -> None : \"\"\"Sets the keys associated with the button\"\"\" if get_button_keys ( deck_id , page , button ) != keys : _button_state ( deck_id , page , button )[ \"keys\" ] = keys _save_state () set_button_switch_page def set_button_switch_page ( deck_id : str , page : int , button : int , switch_page : int ) -> None Sets the page switch associated with the button View Source def set_button_switch_page ( deck_id : str , page : int , button : int , switch_page : int ) -> None : \"\"\"Sets the page switch associated with the button\"\"\" if get_button_switch_page ( deck_id , page , button ) != switch_page : _button_state ( deck_id , page , button )[ \"switch_page\" ] = switch_page _save_state () set_button_text def set_button_text ( deck_id : str , page : int , button : int , text : str ) -> None Set the text associated with a button View Source def set_button_text ( deck_id : str , page : int , button : int , text : str ) -> None : \"\"\"Set the text associated with a button\"\"\" if get_button_text ( deck_id , page , button ) != text : _button_state ( deck_id , page , button )[ \"text\" ] = text image_cache . pop ( f \"{deck_id}.{page}.{button}\" , None ) render () _save_state () set_button_write def set_button_write ( deck_id : str , page : int , button : int , write : str ) -> None Sets the text meant to be written when button is pressed View Source def set_button_write ( deck_id : str , page : int , button : int , write : str ) -> None : \"\"\"Sets the text meant to be written when button is pressed\"\"\" if get_button_write ( deck_id , page , button ) != write : _button_state ( deck_id , page , button )[ \"write\" ] = write _save_state () set_page def set_page ( deck_id : str , page : int ) -> None Sets the current page shown on the stream deck View Source def set_page ( deck_id : str , page : int ) -> None : \"\"\"Sets the current page shown on the stream deck\"\"\" if get_page ( deck_id ) != page : state . setdefault ( deck_id , {})[ \"page\" ] = page render () _save_state () swap_buttons def swap_buttons ( deck_id : str , page : int , source_button : int , target_button : int ) -> None Swaps the properties of the source and target buttons View Source def swap_buttons ( deck_id : str , page : int , source_button : int , target_button : int ) -> None : \"\"\"Swaps the properties of the source and target buttons\"\"\" temp = cast ( dict , state [ deck_id ][ \"buttons\" ] ) [ page ][ source_button ] cast ( dict , state [ deck_id ][ \"buttons\" ] ) [ page ][ source_button ] = cast ( dict , state [ deck_id ][ \"buttons\" ] ) [ page ][ target_button ] cast ( dict , state [ deck_id ][ \"buttons\" ] ) [ page ][ target_button ] = temp # Clear the cache so images will be recreated on render image_cache . pop ( f \"{deck_id}.{page}.{source_button}\" , None ) image_cache . pop ( f \"{deck_id}.{page}.{target_button}\" , None ) _save_state () render ()","title":"API"},{"location":"reference/streamdeck_ui/api/#module-streamdeck_uiapi","text":"Defines the Python API for interacting with the StreamDeck Configuration UI None View Source \"\"\"Defines the Python API for interacting with the StreamDeck Configuration UI\"\"\" import json import os import shlex import threading import time from functools import partial from subprocess import Popen # nosec - Need to allow users to specify arbitrary commands from typing import Dict , Tuple , Union , cast from warnings import warn from PIL import Image , ImageDraw , ImageFont from pynput.keyboard import Controller , Key from StreamDeck import DeviceManager from StreamDeck.Devices import StreamDeck from StreamDeck.ImageHelpers import PILHelper from streamdeck_ui.config import CONFIG_FILE_VERSION , DEFAULT_FONT , FONTS_PATH , STATE_FILE image_cache : Dict [ str , memoryview ] = {} decks : Dict [ str , StreamDeck . StreamDeck ] = {} state : Dict [ str , Dict [ str , Union [ int , Dict [ int , Dict [ int , Dict [ str , str ]]]]]] = {} streamdecks_lock = threading . Lock () def _replace_special_keys ( key ): \"\"\"Replaces special keywords the user can use with their character equivalent.\"\"\" if key . lower () == \"plus\" : return \"+\" if key . lower () == \"comma\" : return \",\" if key . lower () == \"delay\" : return \"delay\" return key def _key_change_callback ( deck_id : str , _deck : StreamDeck . StreamDeck , key : int , state : bool ) -> None : \"\"\" Callback whenever a key is pressed. This is method runs the various actions defined for the key being pressed, sequentially. \"\"\" if state : keyboard = Controller () page = get_page ( deck_id ) command = get_button_command ( deck_id , page , key ) if command : try : Popen ( shlex . split ( command )) except Exception as error : print ( f \"The command ' { command } ' failed: { error } \" ) keys = get_button_keys ( deck_id , page , key ) if keys : keys = keys . strip () . replace ( \" \" , \"\" ) for section in keys . split ( \",\" ): # Since + and , are used to delimit our section and keys to press, # they need to be substituded with keywords. section_keys = [ _replace_special_keys ( key_name ) for key_name in section . split ( \"+\" )] # Translate string to enum, or just the string itself if not found section_keys = [ getattr ( Key , key_name . lower (), key_name ) for key_name in section_keys ] for key_name in section_keys : try : if key_name == \"delay\" : time . sleep ( 0.5 ) else : keyboard . press ( key_name ) except Exception : print ( f \"Could not press key ' { key_name } '\" ) for key_name in section_keys : try : if key_name != \"delay\" : keyboard . release ( key_name ) except Exception : print ( f \"Could not release key ' { key_name } '\" ) write = get_button_write ( deck_id , page , key ) if write : try : keyboard . type ( write ) except Exception as error : print ( f \"Could not complete the write command: { error } \" ) brightness_change = get_button_change_brightness ( deck_id , page , key ) if brightness_change : try : change_brightness ( deck_id , brightness_change ) except Exception as error : print ( f \"Could not change brightness: { error } \" ) switch_page = get_button_switch_page ( deck_id , page , key ) if switch_page : set_page ( deck_id , switch_page - 1 ) def _save_state (): export_config ( STATE_FILE ) def _open_config ( config_file : str ): global state with open ( config_file ) as state_file : config = json . loads ( state_file . read ()) file_version = config . get ( \"streamdeck_ui_version\" , 0 ) if file_version != CONFIG_FILE_VERSION : raise ValueError ( \"Incompatible version of config file found: \" f \" { file_version } does not match required version \" f \" { CONFIG_FILE_VERSION } .\" ) state = {} for deck_id , deck in config [ \"state\" ] . items (): deck [ \"buttons\" ] = { int ( page_id ): { int ( button_id ): button for button_id , button in buttons . items ()} for page_id , buttons in deck . get ( \"buttons\" , {}) . items () } state [ deck_id ] = deck def import_config ( config_file : str ) -> None : _open_config ( config_file ) render () _save_state () def export_config ( output_file : str ) -> None : try : with open ( output_file + \".tmp\" , \"w\" ) as state_file : state_file . write ( json . dumps ( { \"streamdeck_ui_version\" : CONFIG_FILE_VERSION , \"state\" : state }, indent = 4 , separators = ( \",\" , \": \" ), ) ) except Exception as error : print ( f \"The configuration file ' { output_file } ' was not updated. Error: { error } \" ) raise else : os . replace ( output_file + \".tmp\" , output_file ) def open_decks () -> Dict [ str , Dict [ str , Union [ str , Tuple [ int , int ]]]]: \"\"\"Opens and then returns all known stream deck devices\"\"\" for deck in DeviceManager . DeviceManager () . enumerate (): deck . open () deck . reset () deck_id = deck . get_serial_number () decks [ deck_id ] = deck deck . set_key_callback ( partial ( _key_change_callback , deck_id )) return { deck_id : { \"type\" : deck . deck_type (), \"layout\" : deck . key_layout ()} for deck_id , deck in decks . items () } def close_decks () -> None : \"\"\"Closes open decks for input/ouput.\"\"\" for _deck_serial , deck in decks . items (): if deck . connected (): deck . reset () deck . close () def ensure_decks_connected () -> None : \"\"\"Reconnects to any decks that lost connection. If they did, re-renders them.\"\"\" for deck_serial , deck in decks . copy () . items (): if not deck . connected (): for new_deck in DeviceManager . DeviceManager () . enumerate (): try : new_deck . open () new_deck_serial = new_deck . get_serial_number () except Exception as error : warn ( f \"A { error } error occurred when trying to reconnect to { deck_serial } \" ) new_deck_serial = None if new_deck_serial == deck_serial : deck . close () new_deck . reset () new_deck . set_key_callback ( partial ( _key_change_callback , new_deck_serial )) decks [ new_deck_serial ] = new_deck render () def get_deck ( deck_id : str ) -> Dict [ str , Dict [ str , Union [ str , Tuple [ int , int ]]]]: return { \"type\" : decks [ deck_id ] . deck_type (), \"layout\" : decks [ deck_id ] . key_layout ()} def _button_state ( deck_id : str , page : int , button : int ) -> dict : buttons = state . setdefault ( deck_id , {}) . setdefault ( \"buttons\" , {}) buttons_state = buttons . setdefault ( page , {}) # type: ignore return buttons_state . setdefault ( button , {}) # type: ignore def swap_buttons ( deck_id : str , page : int , source_button : int , target_button : int ) -> None : \"\"\"Swaps the properties of the source and target buttons\"\"\" temp = cast ( dict , state [ deck_id ][ \"buttons\" ])[ page ][ source_button ] cast ( dict , state [ deck_id ][ \"buttons\" ])[ page ][ source_button ] = cast ( dict , state [ deck_id ][ \"buttons\" ] )[ page ][ target_button ] cast ( dict , state [ deck_id ][ \"buttons\" ])[ page ][ target_button ] = temp # Clear the cache so images will be recreated on render image_cache . pop ( f \" { deck_id } . { page } . { source_button } \" , None ) image_cache . pop ( f \" { deck_id } . { page } . { target_button } \" , None ) _save_state () render () def set_button_text ( deck_id : str , page : int , button : int , text : str ) -> None : \"\"\"Set the text associated with a button\"\"\" if get_button_text ( deck_id , page , button ) != text : _button_state ( deck_id , page , button )[ \"text\" ] = text image_cache . pop ( f \" { deck_id } . { page } . { button } \" , None ) render () _save_state () def get_button_text ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the text set for the specified button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"text\" , \"\" ) def set_button_icon ( deck_id : str , page : int , button : int , icon : str ) -> None : \"\"\"Sets the icon associated with a button\"\"\" if get_button_icon ( deck_id , page , button ) != icon : _button_state ( deck_id , page , button )[ \"icon\" ] = icon image_cache . pop ( f \" { deck_id } . { page } . { button } \" , None ) render () _save_state () def get_button_icon ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the icon set for a particular button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"icon\" , \"\" ) def set_button_change_brightness ( deck_id : str , page : int , button : int , amount : int ) -> None : \"\"\"Sets the brightness changing associated with a button\"\"\" if get_button_change_brightness ( deck_id , page , button ) != amount : _button_state ( deck_id , page , button )[ \"brightness_change\" ] = amount render () _save_state () def get_button_change_brightness ( deck_id : str , page : int , button : int ) -> int : \"\"\"Returns the brightness change set for a particular button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"brightness_change\" , 0 ) def set_button_command ( deck_id : str , page : int , button : int , command : str ) -> None : \"\"\"Sets the command associated with the button\"\"\" if get_button_command ( deck_id , page , button ) != command : _button_state ( deck_id , page , button )[ \"command\" ] = command _save_state () def get_button_command ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the command set for the specified button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"command\" , \"\" ) def set_button_switch_page ( deck_id : str , page : int , button : int , switch_page : int ) -> None : \"\"\"Sets the page switch associated with the button\"\"\" if get_button_switch_page ( deck_id , page , button ) != switch_page : _button_state ( deck_id , page , button )[ \"switch_page\" ] = switch_page _save_state () def get_button_switch_page ( deck_id : str , page : int , button : int ) -> int : \"\"\"Returns the page switch set for the specified button. 0 implies no page switch.\"\"\" return _button_state ( deck_id , page , button ) . get ( \"switch_page\" , 0 ) def set_button_keys ( deck_id : str , page : int , button : int , keys : str ) -> None : \"\"\"Sets the keys associated with the button\"\"\" if get_button_keys ( deck_id , page , button ) != keys : _button_state ( deck_id , page , button )[ \"keys\" ] = keys _save_state () def get_button_keys ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the keys set for the specified button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"keys\" , \"\" ) def set_button_write ( deck_id : str , page : int , button : int , write : str ) -> None : \"\"\"Sets the text meant to be written when button is pressed\"\"\" if get_button_write ( deck_id , page , button ) != write : _button_state ( deck_id , page , button )[ \"write\" ] = write _save_state () def get_button_write ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the text to be produced when the specified button is pressed\"\"\" return _button_state ( deck_id , page , button ) . get ( \"write\" , \"\" ) def set_brightness ( deck_id : str , brightness : int ) -> None : \"\"\"Sets the brightness for every button on the deck\"\"\" if get_brightness ( deck_id ) != brightness : decks [ deck_id ] . set_brightness ( brightness ) state . setdefault ( deck_id , {})[ \"brightness\" ] = brightness _save_state () def get_brightness ( deck_id : str ) -> int : \"\"\"Gets the brightness that is set for the specified stream deck\"\"\" return state . get ( deck_id , {}) . get ( \"brightness\" , 100 ) # type: ignore def change_brightness ( deck_id : str , amount : int = 1 ) -> None : \"\"\"Change the brightness of the deck by the specified amount\"\"\" set_brightness ( deck_id , max ( min ( get_brightness ( deck_id ) + amount , 100 ), 0 )) def get_page ( deck_id : str ) -> int : \"\"\"Gets the current page shown on the stream deck\"\"\" return state . get ( deck_id , {}) . get ( \"page\" , 0 ) # type: ignore def set_page ( deck_id : str , page : int ) -> None : \"\"\"Sets the current page shown on the stream deck\"\"\" if get_page ( deck_id ) != page : state . setdefault ( deck_id , {})[ \"page\" ] = page render () _save_state () def render () -> None : \"\"\"renders all decks\"\"\" for deck_id , deck_state in state . items (): deck = decks . get ( deck_id , None ) if not deck : warn ( f \" { deck_id } has settings specified but is not seen. Likely unplugged!\" ) continue page = get_page ( deck_id ) for button_id , button_settings in ( deck_state . get ( \"buttons\" , {}) . get ( page , {}) . items () # type: ignore ): key = f \" { deck_id } . { page } . { button_id } \" if key in image_cache : image = image_cache [ key ] else : image = _render_key_image ( deck , ** button_settings ) image_cache [ key ] = image with streamdecks_lock : deck . set_key_image ( button_id , image ) def _render_key_image ( deck , icon : str = \"\" , text : str = \"\" , font : str = DEFAULT_FONT , ** kwargs ): \"\"\"Renders an individual key image\"\"\" image = PILHelper . create_image ( deck ) draw = ImageDraw . Draw ( image ) if icon : try : rgba_icon = Image . open ( icon ) . convert ( \"RGBA\" ) except ( OSError , IOError ) as icon_error : print ( f \"Unable to load icon { icon } with error { icon_error } \" ) rgba_icon = Image . new ( \"RGBA\" , ( 300 , 300 )) else : rgba_icon = Image . new ( \"RGBA\" , ( 300 , 300 )) icon_width , icon_height = image . width , image . height if text : icon_height -= 20 rgba_icon . thumbnail (( icon_width , icon_height ), Image . LANCZOS ) icon_pos = (( image . width - rgba_icon . width ) // 2 , 0 ) image . paste ( rgba_icon , icon_pos , rgba_icon ) if text : true_font = ImageFont . truetype ( os . path . join ( FONTS_PATH , font ), 14 ) label_w , label_h = draw . textsize ( text , font = true_font ) if icon : label_pos = (( image . width - label_w ) // 2 , image . height - 20 ) else : label_pos = (( image . width - label_w ) // 2 , ( image . height // 2 ) - 7 ) draw . text ( label_pos , text = text , font = true_font , fill = \"white\" ) return PILHelper . to_native_format ( deck , image ) if os . path . isfile ( STATE_FILE ): _open_config ( STATE_FILE )","title":"Module streamdeck_ui.api"},{"location":"reference/streamdeck_ui/api/#variables","text":"CONFIG_FILE_VERSION DEFAULT_FONT FONTS_PATH STATE_FILE decks image_cache state streamdecks_lock","title":"Variables"},{"location":"reference/streamdeck_ui/api/#functions","text":"","title":"Functions"},{"location":"reference/streamdeck_ui/api/#change_brightness","text":"def change_brightness ( deck_id : str , amount : int = 1 ) -> None Change the brightness of the deck by the specified amount View Source def change_brightness ( deck_id : str , amount : int = 1 ) -> None : \"\"\"Change the brightness of the deck by the specified amount\"\"\" set_brightness ( deck_id , max ( min ( get_brightness ( deck_id ) + amount , 100 ), 0 ))","title":"change_brightness"},{"location":"reference/streamdeck_ui/api/#close_decks","text":"def close_decks ( ) -> None Closes open decks for input/ouput. View Source def close_decks () -> None : \"\"\"Closes open decks for input/ouput.\"\"\" for _deck_serial , deck in decks . items () : if deck . connected () : deck . reset () deck . close ()","title":"close_decks"},{"location":"reference/streamdeck_ui/api/#ensure_decks_connected","text":"def ensure_decks_connected ( ) -> None Reconnects to any decks that lost connection. If they did, re-renders them. View Source def ensure_decks_connected () -> None : \"\"\"Reconnects to any decks that lost connection. If they did, re-renders them.\"\"\" for deck_serial , deck in decks . copy (). items () : if not deck . connected () : for new_deck in DeviceManager . DeviceManager (). enumerate () : try : new_deck . open () new_deck_serial = new_deck . get_serial_number () except Exception as error : warn ( f \"A {error} error occurred when trying to reconnect to {deck_serial}\" ) new_deck_serial = None if new_deck_serial == deck_serial : deck . close () new_deck . reset () new_deck . set_key_callback ( partial ( _key_change_callback , new_deck_serial )) decks [ new_deck_serial ] = new_deck render ()","title":"ensure_decks_connected"},{"location":"reference/streamdeck_ui/api/#export_config","text":"def export_config ( output_file : str ) -> None View Source def export_config ( output_file : str ) -> None : try : with open ( output_file + \".tmp\" , \"w\" ) as state_file : state_file . write ( json . dumps ( { \"streamdeck_ui_version\" : CONFIG_FILE_VERSION , \"state\" : state }, indent = 4 , separators = ( \",\" , \": \" ), ) ) except Exception as error : print ( f \"The configuration file '{output_file}' was not updated. Error: {error}\" ) raise else : os . replace ( output_file + \".tmp\" , output_file )","title":"export_config"},{"location":"reference/streamdeck_ui/api/#get_brightness","text":"def get_brightness ( deck_id : str ) -> int Gets the brightness that is set for the specified stream deck View Source def get_brightness ( deck_id : str ) -> int : \"\"\"Gets the brightness that is set for the specified stream deck\"\"\" return state . get ( deck_id , {}). get ( \"brightness\" , 100 ) # type : ignore","title":"get_brightness"},{"location":"reference/streamdeck_ui/api/#get_button_change_brightness","text":"def get_button_change_brightness ( deck_id : str , page : int , button : int ) -> int Returns the brightness change set for a particular button View Source def get_button_change_brightness ( deck_id : str , page : int , button : int ) -> int : \"\"\"Returns the brightness change set for a particular button\"\"\" return _button_state ( deck_id , page , button ). get ( \"brightness_change\" , 0 )","title":"get_button_change_brightness"},{"location":"reference/streamdeck_ui/api/#get_button_command","text":"def get_button_command ( deck_id : str , page : int , button : int ) -> str Returns the command set for the specified button View Source def get_button_command ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the command set for the specified button\"\"\" return _button_state ( deck_id , page , button ). get ( \"command\" , \"\" )","title":"get_button_command"},{"location":"reference/streamdeck_ui/api/#get_button_icon","text":"def get_button_icon ( deck_id : str , page : int , button : int ) -> str Returns the icon set for a particular button View Source def get_button_icon ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the icon set for a particular button\"\"\" return _button_state ( deck_id , page , button ). get ( \"icon\" , \"\" )","title":"get_button_icon"},{"location":"reference/streamdeck_ui/api/#get_button_keys","text":"def get_button_keys ( deck_id : str , page : int , button : int ) -> str Returns the keys set for the specified button View Source def get_button_keys ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the keys set for the specified button\"\"\" return _button_state ( deck_id , page , button ). get ( \"keys\" , \"\" )","title":"get_button_keys"},{"location":"reference/streamdeck_ui/api/#get_button_switch_page","text":"def get_button_switch_page ( deck_id : str , page : int , button : int ) -> int Returns the page switch set for the specified button. 0 implies no page switch. View Source def get_button_switch_page ( deck_id : str , page : int , button : int ) -> int : \"\"\"Returns the page switch set for the specified button. 0 implies no page switch.\"\"\" return _button_state ( deck_id , page , button ). get ( \"switch_page\" , 0 )","title":"get_button_switch_page"},{"location":"reference/streamdeck_ui/api/#get_button_text","text":"def get_button_text ( deck_id : str , page : int , button : int ) -> str Returns the text set for the specified button View Source def get_button_text ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the text set for the specified button\"\"\" return _button_state ( deck_id , page , button ). get ( \"text\" , \"\" )","title":"get_button_text"},{"location":"reference/streamdeck_ui/api/#get_button_write","text":"def get_button_write ( deck_id : str , page : int , button : int ) -> str Returns the text to be produced when the specified button is pressed View Source def get_button_write ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the text to be produced when the specified button is pressed\"\"\" return _button_state ( deck_id , page , button ). get ( \"write\" , \"\" )","title":"get_button_write"},{"location":"reference/streamdeck_ui/api/#get_deck","text":"def get_deck ( deck_id : str ) -> typing . Dict [ str , typing . Dict [ str , typing . Union [ str , typing . Tuple [ int , int ]]]] View Source def get_deck ( deck_id : str ) -> Dict [ str, Dict[str, Union[str, Tuple[int, int ] ]]]: return { \"type\" : decks [ deck_id ] . deck_type (), \"layout\" : decks [ deck_id ] . key_layout () }","title":"get_deck"},{"location":"reference/streamdeck_ui/api/#get_page","text":"def get_page ( deck_id : str ) -> int Gets the current page shown on the stream deck View Source def get_page ( deck_id : str ) -> int : \"\"\"Gets the current page shown on the stream deck\"\"\" return state . get ( deck_id , {}). get ( \"page\" , 0 ) # type : ignore","title":"get_page"},{"location":"reference/streamdeck_ui/api/#import_config","text":"def import_config ( config_file : str ) -> None View Source def import_config ( config_file : str ) -> None : _open_config ( config_file ) render () _save_state ()","title":"import_config"},{"location":"reference/streamdeck_ui/api/#open_decks","text":"def open_decks ( ) -> typing . Dict [ str , typing . Dict [ str , typing . Union [ str , typing . Tuple [ int , int ]]]] Opens and then returns all known stream deck devices View Source def open_decks () -> Dict [ str, Dict[str, Union[str, Tuple[int, int ] ]]]: \"\"\"Opens and then returns all known stream deck devices\"\"\" for deck in DeviceManager . DeviceManager (). enumerate () : deck . open () deck . reset () deck_id = deck . get_serial_number () decks [ deck_id ] = deck deck . set_key_callback ( partial ( _key_change_callback , deck_id )) return { deck_id : { \"type\" : deck . deck_type (), \"layout\" : deck . key_layout () } for deck_id , deck in decks . items () }","title":"open_decks"},{"location":"reference/streamdeck_ui/api/#render","text":"def render ( ) -> None renders all decks View Source def render () -> None : \"\"\"renders all decks\"\"\" for deck_id , deck_state in state . items () : deck = decks . get ( deck_id , None ) if not deck : warn ( f \"{deck_id} has settings specified but is not seen. Likely unplugged!\" ) continue page = get_page ( deck_id ) for button_id , button_settings in ( deck_state . get ( \"buttons\" , {} ). get ( page , {} ). items () # type : ignore ) : key = f \"{deck_id}.{page}.{button_id}\" if key in image_cache : image = image_cache [ key ] else : image = _render_key_image ( deck , ** button_settings ) image_cache [ key ] = image with streamdecks_lock : deck . set_key_image ( button_id , image )","title":"render"},{"location":"reference/streamdeck_ui/api/#set_brightness","text":"def set_brightness ( deck_id : str , brightness : int ) -> None Sets the brightness for every button on the deck View Source def set_brightness ( deck_id : str , brightness : int ) -> None : \"\"\"Sets the brightness for every button on the deck\"\"\" if get_brightness ( deck_id ) != brightness : decks [ deck_id ] . set_brightness ( brightness ) state . setdefault ( deck_id , {} ) [ \"brightness\" ] = brightness _save_state ()","title":"set_brightness"},{"location":"reference/streamdeck_ui/api/#set_button_change_brightness","text":"def set_button_change_brightness ( deck_id : str , page : int , button : int , amount : int ) -> None Sets the brightness changing associated with a button View Source def set_button_change_brightness ( deck_id : str , page : int , button : int , amount : int ) -> None : \"\"\"Sets the brightness changing associated with a button\"\"\" if get_button_change_brightness ( deck_id , page , button ) != amount : _button_state ( deck_id , page , button )[ \"brightness_change\" ] = amount render () _save_state ()","title":"set_button_change_brightness"},{"location":"reference/streamdeck_ui/api/#set_button_command","text":"def set_button_command ( deck_id : str , page : int , button : int , command : str ) -> None Sets the command associated with the button View Source def set_button_command ( deck_id : str , page : int , button : int , command : str ) -> None : \"\"\"Sets the command associated with the button\"\"\" if get_button_command ( deck_id , page , button ) != command : _button_state ( deck_id , page , button )[ \"command\" ] = command _save_state ()","title":"set_button_command"},{"location":"reference/streamdeck_ui/api/#set_button_icon","text":"def set_button_icon ( deck_id : str , page : int , button : int , icon : str ) -> None Sets the icon associated with a button View Source def set_button_icon ( deck_id : str , page : int , button : int , icon : str ) -> None : \"\"\"Sets the icon associated with a button\"\"\" if get_button_icon ( deck_id , page , button ) != icon : _button_state ( deck_id , page , button )[ \"icon\" ] = icon image_cache . pop ( f \"{deck_id}.{page}.{button}\" , None ) render () _save_state ()","title":"set_button_icon"},{"location":"reference/streamdeck_ui/api/#set_button_keys","text":"def set_button_keys ( deck_id : str , page : int , button : int , keys : str ) -> None Sets the keys associated with the button View Source def set_button_keys ( deck_id : str , page : int , button : int , keys : str ) -> None : \"\"\"Sets the keys associated with the button\"\"\" if get_button_keys ( deck_id , page , button ) != keys : _button_state ( deck_id , page , button )[ \"keys\" ] = keys _save_state ()","title":"set_button_keys"},{"location":"reference/streamdeck_ui/api/#set_button_switch_page","text":"def set_button_switch_page ( deck_id : str , page : int , button : int , switch_page : int ) -> None Sets the page switch associated with the button View Source def set_button_switch_page ( deck_id : str , page : int , button : int , switch_page : int ) -> None : \"\"\"Sets the page switch associated with the button\"\"\" if get_button_switch_page ( deck_id , page , button ) != switch_page : _button_state ( deck_id , page , button )[ \"switch_page\" ] = switch_page _save_state ()","title":"set_button_switch_page"},{"location":"reference/streamdeck_ui/api/#set_button_text","text":"def set_button_text ( deck_id : str , page : int , button : int , text : str ) -> None Set the text associated with a button View Source def set_button_text ( deck_id : str , page : int , button : int , text : str ) -> None : \"\"\"Set the text associated with a button\"\"\" if get_button_text ( deck_id , page , button ) != text : _button_state ( deck_id , page , button )[ \"text\" ] = text image_cache . pop ( f \"{deck_id}.{page}.{button}\" , None ) render () _save_state ()","title":"set_button_text"},{"location":"reference/streamdeck_ui/api/#set_button_write","text":"def set_button_write ( deck_id : str , page : int , button : int , write : str ) -> None Sets the text meant to be written when button is pressed View Source def set_button_write ( deck_id : str , page : int , button : int , write : str ) -> None : \"\"\"Sets the text meant to be written when button is pressed\"\"\" if get_button_write ( deck_id , page , button ) != write : _button_state ( deck_id , page , button )[ \"write\" ] = write _save_state ()","title":"set_button_write"},{"location":"reference/streamdeck_ui/api/#set_page","text":"def set_page ( deck_id : str , page : int ) -> None Sets the current page shown on the stream deck View Source def set_page ( deck_id : str , page : int ) -> None : \"\"\"Sets the current page shown on the stream deck\"\"\" if get_page ( deck_id ) != page : state . setdefault ( deck_id , {})[ \"page\" ] = page render () _save_state ()","title":"set_page"},{"location":"reference/streamdeck_ui/api/#swap_buttons","text":"def swap_buttons ( deck_id : str , page : int , source_button : int , target_button : int ) -> None Swaps the properties of the source and target buttons View Source def swap_buttons ( deck_id : str , page : int , source_button : int , target_button : int ) -> None : \"\"\"Swaps the properties of the source and target buttons\"\"\" temp = cast ( dict , state [ deck_id ][ \"buttons\" ] ) [ page ][ source_button ] cast ( dict , state [ deck_id ][ \"buttons\" ] ) [ page ][ source_button ] = cast ( dict , state [ deck_id ][ \"buttons\" ] ) [ page ][ target_button ] cast ( dict , state [ deck_id ][ \"buttons\" ] ) [ page ][ target_button ] = temp # Clear the cache so images will be recreated on render image_cache . pop ( f \"{deck_id}.{page}.{source_button}\" , None ) image_cache . pop ( f \"{deck_id}.{page}.{target_button}\" , None ) _save_state () render ()","title":"swap_buttons"},{"location":"reference/streamdeck_ui/config/","text":"Module streamdeck_ui.config Defines shared configuration variables for the streamdeck_ui project None View Source \"\"\"Defines shared configuration variables for the streamdeck_ui project\"\"\" import os PROJECT_PATH = os . path . dirname ( os . path . abspath ( __file__ )) LOGO = os . path . join ( PROJECT_PATH , \"logo.png\" ) FONTS_PATH = os . path . join ( PROJECT_PATH , \"fonts\" ) DEFAULT_FONT = os . path . join ( \"roboto\" , \"Roboto-Regular.ttf\" ) STATE_FILE = os . environ . get ( \"STREAMDECK_UI_CONFIG\" , os . path . expanduser ( \"~/.streamdeck_ui.json\" )) CONFIG_FILE_VERSION = 1 # Update only if backward incompatible changes are made to the config file Variables CONFIG_FILE_VERSION DEFAULT_FONT FONTS_PATH LOGO PROJECT_PATH STATE_FILE","title":"Config"},{"location":"reference/streamdeck_ui/config/#module-streamdeck_uiconfig","text":"Defines shared configuration variables for the streamdeck_ui project None View Source \"\"\"Defines shared configuration variables for the streamdeck_ui project\"\"\" import os PROJECT_PATH = os . path . dirname ( os . path . abspath ( __file__ )) LOGO = os . path . join ( PROJECT_PATH , \"logo.png\" ) FONTS_PATH = os . path . join ( PROJECT_PATH , \"fonts\" ) DEFAULT_FONT = os . path . join ( \"roboto\" , \"Roboto-Regular.ttf\" ) STATE_FILE = os . environ . get ( \"STREAMDECK_UI_CONFIG\" , os . path . expanduser ( \"~/.streamdeck_ui.json\" )) CONFIG_FILE_VERSION = 1 # Update only if backward incompatible changes are made to the config file","title":"Module streamdeck_ui.config"},{"location":"reference/streamdeck_ui/config/#variables","text":"CONFIG_FILE_VERSION DEFAULT_FONT FONTS_PATH LOGO PROJECT_PATH STATE_FILE","title":"Variables"},{"location":"reference/streamdeck_ui/gui/","text":"Module streamdeck_ui.gui Defines the QT powered interface for configuring Stream Decks None View Source \"\"\"Defines the QT powered interface for configuring Stream Decks\"\"\" import os import sys import time from functools import partial from PySide2 import QtWidgets from PySide2.QtCore import QMimeData , QSize , Qt , QTimer from PySide2.QtGui import QDrag , QIcon from PySide2.QtWidgets import ( QAction , QApplication , QFileDialog , QMainWindow , QMenu , QMessageBox , QSizePolicy , QSystemTrayIcon , ) from streamdeck_ui import api from streamdeck_ui.config import LOGO from streamdeck_ui.ui_main import Ui_MainWindow BUTTON_STYLE = \"\"\" QToolButton{background-color:black; color:white;} QToolButton:checked{background-color:darkGray; color:black;} QToolButton:focus{border:none; } \"\"\" BUTTON_DRAG_STYLE = \"\"\" QToolButton{background-color:white; color:black;} QToolButton:checked{background-color:darkGray; color:black;} QToolButton:focus{border:none; } \"\"\" selected_button : QtWidgets . QToolButton text_timer = None class DraggableButton ( QtWidgets . QToolButton ): \"\"\"A QToolButton that supports drag and drop and swaps the button properties on drop \"\"\" def __init__ ( self , parent , ui ): super ( DraggableButton , self ) . __init__ ( parent ) self . setAcceptDrops ( True ) self . ui = ui def mouseMoveEvent ( self , e ): # noqa: N802 - Part of QT signature. if e . buttons () != Qt . LeftButton : return mimedata = QMimeData () drag = QDrag ( self ) drag . setMimeData ( mimedata ) drag . exec_ ( Qt . MoveAction ) def dropEvent ( self , e ): # noqa: N802 - Part of QT signature. global selected_button self . setStyleSheet ( BUTTON_STYLE ) # Ignore drag and drop on yourself if e . source () . index == self . index : return api . swap_buttons ( _deck_id ( self . ui ), _page ( self . ui ), e . source () . index , self . index ) # In the case that we've dragged the currently selected button, we have to # check the target button instead so it appears that it followed the drag/drop if e . source () . isChecked (): e . source () . setChecked ( False ) self . setChecked ( True ) selected_button = self redraw_buttons ( self . ui ) def dragEnterEvent ( self , e ): # noqa: N802 - Part of QT signature. if type ( self ) is DraggableButton : e . setAccepted ( True ) self . setStyleSheet ( BUTTON_DRAG_STYLE ) else : e . setAccepted ( False ) def dragLeaveEvent ( self , e ): # noqa: N802 - Part of QT signature. self . setStyleSheet ( BUTTON_STYLE ) def _deck_id ( ui ) -> str : return ui . device_list . itemData ( ui . device_list . currentIndex ()) def _page ( ui ) -> int : return ui . pages . currentIndex () def update_button_text ( ui , text : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_text ( deck_id , _page ( ui ), selected_button . index , text ) redraw_buttons ( ui ) def update_button_command ( ui , command : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_command ( deck_id , _page ( ui ), selected_button . index , command ) def update_button_keys ( ui , keys : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_keys ( deck_id , _page ( ui ), selected_button . index , keys ) def update_button_write ( ui ) -> None : deck_id = _deck_id ( ui ) api . set_button_write ( deck_id , _page ( ui ), selected_button . index , ui . write . toPlainText ()) def update_change_brightness ( ui , amount : int ) -> None : deck_id = _deck_id ( ui ) api . set_button_change_brightness ( deck_id , _page ( ui ), selected_button . index , amount ) def update_switch_page ( ui , page : int ) -> None : deck_id = _deck_id ( ui ) api . set_button_switch_page ( deck_id , _page ( ui ), selected_button . index , page ) def _highlight_first_button ( ui ) -> None : button = ui . pages . currentWidget () . findChildren ( QtWidgets . QToolButton )[ 0 ] button . setChecked ( False ) button . click () def change_page ( ui , page : int ) -> None : api . set_page ( _deck_id ( ui ), page ) redraw_buttons ( ui ) _highlight_first_button ( ui ) def select_image ( window ) -> None : deck_id = _deck_id ( window . ui ) image = api . get_button_icon ( deck_id , _page ( window . ui ), selected_button . index ) if not image : image = os . path . expanduser ( \"~\" ) file_name = QFileDialog . getOpenFileName ( window , \"Open Image\" , image , \"Image Files (*.png *.jpg *.bmp)\" )[ 0 ] if file_name : deck_id = _deck_id ( window . ui ) api . set_button_icon ( deck_id , _page ( window . ui ), selected_button . index , file_name ) redraw_buttons ( window . ui ) def remove_image ( window ) -> None : deck_id = _deck_id ( window . ui ) image = api . get_button_icon ( deck_id , _page ( window . ui ), selected_button . index ) if image : confirm = QMessageBox ( window ) confirm . setWindowTitle ( \"Remove image\" ) confirm . setText ( \"Are you sure you want to remove the image for this button?\" ) confirm . setStandardButtons ( QMessageBox . Yes | QMessageBox . No ) confirm . setIcon ( QMessageBox . Question ) button = confirm . exec_ () if button == QMessageBox . Yes : api . set_button_icon ( deck_id , _page ( window . ui ), selected_button . index , \"\" ) redraw_buttons ( window . ui ) def redraw_buttons ( ui ) -> None : deck_id = _deck_id ( ui ) current_tab = ui . pages . currentWidget () buttons = current_tab . findChildren ( QtWidgets . QToolButton ) for button in buttons : button . setText ( api . get_button_text ( deck_id , _page ( ui ), button . index )) button . setIcon ( QIcon ( api . get_button_icon ( deck_id , _page ( ui ), button . index ))) def set_brightness ( ui , value : int ) -> None : deck_id = _deck_id ( ui ) api . set_brightness ( deck_id , value ) def button_clicked ( ui , clicked_button , buttons ) -> None : global selected_button selected_button = clicked_button for button in buttons : if button == clicked_button : continue button . setChecked ( False ) deck_id = _deck_id ( ui ) button_id = selected_button . index ui . text . setText ( api . get_button_text ( deck_id , _page ( ui ), button_id )) ui . command . setText ( api . get_button_command ( deck_id , _page ( ui ), button_id )) ui . keys . setText ( api . get_button_keys ( deck_id , _page ( ui ), button_id )) ui . write . setPlainText ( api . get_button_write ( deck_id , _page ( ui ), button_id )) ui . change_brightness . setValue ( api . get_button_change_brightness ( deck_id , _page ( ui ), button_id )) ui . switch_page . setValue ( api . get_button_switch_page ( deck_id , _page ( ui ), button_id )) def build_buttons ( ui , tab ) -> None : deck_id = _deck_id ( ui ) deck = api . get_deck ( deck_id ) if hasattr ( tab , \"deck_buttons\" ): tab . deck_buttons . hide () tab . deck_buttons . deleteLater () base_widget = QtWidgets . QWidget ( tab ) tab . children ()[ 0 ] . addWidget ( base_widget ) tab . deck_buttons = base_widget row_layout = QtWidgets . QVBoxLayout ( base_widget ) index = 0 buttons = [] for _row in range ( deck [ \"layout\" ][ 0 ]): # type: ignore column_layout = QtWidgets . QHBoxLayout () row_layout . addLayout ( column_layout ) for _column in range ( deck [ \"layout\" ][ 1 ]): # type: ignore button = DraggableButton ( base_widget , ui ) button . setCheckable ( True ) button . index = index button . setSizePolicy ( QSizePolicy . MinimumExpanding , QSizePolicy . MinimumExpanding ) button . setToolButtonStyle ( Qt . ToolButtonTextUnderIcon ) button . setIconSize ( QSize ( 100 , 100 )) button . setStyleSheet ( BUTTON_STYLE ) buttons . append ( button ) column_layout . addWidget ( button ) index += 1 for button in buttons : button . clicked . connect ( lambda button = button , buttons = buttons : button_clicked ( ui , button , buttons ) ) def export_config ( window ) -> None : file_name = QFileDialog . getSaveFileName ( window , \"Export Config\" , os . path . expanduser ( \"~/streamdeck_ui_export.json\" ), \"JSON (*.json)\" )[ 0 ] if not file_name : return api . export_config ( file_name ) def import_config ( window ) -> None : file_name = QFileDialog . getOpenFileName ( window , \"Import Config\" , os . path . expanduser ( \"~\" ), \"Config Files (*.json)\" )[ 0 ] if not file_name : return api . import_config ( file_name ) redraw_buttons ( window . ui ) def sync ( ui ) -> None : api . ensure_decks_connected () ui . brightness . setValue ( api . get_brightness ( _deck_id ( ui ))) ui . pages . setCurrentIndex ( api . get_page ( _deck_id ( ui ))) def build_device ( ui , _device_index = None ) -> None : for page_id in range ( ui . pages . count ()): page = ui . pages . widget ( page_id ) page . setStyleSheet ( \"background-color: black\" ) build_buttons ( ui , page ) # Set the active page for this device ui . pages . setCurrentIndex ( api . get_page ( _deck_id ( ui ))) # Draw the buttons for the active page redraw_buttons ( ui ) sync ( ui ) _highlight_first_button ( ui ) class MainWindow ( QMainWindow ): def __init__ ( self ): super ( MainWindow , self ) . __init__ () self . ui = Ui_MainWindow () self . ui . setupUi ( self ) self . window_shown : bool = True def closeEvent ( self , event ) -> None : # noqa: N802 - Part of QT signature. self . window_shown = False self . hide () event . ignore () def systray_clicked ( self , _status = None ) -> None : self . hide () if self . window_shown : self . window_shown = False return self . show () self . activateWindow () getattr ( self , \"raise\" )() # noqa: B009 - Can't call as self.raise() due to syntax error. self . window_shown = True def queue_text_change ( ui , text : str ) -> None : global text_timer if text_timer : text_timer . stop () text_timer = QTimer () text_timer . setSingleShot ( True ) text_timer . timeout . connect ( partial ( update_button_text , ui , text )) text_timer . start ( 500 ) def start ( _exit : bool = False ) -> None : show_ui = True if \"-h\" in sys . argv or \"--help\" in sys . argv : print ( f \"Usage: { os . path . basename ( sys . argv [ 0 ]) } \" ) print ( \"Flags:\" ) print ( \" -h, --help \\t Show this message\" ) print ( \" -n, --no-ui \\t Run the program without showing a UI\" ) return elif \"-n\" in sys . argv or \"--no-ui\" in sys . argv : show_ui = False app = QApplication ( sys . argv ) logo = QIcon ( LOGO ) main_window = MainWindow () ui = main_window . ui main_window . setWindowIcon ( logo ) tray = QSystemTrayIcon ( logo , app ) tray . activated . connect ( main_window . systray_clicked ) menu = QMenu () action_exit = QAction ( \"Exit\" ) action_exit . triggered . connect ( app . exit ) menu . addAction ( action_exit ) tray . setContextMenu ( menu ) ui . text . textChanged . connect ( partial ( queue_text_change , ui )) ui . command . textChanged . connect ( partial ( update_button_command , ui )) ui . keys . textChanged . connect ( partial ( update_button_keys , ui )) ui . write . textChanged . connect ( partial ( update_button_write , ui )) ui . change_brightness . valueChanged . connect ( partial ( update_change_brightness , ui )) ui . switch_page . valueChanged . connect ( partial ( update_switch_page , ui )) ui . imageButton . clicked . connect ( partial ( select_image , main_window )) ui . brightness . valueChanged . connect ( partial ( set_brightness , ui )) ui . removeButton . clicked . connect ( partial ( remove_image , main_window )) items = api . open_decks () . items () if len ( items ) == 0 : print ( \"Waiting for Stream Deck(s)...\" ) while len ( items ) == 0 : time . sleep ( 3 ) items = api . open_decks () . items () for deck_id , deck in items : ui . device_list . addItem ( f \" { deck [ 'type' ] } - { deck_id } \" , userData = deck_id ) build_device ( ui ) ui . device_list . currentIndexChanged . connect ( partial ( build_device , ui )) ui . pages . currentChanged . connect ( partial ( change_page , ui )) ui . actionExport . triggered . connect ( partial ( export_config , main_window )) ui . actionImport . triggered . connect ( partial ( import_config , main_window )) ui . actionExit . triggered . connect ( app . exit ) timer = QTimer () timer . timeout . connect ( partial ( sync , ui )) timer . start ( 1000 ) api . render () tray . show () if show_ui : main_window . show () if _exit : return else : app . exec_ () api . close_decks () sys . exit () if __name__ == \"__main__\" : start () Variables BUTTON_DRAG_STYLE BUTTON_STYLE LOGO text_timer Functions build_buttons def build_buttons ( ui , tab ) -> None View Source def build_buttons ( ui , tab ) -> None : deck_id = _deck_id ( ui ) deck = api . get_deck ( deck_id ) if hasattr ( tab , \"deck_buttons\" ) : tab . deck_buttons . hide () tab . deck_buttons . deleteLater () base_widget = QtWidgets . QWidget ( tab ) tab . children ()[ 0 ]. addWidget ( base_widget ) tab . deck_buttons = base_widget row_layout = QtWidgets . QVBoxLayout ( base_widget ) index = 0 buttons = [] for _row in range ( deck [ \"layout\" ][ 0 ]) : # type : ignore column_layout = QtWidgets . QHBoxLayout () row_layout . addLayout ( column_layout ) for _column in range ( deck [ \"layout\" ][ 1 ]) : # type : ignore button = DraggableButton ( base_widget , ui ) button . setCheckable ( True ) button . index = index button . setSizePolicy ( QSizePolicy . MinimumExpanding , QSizePolicy . MinimumExpanding ) button . setToolButtonStyle ( Qt . ToolButtonTextUnderIcon ) button . setIconSize ( QSize ( 100 , 100 )) button . setStyleSheet ( BUTTON_STYLE ) buttons . append ( button ) column_layout . addWidget ( button ) index += 1 for button in buttons : button . clicked . connect ( lambda button = button , buttons = buttons : button_clicked ( ui , button , buttons ) ) build_device def build_device ( ui , _device_index = None ) -> None View Source def build_device ( ui , _device_index = None ) -> None : for page_id in range ( ui . pages . count ()) : page = ui . pages . widget ( page_id ) page . setStyleSheet ( \"background-color: black\" ) build_buttons ( ui , page ) # Set the active page for this device ui . pages . setCurrentIndex ( api . get_page ( _deck_id ( ui ))) # Draw the buttons for the active page redraw_buttons ( ui ) sync ( ui ) _highlight_first_button ( ui ) button_clicked def button_clicked ( ui , clicked_button , buttons ) -> None View Source def button_clicked ( ui , clicked_button , buttons ) -> None : global selected_button selected_button = clicked_button for button in buttons : if button == clicked_button : continue button . setChecked ( False ) deck_id = _deck_id ( ui ) button_id = selected_button . index ui . text . setText ( api . get_button_text ( deck_id , _page ( ui ), button_id )) ui . command . setText ( api . get_button_command ( deck_id , _page ( ui ), button_id )) ui . keys . setText ( api . get_button_keys ( deck_id , _page ( ui ), button_id )) ui . write . setPlainText ( api . get_button_write ( deck_id , _page ( ui ), button_id )) ui . change_brightness . setValue ( api . get_button_change_brightness ( deck_id , _page ( ui ), button_id )) ui . switch_page . setValue ( api . get_button_switch_page ( deck_id , _page ( ui ), button_id )) change_page def change_page ( ui , page : int ) -> None View Source def change_page ( ui , page : int ) -> None : api . set_page ( _deck_id ( ui ), page ) redraw_buttons ( ui ) _highlight_first_button ( ui ) export_config def export_config ( window ) -> None View Source def export_config ( window ) -> None : file_name = QFileDialog . getSaveFileName ( window , \"Export Config\" , os . path . expanduser ( \"~/streamdeck_ui_export.json\" ), \"JSON (*.json)\" )[ 0 ] if not file_name : return api . export_config ( file_name ) import_config def import_config ( window ) -> None View Source def import_config ( window ) -> None : file_name = QFileDialog . getOpenFileName ( window , \"Import Config\" , os . path . expanduser ( \"~\" ), \"Config Files (*.json)\" )[ 0 ] if not file_name : return api . import_config ( file_name ) redraw_buttons ( window . ui ) queue_text_change def queue_text_change ( ui , text : str ) -> None View Source def queue_text_change ( ui , text : str ) -> None : global text_timer if text_timer : text_timer . stop () text_timer = QTimer () text_timer . setSingleShot ( True ) text_timer . timeout . connect ( partial ( update_button_text , ui , text )) text_timer . start ( 500 ) redraw_buttons def redraw_buttons ( ui ) -> None View Source def redraw_buttons ( ui ) -> None : deck_id = _deck_id ( ui ) current_tab = ui . pages . currentWidget () buttons = current_tab . findChildren ( QtWidgets . QToolButton ) for button in buttons : button . setText ( api . get_button_text ( deck_id , _page ( ui ), button . index )) button . setIcon ( QIcon ( api . get_button_icon ( deck_id , _page ( ui ), button . index ))) remove_image def remove_image ( window ) -> None View Source def remove_image ( window ) -> None : deck_id = _deck_id ( window . ui ) image = api . get_button_icon ( deck_id , _page ( window . ui ), selected_button . index ) if image : confirm = QMessageBox ( window ) confirm . setWindowTitle ( \"Remove image\" ) confirm . setText ( \"Are you sure you want to remove the image for this button?\" ) confirm . setStandardButtons ( QMessageBox . Yes | QMessageBox . No ) confirm . setIcon ( QMessageBox . Question ) button = confirm . exec_ () if button == QMessageBox . Yes : api . set_button_icon ( deck_id , _page ( window . ui ), selected_button . index , \"\" ) redraw_buttons ( window . ui ) select_image def select_image ( window ) -> None View Source def select_image ( window ) -> None : deck_id = _deck_id ( window . ui ) image = api . get_button_icon ( deck_id , _page ( window . ui ), selected_button . index ) if not image : image = os . path . expanduser ( \"~\" ) file_name = QFileDialog . getOpenFileName ( window , \"Open Image\" , image , \"Image Files (*.png *.jpg *.bmp)\" )[ 0 ] if file_name : deck_id = _deck_id ( window . ui ) api . set_button_icon ( deck_id , _page ( window . ui ), selected_button . index , file_name ) redraw_buttons ( window . ui ) set_brightness def set_brightness ( ui , value : int ) -> None View Source def set_brightness ( ui , value : int ) -> None : deck_id = _deck_id ( ui ) api . set_brightness ( deck_id , value ) start def start ( _exit : bool = False ) -> None View Source def start ( _exit : bool = False ) -> None : show_ui = True if \"-h\" in sys . argv or \"--help\" in sys . argv : print ( f \"Usage: {os.path.basename(sys.argv[0])}\" ) print ( \"Flags:\" ) print ( \" -h, --help \\t Show this message\" ) print ( \" -n, --no-ui \\t Run the program without showing a UI\" ) return elif \"-n\" in sys . argv or \"--no-ui\" in sys . argv : show_ui = False app = QApplication ( sys . argv ) logo = QIcon ( LOGO ) main_window = MainWindow () ui = main_window . ui main_window . setWindowIcon ( logo ) tray = QSystemTrayIcon ( logo , app ) tray . activated . connect ( main_window . systray_clicked ) menu = QMenu () action_exit = QAction ( \"Exit\" ) action_exit . triggered . connect ( app . exit ) menu . addAction ( action_exit ) tray . setContextMenu ( menu ) ui . text . textChanged . connect ( partial ( queue_text_change , ui )) ui . command . textChanged . connect ( partial ( update_button_command , ui )) ui . keys . textChanged . connect ( partial ( update_button_keys , ui )) ui . write . textChanged . connect ( partial ( update_button_write , ui )) ui . change_brightness . valueChanged . connect ( partial ( update_change_brightness , ui )) ui . switch_page . valueChanged . connect ( partial ( update_switch_page , ui )) ui . imageButton . clicked . connect ( partial ( select_image , main_window )) ui . brightness . valueChanged . connect ( partial ( set_brightness , ui )) ui . removeButton . clicked . connect ( partial ( remove_image , main_window )) items = api . open_decks () . items () if len ( items ) == 0 : print ( \"Waiting for Stream Deck(s)...\" ) while len ( items ) == 0 : time . sleep ( 3 ) items = api . open_decks () . items () for deck_id , deck in items : ui . device_list . addItem ( f \"{deck['type']} - {deck_id}\" , userData = deck_id ) build_device ( ui ) ui . device_list . currentIndexChanged . connect ( partial ( build_device , ui )) ui . pages . currentChanged . connect ( partial ( change_page , ui )) ui . actionExport . triggered . connect ( partial ( export_config , main_window )) ui . actionImport . triggered . connect ( partial ( import_config , main_window )) ui . actionExit . triggered . connect ( app . exit ) timer = QTimer () timer . timeout . connect ( partial ( sync , ui )) timer . start ( 1000 ) api . render () tray . show () if show_ui : main_window . show () if _exit : return else : app . exec_ () api . close_decks () sys . exit () sync def sync ( ui ) -> None View Source def sync ( ui ) -> None : api . ensure_decks_connected () ui . brightness . setValue ( api . get_brightness ( _deck_id ( ui ))) ui . pages . setCurrentIndex ( api . get_page ( _deck_id ( ui ))) update_button_command def update_button_command ( ui , command : str ) -> None View Source def update_button_command ( ui , command : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_command ( deck_id , _page ( ui ), selected_button . index , command ) update_button_keys def update_button_keys ( ui , keys : str ) -> None View Source def update_button_keys ( ui , keys : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_keys ( deck_id , _page ( ui ), selected_button . index , keys ) update_button_text def update_button_text ( ui , text : str ) -> None View Source def update_button_text ( ui , text : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_text ( deck_id , _page ( ui ), selected_button . index , text ) redraw_buttons ( ui ) update_button_write def update_button_write ( ui ) -> None View Source def update_button_write ( ui ) -> None : deck_id = _deck_id ( ui ) api . set_button_write ( deck_id , _page ( ui ), selected_button . index , ui . write . toPlainText ()) update_change_brightness def update_change_brightness ( ui , amount : int ) -> None View Source def update_change_brightness ( ui , amount : int ) -> None : deck_id = _deck_id ( ui ) api . set_button_change_brightness ( deck_id , _page ( ui ), selected_button . index , amount ) update_switch_page def update_switch_page ( ui , page : int ) -> None View Source def update_switch_page ( ui , page : int ) -> None : deck_id = _deck_id ( ui ) api . set_button_switch_page ( deck_id , _page ( ui ), selected_button . index , page ) Classes DraggableButton class DraggableButton ( parent , ui ) View Source class DraggableButton ( QtWidgets . QToolButton ): \"\"\"A QToolButton that supports drag and drop and swaps the button properties on drop \"\"\" def __init__ ( self , parent , ui ): super ( DraggableButton , self ). __init__ ( parent ) self . setAcceptDrops ( True ) self . ui = ui def mouseMoveEvent ( self , e ): # noqa: N802 - Part of QT signature. if e . buttons () != Qt.LeftButton: return mimedata = QMimeData() drag = QDrag(self) drag. setMimeData ( mimedata ) drag . exec_ ( Qt.MoveAction) def dropEvent(self, e): # noqa: N802 - Part of QT signature. global selected_button self . setStyleSheet ( BUTTON_STYLE ) # Ignore drag and drop on yourself if e . source (). index == self . index: return api . swap_buttons ( _deck_id ( self . ui ), _page ( self . ui ), e . source (). index , self . index ) # In the case that we've dragged the currently selected button, we have to # check the target button instead so it appears that it followed the drag/drop if e . source (). isChecked (): e . source (). setChecked ( False ) self . setChecked ( True ) selected_button = self redraw_buttons ( self . ui ) def dragEnterEvent ( self , e ): # noqa: N802 - Part of QT signature. if type ( self ) is DraggableButton: e . setAccepted ( True ) self . setStyleSheet ( BUTTON_DRAG_STYLE ) else: e . setAccepted ( False ) def dragLeaveEvent ( self , e ): # noqa: N802 - Part of QT signature. self . setStyleSheet ( BUTTON_STYLE ) Ancestors (in MRO) PySide2.QtWidgets.QToolButton PySide2.QtWidgets.QAbstractButton PySide2.QtWidgets.QWidget PySide2.QtCore.QObject PySide2.QtGui.QPaintDevice Shiboken.Object Class variables DelayedPopup DrawChildren DrawWindowBackground IgnoreMask InstantPopup MenuButtonPopup PaintDeviceMetric PdmDepth PdmDevicePixelRatio PdmDevicePixelRatioScaled PdmDpiX PdmDpiY PdmHeight PdmHeightMM PdmNumColors PdmPhysicalDpiX PdmPhysicalDpiY PdmWidth PdmWidthMM RenderFlag RenderFlags ToolButtonPopupMode painters staticMetaObject Static methods connect def connect ( ... ) connect(arg__1: PySide2.QtCore.QObject, arg__2: bytes, arg__3: typing.Callable, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> bool connect(self, arg__1: bytes, arg__2: typing.Callable, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> bool connect(self, arg__1: bytes, arg__2: PySide2.QtCore.QObject, arg__3: bytes, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> bool connect(self, sender: PySide2.QtCore.QObject, signal: bytes, member: bytes, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> PySide2.QtCore.QMetaObject.Connection connect(sender: PySide2.QtCore.QObject, signal: PySide2.QtCore.QMetaMethod, receiver: PySide2.QtCore.QObject, method: PySide2.QtCore.QMetaMethod, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> PySide2.QtCore.QMetaObject.Connection connect(sender: PySide2.QtCore.QObject, signal: bytes, receiver: PySide2.QtCore.QObject, member: bytes, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> PySide2.QtCore.QMetaObject.Connection createWindowContainer def createWindowContainer ( window : PySide2 . QtGui . QWindow , parent : typing . Union [ PySide2 . QtWidgets . QWidget , NoneType ] = None , flags : PySide2 . QtCore . Qt . WindowFlags = Default ( Qt . WindowFlags ) ) -> PySide2 . QtWidgets . QWidget createWindowContainer(window: PySide2.QtGui.QWindow, parent: typing.Union[PySide2.QtWidgets.QWidget, NoneType] = None, flags: PySide2.QtCore.Qt.WindowFlags = Default(Qt.WindowFlags)) -> PySide2.QtWidgets.QWidget devicePixelRatioFScale def devicePixelRatioFScale ( ) -> float devicePixelRatioFScale() -> float disconnect def disconnect ( ... ) disconnect(arg__1: PySide2.QtCore.QMetaObject.Connection) -> bool disconnect(arg__1: PySide2.QtCore.QObject, arg__2: bytes, arg__3: typing.Callable) -> bool disconnect(self, arg__1: bytes, arg__2: typing.Callable) -> bool disconnect(self, receiver: PySide2.QtCore.QObject, member: typing.Union[bytes, NoneType] = None) -> bool disconnect(self, signal: bytes, receiver: PySide2.QtCore.QObject, member: bytes) -> bool disconnect(sender: PySide2.QtCore.QObject, signal: PySide2.QtCore.QMetaMethod, receiver: PySide2.QtCore.QObject, member: PySide2.QtCore.QMetaMethod) -> bool disconnect(sender: PySide2.QtCore.QObject, signal: bytes, receiver: PySide2.QtCore.QObject, member: bytes) -> bool find def find ( arg__1 : int ) -> PySide2 . QtWidgets . QWidget find(arg__1: int) -> PySide2.QtWidgets.QWidget keyboardGrabber def keyboardGrabber ( ) -> PySide2 . QtWidgets . QWidget keyboardGrabber() -> PySide2.QtWidgets.QWidget mouseGrabber def mouseGrabber ( ) -> PySide2 . QtWidgets . QWidget mouseGrabber() -> PySide2.QtWidgets.QWidget registerUserData def registerUserData ( ) -> int registerUserData() -> int setTabOrder def setTabOrder ( arg__1 : PySide2 . QtWidgets . QWidget , arg__2 : PySide2 . QtWidgets . QWidget ) -> None setTabOrder(arg__1: PySide2.QtWidgets.QWidget, arg__2: PySide2.QtWidgets.QWidget) -> None Methods acceptDrops def acceptDrops ( self ) -> bool acceptDrops(self) -> bool accessibleDescription def accessibleDescription ( self ) -> str accessibleDescription(self) -> str accessibleName def accessibleName ( self ) -> str accessibleName(self) -> str actionEvent def actionEvent ( self , arg__1 : PySide2 . QtGui . QActionEvent ) -> None actionEvent(self, arg__1: PySide2.QtGui.QActionEvent) -> None actions def actions ( self ) -> typing . List [ PySide2 . QtWidgets . QAction ] actions(self) -> typing.List[PySide2.QtWidgets.QAction] activateWindow def activateWindow ( self ) -> None activateWindow(self) -> None addAction def addAction ( self , action : PySide2 . QtWidgets . QAction ) -> None addAction(self, action: PySide2.QtWidgets.QAction) -> None addActions def addActions ( self , actions : typing . Sequence [ PySide2 . QtWidgets . QAction ] ) -> None addActions(self, actions: typing.Sequence[PySide2.QtWidgets.QAction]) -> None adjustSize def adjustSize ( self ) -> None adjustSize(self) -> None animateClick def animateClick ( self , msec : int = 100 ) -> None animateClick(self, msec: int = 100) -> None arrowType def arrowType ( self ) -> PySide2 . QtCore . Qt . ArrowType arrowType(self) -> PySide2.QtCore.Qt.ArrowType autoExclusive def autoExclusive ( self ) -> bool autoExclusive(self) -> bool autoFillBackground def autoFillBackground ( self ) -> bool autoFillBackground(self) -> bool autoRaise def autoRaise ( self ) -> bool autoRaise(self) -> bool autoRepeat def autoRepeat ( self ) -> bool autoRepeat(self) -> bool autoRepeatDelay def autoRepeatDelay ( self ) -> int autoRepeatDelay(self) -> int autoRepeatInterval def autoRepeatInterval ( self ) -> int autoRepeatInterval(self) -> int backgroundRole def backgroundRole ( self ) -> PySide2 . QtGui . QPalette . ColorRole backgroundRole(self) -> PySide2.QtGui.QPalette.ColorRole backingStore def backingStore ( self ) -> PySide2 . QtGui . QBackingStore backingStore(self) -> PySide2.QtGui.QBackingStore baseSize def baseSize ( self ) -> PySide2 . QtCore . QSize baseSize(self) -> PySide2.QtCore.QSize blockSignals def blockSignals ( self , b : bool ) -> bool blockSignals(self, b: bool) -> bool changeEvent def changeEvent ( self , arg__1 : PySide2 . QtCore . QEvent ) -> None changeEvent(self, arg__1: PySide2.QtCore.QEvent) -> None checkStateSet def checkStateSet ( self ) -> None checkStateSet(self) -> None childAt def childAt ( ... ) childAt(self, p: PySide2.QtCore.QPoint) -> PySide2.QtWidgets.QWidget childAt(self, x: int, y: int) -> PySide2.QtWidgets.QWidget childEvent def childEvent ( self , event : PySide2 . QtCore . QChildEvent ) -> None childEvent(self, event: PySide2.QtCore.QChildEvent) -> None children def children ( self ) -> typing . List [ PySide2 . QtCore . QObject ] children(self) -> typing.List[PySide2.QtCore.QObject] childrenRect def childrenRect ( self ) -> PySide2 . QtCore . QRect childrenRect(self) -> PySide2.QtCore.QRect childrenRegion def childrenRegion ( self ) -> PySide2 . QtGui . QRegion childrenRegion(self) -> PySide2.QtGui.QRegion clearFocus def clearFocus ( self ) -> None clearFocus(self) -> None clearMask def clearMask ( self ) -> None clearMask(self) -> None click def click ( self ) -> None click(self) -> None clicked def clicked ( ... ) close def close ( self ) -> bool close(self) -> bool closeEvent def closeEvent ( self , event : PySide2 . QtGui . QCloseEvent ) -> None closeEvent(self, event: PySide2.QtGui.QCloseEvent) -> None colorCount def colorCount ( self ) -> int colorCount(self) -> int connectNotify def connectNotify ( self , signal : PySide2 . QtCore . QMetaMethod ) -> None connectNotify(self, signal: PySide2.QtCore.QMetaMethod) -> None contentsMargins def contentsMargins ( self ) -> PySide2 . QtCore . QMargins contentsMargins(self) -> PySide2.QtCore.QMargins contentsRect def contentsRect ( self ) -> PySide2 . QtCore . QRect contentsRect(self) -> PySide2.QtCore.QRect contextMenuEvent def contextMenuEvent ( self , event : PySide2 . QtGui . QContextMenuEvent ) -> None contextMenuEvent(self, event: PySide2.QtGui.QContextMenuEvent) -> None contextMenuPolicy def contextMenuPolicy ( self ) -> PySide2 . QtCore . Qt . ContextMenuPolicy contextMenuPolicy(self) -> PySide2.QtCore.Qt.ContextMenuPolicy create def create ( self , arg__1 : int = 0 , initializeWindow : bool = True , destroyOldWindow : bool = True ) -> None create(self, arg__1: int = 0, initializeWindow: bool = True, destroyOldWindow: bool = True) -> None createWinId def createWinId ( self ) -> None createWinId(self) -> None cursor def cursor ( self ) -> PySide2 . QtGui . QCursor cursor(self) -> PySide2.QtGui.QCursor customContextMenuRequested def customContextMenuRequested ( ... ) customEvent def customEvent ( self , event : PySide2 . QtCore . QEvent ) -> None customEvent(self, event: PySide2.QtCore.QEvent) -> None defaultAction def defaultAction ( self ) -> PySide2 . QtWidgets . QAction defaultAction(self) -> PySide2.QtWidgets.QAction deleteLater def deleteLater ( self ) -> None deleteLater(self) -> None depth def depth ( self ) -> int depth(self) -> int destroy def destroy ( self , destroyWindow : bool = True , destroySubWindows : bool = True ) -> None destroy(self, destroyWindow: bool = True, destroySubWindows: bool = True) -> None destroyed def destroyed ( ... ) devType def devType ( self ) -> int devType(self) -> int devicePixelRatio def devicePixelRatio ( self ) -> int devicePixelRatio(self) -> int devicePixelRatioF def devicePixelRatioF ( self ) -> float devicePixelRatioF(self) -> float disconnectNotify def disconnectNotify ( self , signal : PySide2 . QtCore . QMetaMethod ) -> None disconnectNotify(self, signal: PySide2.QtCore.QMetaMethod) -> None dragEnterEvent def dragEnterEvent ( self , e ) dragEnterEvent(self, event: PySide2.QtGui.QDragEnterEvent) -> None View Source def dragEnterEvent ( self , e ) : # noqa : N802 - Part of QT signature . if type ( self ) is DraggableButton : e . setAccepted ( True ) self . setStyleSheet ( BUTTON_DRAG_STYLE ) else : e . setAccepted ( False ) dragLeaveEvent def dragLeaveEvent ( self , e ) dragLeaveEvent(self, event: PySide2.QtGui.QDragLeaveEvent) -> None View Source def dragLeaveEvent(self, e): # noqa: N802 - Part of QT signature. self.setStyleSheet(BUTTON_STYLE) dragMoveEvent def dragMoveEvent ( self , event : PySide2 . QtGui . QDragMoveEvent ) -> None dragMoveEvent(self, event: PySide2.QtGui.QDragMoveEvent) -> None dropEvent def dropEvent ( self , e ) dropEvent(self, event: PySide2.QtGui.QDropEvent) -> None View Source def dropEvent ( self , e ) : # noqa : N802 - Part of QT signature . global selected_button self . setStyleSheet ( BUTTON_STYLE ) # Ignore drag and drop on yourself if e . source () . index == self . index : return api . swap_buttons ( _deck_id ( self . ui ) , _page ( self . ui ) , e . source () . index , self . index ) # In the case that we ' ve dragged the currently selected button, we have to # check the target button instead so it appears that it followed the drag / drop if e . source () . isChecked () : e . source () . setChecked ( False ) self . setChecked ( True ) selected_button = self redraw_buttons ( self . ui ) dumpObjectInfo def dumpObjectInfo ( self ) -> None dumpObjectInfo(self) -> None dumpObjectTree def dumpObjectTree ( self ) -> None dumpObjectTree(self) -> None dynamicPropertyNames def dynamicPropertyNames ( self ) -> typing . List [ PySide2 . QtCore . QByteArray ] dynamicPropertyNames(self) -> typing.List[PySide2.QtCore.QByteArray] effectiveWinId def effectiveWinId ( self ) -> int effectiveWinId(self) -> int emit def emit ( self , arg__1 : bytes , * args : None ) -> bool emit(self, arg__1: bytes, *args: None) -> bool ensurePolished def ensurePolished ( self ) -> None ensurePolished(self) -> None enterEvent def enterEvent ( self , arg__1 : PySide2 . QtCore . QEvent ) -> None enterEvent(self, arg__1: PySide2.QtCore.QEvent) -> None event def event ( self , e : PySide2 . QtCore . QEvent ) -> bool event(self, e: PySide2.QtCore.QEvent) -> bool eventFilter def eventFilter ( self , watched : PySide2 . QtCore . QObject , event : PySide2 . QtCore . QEvent ) -> bool eventFilter(self, watched: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) -> bool findChild def findChild ( self , arg__1 : type , arg__2 : str = '' ) -> object findChild(self, arg__1: type, arg__2: str = '') -> object findChildren def findChildren ( ... ) findChildren(self, arg__1: type, arg__2: PySide2.QtCore.QRegExp) -> typing.Iterable findChildren(self, arg__1: type, arg__2: PySide2.QtCore.QRegularExpression) -> typing.Iterable findChildren(self, arg__1: type, arg__2: str = '') -> typing.Iterable focusInEvent def focusInEvent ( self , e : PySide2 . QtGui . QFocusEvent ) -> None focusInEvent(self, e: PySide2.QtGui.QFocusEvent) -> None focusNextChild def focusNextChild ( self ) -> bool focusNextChild(self) -> bool focusNextPrevChild def focusNextPrevChild ( self , next : bool ) -> bool focusNextPrevChild(self, next: bool) -> bool focusOutEvent def focusOutEvent ( self , e : PySide2 . QtGui . QFocusEvent ) -> None focusOutEvent(self, e: PySide2.QtGui.QFocusEvent) -> None focusPolicy def focusPolicy ( self ) -> PySide2 . QtCore . Qt . FocusPolicy focusPolicy(self) -> PySide2.QtCore.Qt.FocusPolicy focusPreviousChild def focusPreviousChild ( self ) -> bool focusPreviousChild(self) -> bool focusProxy def focusProxy ( self ) -> PySide2 . QtWidgets . QWidget focusProxy(self) -> PySide2.QtWidgets.QWidget focusWidget def focusWidget ( self ) -> PySide2 . QtWidgets . QWidget focusWidget(self) -> PySide2.QtWidgets.QWidget font def font ( self ) -> PySide2 . QtGui . QFont font(self) -> PySide2.QtGui.QFont fontInfo def fontInfo ( self ) -> PySide2 . QtGui . QFontInfo fontInfo(self) -> PySide2.QtGui.QFontInfo fontMetrics def fontMetrics ( self ) -> PySide2 . QtGui . QFontMetrics fontMetrics(self) -> PySide2.QtGui.QFontMetrics foregroundRole def foregroundRole ( self ) -> PySide2 . QtGui . QPalette . ColorRole foregroundRole(self) -> PySide2.QtGui.QPalette.ColorRole frameGeometry def frameGeometry ( self ) -> PySide2 . QtCore . QRect frameGeometry(self) -> PySide2.QtCore.QRect frameSize def frameSize ( self ) -> PySide2 . QtCore . QSize frameSize(self) -> PySide2.QtCore.QSize geometry def geometry ( self ) -> PySide2 . QtCore . QRect geometry(self) -> PySide2.QtCore.QRect getContentsMargins def getContentsMargins ( self ) -> typing . Tuple [ int , int , int , int ] getContentsMargins(self) -> typing.Tuple[int, int, int, int] grab def grab ( self , rectangle : PySide2 . QtCore . QRect = PySide2 . QtCore . QRect ( 0 , 0 , - 1 , - 1 ) ) -> PySide2 . QtGui . QPixmap grab(self, rectangle: PySide2.QtCore.QRect = PySide2.QtCore.QRect(0, 0, -1, -1)) -> PySide2.QtGui.QPixmap grabGesture def grabGesture ( self , type : PySide2 . QtCore . Qt . GestureType , flags : PySide2 . QtCore . Qt . GestureFlags = Default ( Qt . GestureFlags ) ) -> None grabGesture(self, type: PySide2.QtCore.Qt.GestureType, flags: PySide2.QtCore.Qt.GestureFlags = Default(Qt.GestureFlags)) -> None grabKeyboard def grabKeyboard ( self ) -> None grabKeyboard(self) -> None grabMouse def grabMouse ( ... ) grabMouse(self) -> None grabMouse(self, arg__1: PySide2.QtGui.QCursor) -> None grabShortcut def grabShortcut ( self , key : PySide2 . QtGui . QKeySequence , context : PySide2 . QtCore . Qt . ShortcutContext = PySide2 . QtCore . Qt . ShortcutContext . WindowShortcut ) -> int grabShortcut(self, key: PySide2.QtGui.QKeySequence, context: PySide2.QtCore.Qt.ShortcutContext = PySide2.QtCore.Qt.ShortcutContext.WindowShortcut) -> int graphicsEffect def graphicsEffect ( self ) -> PySide2 . QtWidgets . QGraphicsEffect graphicsEffect(self) -> PySide2.QtWidgets.QGraphicsEffect graphicsProxyWidget def graphicsProxyWidget ( self ) -> PySide2 . QtWidgets . QGraphicsProxyWidget graphicsProxyWidget(self) -> PySide2.QtWidgets.QGraphicsProxyWidget group def group ( self ) -> PySide2 . QtWidgets . QButtonGroup group(self) -> PySide2.QtWidgets.QButtonGroup hasFocus def hasFocus ( self ) -> bool hasFocus(self) -> bool hasHeightForWidth def hasHeightForWidth ( self ) -> bool hasHeightForWidth(self) -> bool hasMouseTracking def hasMouseTracking ( self ) -> bool hasMouseTracking(self) -> bool hasTabletTracking def hasTabletTracking ( self ) -> bool hasTabletTracking(self) -> bool height def height ( self ) -> int height(self) -> int heightForWidth def heightForWidth ( self , arg__1 : int ) -> int heightForWidth(self, arg__1: int) -> int heightMM def heightMM ( self ) -> int heightMM(self) -> int hide def hide ( self ) -> None hide(self) -> None hideEvent def hideEvent ( self , event : PySide2 . QtGui . QHideEvent ) -> None hideEvent(self, event: PySide2.QtGui.QHideEvent) -> None hitButton def hitButton ( self , pos : PySide2 . QtCore . QPoint ) -> bool hitButton(self, pos: PySide2.QtCore.QPoint) -> bool icon def icon ( self ) -> PySide2 . QtGui . QIcon icon(self) -> PySide2.QtGui.QIcon iconSize def iconSize ( self ) -> PySide2 . QtCore . QSize iconSize(self) -> PySide2.QtCore.QSize inherits def inherits ( self , classname : bytes ) -> bool inherits(self, classname: bytes) -> bool initPainter def initPainter ( self , painter : PySide2 . QtGui . QPainter ) -> None initPainter(self, painter: PySide2.QtGui.QPainter) -> None initStyleOption def initStyleOption ( self , option : PySide2 . QtWidgets . QStyleOptionToolButton ) -> None initStyleOption(self, option: PySide2.QtWidgets.QStyleOptionToolButton) -> None inputMethodEvent def inputMethodEvent ( self , event : PySide2 . QtGui . QInputMethodEvent ) -> None inputMethodEvent(self, event: PySide2.QtGui.QInputMethodEvent) -> None inputMethodHints def inputMethodHints ( self ) -> PySide2 . QtCore . Qt . InputMethodHints inputMethodHints(self) -> PySide2.QtCore.Qt.InputMethodHints inputMethodQuery def inputMethodQuery ( self , arg__1 : PySide2 . QtCore . Qt . InputMethodQuery ) -> typing . Any inputMethodQuery(self, arg__1: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any insertAction def insertAction ( self , before : PySide2 . QtWidgets . QAction , action : PySide2 . QtWidgets . QAction ) -> None insertAction(self, before: PySide2.QtWidgets.QAction, action: PySide2.QtWidgets.QAction) -> None insertActions def insertActions ( self , before : PySide2 . QtWidgets . QAction , actions : typing . Sequence [ PySide2 . QtWidgets . QAction ] ) -> None insertActions(self, before: PySide2.QtWidgets.QAction, actions: typing.Sequence[PySide2.QtWidgets.QAction]) -> None installEventFilter def installEventFilter ( self , filterObj : PySide2 . QtCore . QObject ) -> None installEventFilter(self, filterObj: PySide2.QtCore.QObject) -> None internalWinId def internalWinId ( self ) -> int internalWinId(self) -> int isActiveWindow def isActiveWindow ( self ) -> bool isActiveWindow(self) -> bool isAncestorOf def isAncestorOf ( self , child : PySide2 . QtWidgets . QWidget ) -> bool isAncestorOf(self, child: PySide2.QtWidgets.QWidget) -> bool isCheckable def isCheckable ( self ) -> bool isCheckable(self) -> bool isChecked def isChecked ( self ) -> bool isChecked(self) -> bool isDown def isDown ( self ) -> bool isDown(self) -> bool isEnabled def isEnabled ( self ) -> bool isEnabled(self) -> bool isEnabledTo def isEnabledTo ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> bool isEnabledTo(self, arg__1: PySide2.QtWidgets.QWidget) -> bool isEnabledToTLW def isEnabledToTLW ( self ) -> bool isEnabledToTLW(self) -> bool isFullScreen def isFullScreen ( self ) -> bool isFullScreen(self) -> bool isHidden def isHidden ( self ) -> bool isHidden(self) -> bool isLeftToRight def isLeftToRight ( self ) -> bool isLeftToRight(self) -> bool isMaximized def isMaximized ( self ) -> bool isMaximized(self) -> bool isMinimized def isMinimized ( self ) -> bool isMinimized(self) -> bool isModal def isModal ( self ) -> bool isModal(self) -> bool isRightToLeft def isRightToLeft ( self ) -> bool isRightToLeft(self) -> bool isSignalConnected def isSignalConnected ( self , signal : PySide2 . QtCore . QMetaMethod ) -> bool isSignalConnected(self, signal: PySide2.QtCore.QMetaMethod) -> bool isTopLevel def isTopLevel ( self ) -> bool isTopLevel(self) -> bool isVisible def isVisible ( self ) -> bool isVisible(self) -> bool isVisibleTo def isVisibleTo ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> bool isVisibleTo(self, arg__1: PySide2.QtWidgets.QWidget) -> bool isWidgetType def isWidgetType ( self ) -> bool isWidgetType(self) -> bool isWindow def isWindow ( self ) -> bool isWindow(self) -> bool isWindowModified def isWindowModified ( self ) -> bool isWindowModified(self) -> bool isWindowType def isWindowType ( self ) -> bool isWindowType(self) -> bool keyPressEvent def keyPressEvent ( self , e : PySide2 . QtGui . QKeyEvent ) -> None keyPressEvent(self, e: PySide2.QtGui.QKeyEvent) -> None keyReleaseEvent def keyReleaseEvent ( self , e : PySide2 . QtGui . QKeyEvent ) -> None keyReleaseEvent(self, e: PySide2.QtGui.QKeyEvent) -> None killTimer def killTimer ( self , id : int ) -> None killTimer(self, id: int) -> None layout def layout ( self ) -> PySide2 . QtWidgets . QLayout layout(self) -> PySide2.QtWidgets.QLayout layoutDirection def layoutDirection ( self ) -> PySide2 . QtCore . Qt . LayoutDirection layoutDirection(self) -> PySide2.QtCore.Qt.LayoutDirection leaveEvent def leaveEvent ( self , arg__1 : PySide2 . QtCore . QEvent ) -> None leaveEvent(self, arg__1: PySide2.QtCore.QEvent) -> None locale def locale ( self ) -> PySide2 . QtCore . QLocale locale(self) -> PySide2.QtCore.QLocale logicalDpiX def logicalDpiX ( self ) -> int logicalDpiX(self) -> int logicalDpiY def logicalDpiY ( self ) -> int logicalDpiY(self) -> int lower def lower ( self ) -> None lower(self) -> None mapFrom def mapFrom ( self , arg__1 : PySide2 . QtWidgets . QWidget , arg__2 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapFrom(self, arg__1: PySide2.QtWidgets.QWidget, arg__2: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint mapFromGlobal def mapFromGlobal ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapFromGlobal(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint mapFromParent def mapFromParent ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapFromParent(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint mapTo def mapTo ( self , arg__1 : PySide2 . QtWidgets . QWidget , arg__2 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapTo(self, arg__1: PySide2.QtWidgets.QWidget, arg__2: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint mapToGlobal def mapToGlobal ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapToGlobal(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint mapToParent def mapToParent ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapToParent(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint mask def mask ( self ) -> PySide2 . QtGui . QRegion mask(self) -> PySide2.QtGui.QRegion maximumHeight def maximumHeight ( self ) -> int maximumHeight(self) -> int maximumSize def maximumSize ( self ) -> PySide2 . QtCore . QSize maximumSize(self) -> PySide2.QtCore.QSize maximumWidth def maximumWidth ( self ) -> int maximumWidth(self) -> int menu def menu ( self ) -> PySide2 . QtWidgets . QMenu menu(self) -> PySide2.QtWidgets.QMenu metaObject def metaObject ( self ) -> PySide2 . QtCore . QMetaObject metaObject(self) -> PySide2.QtCore.QMetaObject metric def metric ( self , arg__1 : PySide2 . QtGui . QPaintDevice . PaintDeviceMetric ) -> int metric(self, arg__1: PySide2.QtGui.QPaintDevice.PaintDeviceMetric) -> int minimumHeight def minimumHeight ( self ) -> int minimumHeight(self) -> int minimumSize def minimumSize ( self ) -> PySide2 . QtCore . QSize minimumSize(self) -> PySide2.QtCore.QSize minimumSizeHint def minimumSizeHint ( self ) -> PySide2 . QtCore . QSize minimumSizeHint(self) -> PySide2.QtCore.QSize minimumWidth def minimumWidth ( self ) -> int minimumWidth(self) -> int mouseDoubleClickEvent def mouseDoubleClickEvent ( self , event : PySide2 . QtGui . QMouseEvent ) -> None mouseDoubleClickEvent(self, event: PySide2.QtGui.QMouseEvent) -> None mouseMoveEvent def mouseMoveEvent ( self , e ) mouseMoveEvent(self, e: PySide2.QtGui.QMouseEvent) -> None View Source def mouseMoveEvent ( self , e ) : # noqa : N802 - Part of QT signature . if e . buttons () != Qt . LeftButton : return mimedata = QMimeData () drag = QDrag ( self ) drag . setMimeData ( mimedata ) drag . exec_ ( Qt . MoveAction ) mousePressEvent def mousePressEvent ( self , arg__1 : PySide2 . QtGui . QMouseEvent ) -> None mousePressEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None mouseReleaseEvent def mouseReleaseEvent ( self , arg__1 : PySide2 . QtGui . QMouseEvent ) -> None mouseReleaseEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None move def move ( ... ) move(self, arg__1: PySide2.QtCore.QPoint) -> None move(self, x: int, y: int) -> None moveEvent def moveEvent ( self , event : PySide2 . QtGui . QMoveEvent ) -> None moveEvent(self, event: PySide2.QtGui.QMoveEvent) -> None moveToThread def moveToThread ( self , thread : PySide2 . QtCore . QThread ) -> None moveToThread(self, thread: PySide2.QtCore.QThread) -> None nativeEvent def nativeEvent ( self , eventType : PySide2 . QtCore . QByteArray , message : int ) -> typing . Tuple [ bool , int ] nativeEvent(self, eventType: PySide2.QtCore.QByteArray, message: int) -> typing.Tuple[bool, int] nativeParentWidget def nativeParentWidget ( self ) -> PySide2 . QtWidgets . QWidget nativeParentWidget(self) -> PySide2.QtWidgets.QWidget nextCheckState def nextCheckState ( self ) -> None nextCheckState(self) -> None nextInFocusChain def nextInFocusChain ( self ) -> PySide2 . QtWidgets . QWidget nextInFocusChain(self) -> PySide2.QtWidgets.QWidget normalGeometry def normalGeometry ( self ) -> PySide2 . QtCore . QRect normalGeometry(self) -> PySide2.QtCore.QRect objectName def objectName ( self ) -> str objectName(self) -> str objectNameChanged def objectNameChanged ( ... ) overrideWindowFlags def overrideWindowFlags ( self , type : PySide2 . QtCore . Qt . WindowFlags ) -> None overrideWindowFlags(self, type: PySide2.QtCore.Qt.WindowFlags) -> None overrideWindowState def overrideWindowState ( self , state : PySide2 . QtCore . Qt . WindowStates ) -> None overrideWindowState(self, state: PySide2.QtCore.Qt.WindowStates) -> None paintEngine def paintEngine ( self ) -> PySide2 . QtGui . QPaintEngine paintEngine(self) -> PySide2.QtGui.QPaintEngine paintEvent def paintEvent ( self , arg__1 : PySide2 . QtGui . QPaintEvent ) -> None paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None paintingActive def paintingActive ( self ) -> bool paintingActive(self) -> bool palette def palette ( self ) -> PySide2 . QtGui . QPalette palette(self) -> PySide2.QtGui.QPalette parent def parent ( self ) -> PySide2 . QtCore . QObject parent(self) -> PySide2.QtCore.QObject parentWidget def parentWidget ( self ) -> PySide2 . QtWidgets . QWidget parentWidget(self) -> PySide2.QtWidgets.QWidget physicalDpiX def physicalDpiX ( self ) -> int physicalDpiX(self) -> int physicalDpiY def physicalDpiY ( self ) -> int physicalDpiY(self) -> int popupMode def popupMode ( self ) -> PySide2 . QtWidgets . QToolButton . ToolButtonPopupMode popupMode(self) -> PySide2.QtWidgets.QToolButton.ToolButtonPopupMode pos def pos ( self ) -> PySide2 . QtCore . QPoint pos(self) -> PySide2.QtCore.QPoint pressed def pressed ( ... ) previousInFocusChain def previousInFocusChain ( self ) -> PySide2 . QtWidgets . QWidget previousInFocusChain(self) -> PySide2.QtWidgets.QWidget property def property ( self , name : bytes ) -> typing . Any property(self, name: bytes) -> typing.Any raise_ def raise_ ( self ) -> None raise_(self) -> None receivers def receivers ( self , signal : bytes ) -> int receivers(self, signal: bytes) -> int rect def rect ( self ) -> PySide2 . QtCore . QRect rect(self) -> PySide2.QtCore.QRect redirected def redirected ( self , offset : PySide2 . QtCore . QPoint ) -> PySide2 . QtGui . QPaintDevice redirected(self, offset: PySide2.QtCore.QPoint) -> PySide2.QtGui.QPaintDevice releaseKeyboard def releaseKeyboard ( self ) -> None releaseKeyboard(self) -> None releaseMouse def releaseMouse ( self ) -> None releaseMouse(self) -> None releaseShortcut def releaseShortcut ( self , id : int ) -> None releaseShortcut(self, id: int) -> None released def released ( ... ) removeAction def removeAction ( self , action : PySide2 . QtWidgets . QAction ) -> None removeAction(self, action: PySide2.QtWidgets.QAction) -> None removeEventFilter def removeEventFilter ( self , obj : PySide2 . QtCore . QObject ) -> None removeEventFilter(self, obj: PySide2.QtCore.QObject) -> None render def render ( ... ) render(self, painter: PySide2.QtGui.QPainter, targetOffset: PySide2.QtCore.QPoint, sourceRegion: PySide2.QtGui.QRegion = Default(QRegion), renderFlags: PySide2.QtWidgets.QWidget.RenderFlags = Instance(QWidget.RenderFlags(QWidget.DrawWindowBackground | QWidget.DrawChildren))) -> None render(self, target: PySide2.QtGui.QPaintDevice, targetOffset: PySide2.QtCore.QPoint = Default(QPoint), sourceRegion: PySide2.QtGui.QRegion = Default(QRegion), renderFlags: PySide2.QtWidgets.QWidget.RenderFlags = Instance(QWidget.RenderFlags(QWidget.DrawWindowBackground | QWidget.DrawChildren))) -> None repaint def repaint ( ... ) repaint(self) -> None repaint(self, arg__1: PySide2.QtCore.QRect) -> None repaint(self, arg__1: PySide2.QtGui.QRegion) -> None repaint(self, x: int, y: int, w: int, h: int) -> None resize def resize ( ... ) resize(self, arg__1: PySide2.QtCore.QSize) -> None resize(self, w: int, h: int) -> None resizeEvent def resizeEvent ( self , event : PySide2 . QtGui . QResizeEvent ) -> None resizeEvent(self, event: PySide2.QtGui.QResizeEvent) -> None restoreGeometry def restoreGeometry ( self , geometry : PySide2 . QtCore . QByteArray ) -> bool restoreGeometry(self, geometry: PySide2.QtCore.QByteArray) -> bool saveGeometry def saveGeometry ( self ) -> PySide2 . QtCore . QByteArray saveGeometry(self) -> PySide2.QtCore.QByteArray screen def screen ( self ) -> PySide2 . QtGui . QScreen screen(self) -> PySide2.QtGui.QScreen scroll def scroll ( ... ) scroll(self, dx: int, dy: int) -> None scroll(self, dx: int, dy: int, arg__3: PySide2.QtCore.QRect) -> None sender def sender ( self ) -> PySide2 . QtCore . QObject sender(self) -> PySide2.QtCore.QObject senderSignalIndex def senderSignalIndex ( self ) -> int senderSignalIndex(self) -> int setAcceptDrops def setAcceptDrops ( self , on : bool ) -> None setAcceptDrops(self, on: bool) -> None setAccessibleDescription def setAccessibleDescription ( self , description : str ) -> None setAccessibleDescription(self, description: str) -> None setAccessibleName def setAccessibleName ( self , name : str ) -> None setAccessibleName(self, name: str) -> None setArrowType def setArrowType ( self , type : PySide2 . QtCore . Qt . ArrowType ) -> None setArrowType(self, type: PySide2.QtCore.Qt.ArrowType) -> None setAttribute def setAttribute ( self , arg__1 : PySide2 . QtCore . Qt . WidgetAttribute , on : bool = True ) -> None setAttribute(self, arg__1: PySide2.QtCore.Qt.WidgetAttribute, on: bool = True) -> None setAutoExclusive def setAutoExclusive ( self , arg__1 : bool ) -> None setAutoExclusive(self, arg__1: bool) -> None setAutoFillBackground def setAutoFillBackground ( self , enabled : bool ) -> None setAutoFillBackground(self, enabled: bool) -> None setAutoRaise def setAutoRaise ( self , enable : bool ) -> None setAutoRaise(self, enable: bool) -> None setAutoRepeat def setAutoRepeat ( self , arg__1 : bool ) -> None setAutoRepeat(self, arg__1: bool) -> None setAutoRepeatDelay def setAutoRepeatDelay ( self , arg__1 : int ) -> None setAutoRepeatDelay(self, arg__1: int) -> None setAutoRepeatInterval def setAutoRepeatInterval ( self , arg__1 : int ) -> None setAutoRepeatInterval(self, arg__1: int) -> None setBackgroundRole def setBackgroundRole ( self , arg__1 : PySide2 . QtGui . QPalette . ColorRole ) -> None setBackgroundRole(self, arg__1: PySide2.QtGui.QPalette.ColorRole) -> None setBaseSize def setBaseSize ( ... ) setBaseSize(self, arg__1: PySide2.QtCore.QSize) -> None setBaseSize(self, basew: int, baseh: int) -> None setCheckable def setCheckable ( self , arg__1 : bool ) -> None setCheckable(self, arg__1: bool) -> None setChecked def setChecked ( self , arg__1 : bool ) -> None setChecked(self, arg__1: bool) -> None setContentsMargins def setContentsMargins ( ... ) setContentsMargins(self, left: int, top: int, right: int, bottom: int) -> None setContentsMargins(self, margins: PySide2.QtCore.QMargins) -> None setContextMenuPolicy def setContextMenuPolicy ( self , policy : PySide2 . QtCore . Qt . ContextMenuPolicy ) -> None setContextMenuPolicy(self, policy: PySide2.QtCore.Qt.ContextMenuPolicy) -> None setCursor def setCursor ( self , arg__1 : PySide2 . QtGui . QCursor ) -> None setCursor(self, arg__1: PySide2.QtGui.QCursor) -> None setDefaultAction def setDefaultAction ( self , arg__1 : PySide2 . QtWidgets . QAction ) -> None setDefaultAction(self, arg__1: PySide2.QtWidgets.QAction) -> None setDisabled def setDisabled ( self , arg__1 : bool ) -> None setDisabled(self, arg__1: bool) -> None setDown def setDown ( self , arg__1 : bool ) -> None setDown(self, arg__1: bool) -> None setEnabled def setEnabled ( self , arg__1 : bool ) -> None setEnabled(self, arg__1: bool) -> None setFixedHeight def setFixedHeight ( self , h : int ) -> None setFixedHeight(self, h: int) -> None setFixedSize def setFixedSize ( ... ) setFixedSize(self, arg__1: PySide2.QtCore.QSize) -> None setFixedSize(self, w: int, h: int) -> None setFixedWidth def setFixedWidth ( self , w : int ) -> None setFixedWidth(self, w: int) -> None setFocus def setFocus ( ... ) setFocus(self) -> None setFocus(self, reason: PySide2.QtCore.Qt.FocusReason) -> None setFocusPolicy def setFocusPolicy ( self , policy : PySide2 . QtCore . Qt . FocusPolicy ) -> None setFocusPolicy(self, policy: PySide2.QtCore.Qt.FocusPolicy) -> None setFocusProxy def setFocusProxy ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> None setFocusProxy(self, arg__1: PySide2.QtWidgets.QWidget) -> None setFont def setFont ( self , arg__1 : PySide2 . QtGui . QFont ) -> None setFont(self, arg__1: PySide2.QtGui.QFont) -> None setForegroundRole def setForegroundRole ( self , arg__1 : PySide2 . QtGui . QPalette . ColorRole ) -> None setForegroundRole(self, arg__1: PySide2.QtGui.QPalette.ColorRole) -> None setGeometry def setGeometry ( ... ) setGeometry(self, arg__1: PySide2.QtCore.QRect) -> None setGeometry(self, x: int, y: int, w: int, h: int) -> None setGraphicsEffect def setGraphicsEffect ( self , effect : PySide2 . QtWidgets . QGraphicsEffect ) -> None setGraphicsEffect(self, effect: PySide2.QtWidgets.QGraphicsEffect) -> None setHidden def setHidden ( self , hidden : bool ) -> None setHidden(self, hidden: bool) -> None setIcon def setIcon ( self , icon : PySide2 . QtGui . QIcon ) -> None setIcon(self, icon: PySide2.QtGui.QIcon) -> None setIconSize def setIconSize ( self , size : PySide2 . QtCore . QSize ) -> None setIconSize(self, size: PySide2.QtCore.QSize) -> None setInputMethodHints def setInputMethodHints ( self , hints : PySide2 . QtCore . Qt . InputMethodHints ) -> None setInputMethodHints(self, hints: PySide2.QtCore.Qt.InputMethodHints) -> None setLayout def setLayout ( self , arg__1 : PySide2 . QtWidgets . QLayout ) -> None setLayout(self, arg__1: PySide2.QtWidgets.QLayout) -> None setLayoutDirection def setLayoutDirection ( self , direction : PySide2 . QtCore . Qt . LayoutDirection ) -> None setLayoutDirection(self, direction: PySide2.QtCore.Qt.LayoutDirection) -> None setLocale def setLocale ( self , locale : PySide2 . QtCore . QLocale ) -> None setLocale(self, locale: PySide2.QtCore.QLocale) -> None setMask def setMask ( ... ) setMask(self, arg__1: PySide2.QtGui.QBitmap) -> None setMask(self, arg__1: PySide2.QtGui.QRegion) -> None setMaximumHeight def setMaximumHeight ( self , maxh : int ) -> None setMaximumHeight(self, maxh: int) -> None setMaximumSize def setMaximumSize ( ... ) setMaximumSize(self, arg__1: PySide2.QtCore.QSize) -> None setMaximumSize(self, maxw: int, maxh: int) -> None setMaximumWidth def setMaximumWidth ( self , maxw : int ) -> None setMaximumWidth(self, maxw: int) -> None setMenu def setMenu ( self , menu : PySide2 . QtWidgets . QMenu ) -> None setMenu(self, menu: PySide2.QtWidgets.QMenu) -> None setMinimumHeight def setMinimumHeight ( self , minh : int ) -> None setMinimumHeight(self, minh: int) -> None setMinimumSize def setMinimumSize ( ... ) setMinimumSize(self, arg__1: PySide2.QtCore.QSize) -> None setMinimumSize(self, minw: int, minh: int) -> None setMinimumWidth def setMinimumWidth ( self , minw : int ) -> None setMinimumWidth(self, minw: int) -> None setMouseTracking def setMouseTracking ( self , enable : bool ) -> None setMouseTracking(self, enable: bool) -> None setObjectName def setObjectName ( self , name : str ) -> None setObjectName(self, name: str) -> None setPalette def setPalette ( self , arg__1 : PySide2 . QtGui . QPalette ) -> None setPalette(self, arg__1: PySide2.QtGui.QPalette) -> None setParent def setParent ( ... ) setParent(self, parent: PySide2.QtCore.QObject) -> None setParent(self, parent: PySide2.QtWidgets.QWidget) -> None setParent(self, parent: PySide2.QtWidgets.QWidget, f: PySide2.QtCore.Qt.WindowFlags) -> None setPopupMode def setPopupMode ( self , mode : PySide2 . QtWidgets . QToolButton . ToolButtonPopupMode ) -> None setPopupMode(self, mode: PySide2.QtWidgets.QToolButton.ToolButtonPopupMode) -> None setProperty def setProperty ( self , name : bytes , value : typing . Any ) -> bool setProperty(self, name: bytes, value: typing.Any) -> bool setShortcut def setShortcut ( self , key : PySide2 . QtGui . QKeySequence ) -> None setShortcut(self, key: PySide2.QtGui.QKeySequence) -> None setShortcutAutoRepeat def setShortcutAutoRepeat ( self , id : int , enable : bool = True ) -> None setShortcutAutoRepeat(self, id: int, enable: bool = True) -> None setShortcutEnabled def setShortcutEnabled ( self , id : int , enable : bool = True ) -> None setShortcutEnabled(self, id: int, enable: bool = True) -> None setSizeIncrement def setSizeIncrement ( ... ) setSizeIncrement(self, arg__1: PySide2.QtCore.QSize) -> None setSizeIncrement(self, w: int, h: int) -> None setSizePolicy def setSizePolicy ( ... ) setSizePolicy(self, arg__1: PySide2.QtWidgets.QSizePolicy) -> None setSizePolicy(self, horizontal: PySide2.QtWidgets.QSizePolicy.Policy, vertical: PySide2.QtWidgets.QSizePolicy.Policy) -> None setStatusTip def setStatusTip ( self , arg__1 : str ) -> None setStatusTip(self, arg__1: str) -> None setStyle def setStyle ( self , arg__1 : PySide2 . QtWidgets . QStyle ) -> None setStyle(self, arg__1: PySide2.QtWidgets.QStyle) -> None setStyleSheet def setStyleSheet ( self , styleSheet : str ) -> None setStyleSheet(self, styleSheet: str) -> None setTabletTracking def setTabletTracking ( self , enable : bool ) -> None setTabletTracking(self, enable: bool) -> None setText def setText ( self , text : str ) -> None setText(self, text: str) -> None setToolButtonStyle def setToolButtonStyle ( self , style : PySide2 . QtCore . Qt . ToolButtonStyle ) -> None setToolButtonStyle(self, style: PySide2.QtCore.Qt.ToolButtonStyle) -> None setToolTip def setToolTip ( self , arg__1 : str ) -> None setToolTip(self, arg__1: str) -> None setToolTipDuration def setToolTipDuration ( self , msec : int ) -> None setToolTipDuration(self, msec: int) -> None setUpdatesEnabled def setUpdatesEnabled ( self , enable : bool ) -> None setUpdatesEnabled(self, enable: bool) -> None setVisible def setVisible ( self , visible : bool ) -> None setVisible(self, visible: bool) -> None setWhatsThis def setWhatsThis ( self , arg__1 : str ) -> None setWhatsThis(self, arg__1: str) -> None setWindowFilePath def setWindowFilePath ( self , filePath : str ) -> None setWindowFilePath(self, filePath: str) -> None setWindowFlag def setWindowFlag ( self , arg__1 : PySide2 . QtCore . Qt . WindowType , on : bool = True ) -> None setWindowFlag(self, arg__1: PySide2.QtCore.Qt.WindowType, on: bool = True) -> None setWindowFlags def setWindowFlags ( self , type : PySide2 . QtCore . Qt . WindowFlags ) -> None setWindowFlags(self, type: PySide2.QtCore.Qt.WindowFlags) -> None setWindowIcon def setWindowIcon ( self , icon : PySide2 . QtGui . QIcon ) -> None setWindowIcon(self, icon: PySide2.QtGui.QIcon) -> None setWindowIconText def setWindowIconText ( self , arg__1 : str ) -> None setWindowIconText(self, arg__1: str) -> None setWindowModality def setWindowModality ( self , windowModality : PySide2 . QtCore . Qt . WindowModality ) -> None setWindowModality(self, windowModality: PySide2.QtCore.Qt.WindowModality) -> None setWindowModified def setWindowModified ( self , arg__1 : bool ) -> None setWindowModified(self, arg__1: bool) -> None setWindowOpacity def setWindowOpacity ( self , level : float ) -> None setWindowOpacity(self, level: float) -> None setWindowRole def setWindowRole ( self , arg__1 : str ) -> None setWindowRole(self, arg__1: str) -> None setWindowState def setWindowState ( self , state : PySide2 . QtCore . Qt . WindowStates ) -> None setWindowState(self, state: PySide2.QtCore.Qt.WindowStates) -> None setWindowTitle def setWindowTitle ( self , arg__1 : str ) -> None setWindowTitle(self, arg__1: str) -> None sharedPainter def sharedPainter ( self ) -> PySide2 . QtGui . QPainter sharedPainter(self) -> PySide2.QtGui.QPainter shortcut def shortcut ( self ) -> PySide2 . QtGui . QKeySequence shortcut(self) -> PySide2.QtGui.QKeySequence show def show ( self ) -> None show(self) -> None showEvent def showEvent ( self , event : PySide2 . QtGui . QShowEvent ) -> None showEvent(self, event: PySide2.QtGui.QShowEvent) -> None showFullScreen def showFullScreen ( self ) -> None showFullScreen(self) -> None showMaximized def showMaximized ( self ) -> None showMaximized(self) -> None showMenu def showMenu ( self ) -> None showMenu(self) -> None showMinimized def showMinimized ( self ) -> None showMinimized(self) -> None showNormal def showNormal ( self ) -> None showNormal(self) -> None signalsBlocked def signalsBlocked ( self ) -> bool signalsBlocked(self) -> bool size def size ( self ) -> PySide2 . QtCore . QSize size(self) -> PySide2.QtCore.QSize sizeHint def sizeHint ( self ) -> PySide2 . QtCore . QSize sizeHint(self) -> PySide2.QtCore.QSize sizeIncrement def sizeIncrement ( self ) -> PySide2 . QtCore . QSize sizeIncrement(self) -> PySide2.QtCore.QSize sizePolicy def sizePolicy ( self ) -> PySide2 . QtWidgets . QSizePolicy sizePolicy(self) -> PySide2.QtWidgets.QSizePolicy stackUnder def stackUnder ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> None stackUnder(self, arg__1: PySide2.QtWidgets.QWidget) -> None startTimer def startTimer ( self , interval : int , timerType : PySide2 . QtCore . Qt . TimerType = PySide2 . QtCore . Qt . TimerType . CoarseTimer ) -> int startTimer(self, interval: int, timerType: PySide2.QtCore.Qt.TimerType = PySide2.QtCore.Qt.TimerType.CoarseTimer) -> int statusTip def statusTip ( self ) -> str statusTip(self) -> str style def style ( self ) -> PySide2 . QtWidgets . QStyle style(self) -> PySide2.QtWidgets.QStyle styleSheet def styleSheet ( self ) -> str styleSheet(self) -> str tabletEvent def tabletEvent ( self , event : PySide2 . QtGui . QTabletEvent ) -> None tabletEvent(self, event: PySide2.QtGui.QTabletEvent) -> None testAttribute def testAttribute ( self , arg__1 : PySide2 . QtCore . Qt . WidgetAttribute ) -> bool testAttribute(self, arg__1: PySide2.QtCore.Qt.WidgetAttribute) -> bool text def text ( self ) -> str text(self) -> str thread def thread ( self ) -> PySide2 . QtCore . QThread thread(self) -> PySide2.QtCore.QThread timerEvent def timerEvent ( self , arg__1 : PySide2 . QtCore . QTimerEvent ) -> None timerEvent(self, arg__1: PySide2.QtCore.QTimerEvent) -> None toggle def toggle ( self ) -> None toggle(self) -> None toggled def toggled ( ... ) toolButtonStyle def toolButtonStyle ( self ) -> PySide2 . QtCore . Qt . ToolButtonStyle toolButtonStyle(self) -> PySide2.QtCore.Qt.ToolButtonStyle toolTip def toolTip ( self ) -> str toolTip(self) -> str toolTipDuration def toolTipDuration ( self ) -> int toolTipDuration(self) -> int topLevelWidget def topLevelWidget ( self ) -> PySide2 . QtWidgets . QWidget topLevelWidget(self) -> PySide2.QtWidgets.QWidget tr def tr ( self , arg__1 : bytes , arg__2 : bytes = b '' , arg__3 : int = - 1 ) -> str tr(self, arg__1: bytes, arg__2: bytes = b'', arg__3: int = -1) -> str triggered def triggered ( ... ) underMouse def underMouse ( self ) -> bool underMouse(self) -> bool ungrabGesture def ungrabGesture ( self , type : PySide2 . QtCore . Qt . GestureType ) -> None ungrabGesture(self, type: PySide2.QtCore.Qt.GestureType) -> None unsetCursor def unsetCursor ( self ) -> None unsetCursor(self) -> None unsetLayoutDirection def unsetLayoutDirection ( self ) -> None unsetLayoutDirection(self) -> None unsetLocale def unsetLocale ( self ) -> None unsetLocale(self) -> None update def update ( ... ) update(self) -> None update(self, arg__1: PySide2.QtCore.QRect) -> None update(self, arg__1: PySide2.QtGui.QRegion) -> None update(self, x: int, y: int, w: int, h: int) -> None updateGeometry def updateGeometry ( self ) -> None updateGeometry(self) -> None updateMicroFocus def updateMicroFocus ( self ) -> None updateMicroFocus(self) -> None updatesEnabled def updatesEnabled ( self ) -> bool updatesEnabled(self) -> bool visibleRegion def visibleRegion ( self ) -> PySide2 . QtGui . QRegion visibleRegion(self) -> PySide2.QtGui.QRegion whatsThis def whatsThis ( self ) -> str whatsThis(self) -> str wheelEvent def wheelEvent ( self , event : PySide2 . QtGui . QWheelEvent ) -> None wheelEvent(self, event: PySide2.QtGui.QWheelEvent) -> None width def width ( self ) -> int width(self) -> int widthMM def widthMM ( self ) -> int widthMM(self) -> int winId def winId ( self ) -> int winId(self) -> int window def window ( self ) -> PySide2 . QtWidgets . QWidget window(self) -> PySide2.QtWidgets.QWidget windowFilePath def windowFilePath ( self ) -> str windowFilePath(self) -> str windowFlags def windowFlags ( self ) -> PySide2 . QtCore . Qt . WindowFlags windowFlags(self) -> PySide2.QtCore.Qt.WindowFlags windowHandle def windowHandle ( self ) -> PySide2 . QtGui . QWindow windowHandle(self) -> PySide2.QtGui.QWindow windowIcon def windowIcon ( self ) -> PySide2 . QtGui . QIcon windowIcon(self) -> PySide2.QtGui.QIcon windowIconChanged def windowIconChanged ( ... ) windowIconText def windowIconText ( self ) -> str windowIconText(self) -> str windowIconTextChanged def windowIconTextChanged ( ... ) windowModality def windowModality ( self ) -> PySide2 . QtCore . Qt . WindowModality windowModality(self) -> PySide2.QtCore.Qt.WindowModality windowOpacity def windowOpacity ( self ) -> float windowOpacity(self) -> float windowRole def windowRole ( self ) -> str windowRole(self) -> str windowState def windowState ( self ) -> PySide2 . QtCore . Qt . WindowStates windowState(self) -> PySide2.QtCore.Qt.WindowStates windowTitle def windowTitle ( self ) -> str windowTitle(self) -> str windowTitleChanged def windowTitleChanged ( ... ) windowType def windowType ( self ) -> PySide2 . QtCore . Qt . WindowType windowType(self) -> PySide2.QtCore.Qt.WindowType x def x ( self ) -> int x(self) -> int y def y ( self ) -> int y(self) -> int MainWindow class MainWindow ( ) View Source class MainWindow ( QMainWindow ): def __init__ ( self ): super ( MainWindow , self ). __init__ () self . ui = Ui_MainWindow () self . ui . setupUi ( self ) self . window_shown: bool = True def closeEvent ( self , event ) -> None: # noqa: N802 - Part of QT signature. self . window_shown = False self . hide () event . ignore () def systray_clicked ( self , _status = None ) -> None: self . hide () if self . window_shown: self . window_shown = False return self . show () self . activateWindow () getattr ( self , \"raise\" )() # noqa: B009 - Can't call as self.raise() due to syntax error. self . window_shown = True Ancestors (in MRO) PySide2.QtWidgets.QMainWindow PySide2.QtWidgets.QWidget PySide2.QtCore.QObject PySide2.QtGui.QPaintDevice Shiboken.Object Class variables AllowNestedDocks AllowTabbedDocks AnimatedDocks DockOption DockOptions DrawChildren DrawWindowBackground ForceTabbedDocks GroupedDragging IgnoreMask PaintDeviceMetric PdmDepth PdmDevicePixelRatio PdmDevicePixelRatioScaled PdmDpiX PdmDpiY PdmHeight PdmHeightMM PdmNumColors PdmPhysicalDpiX PdmPhysicalDpiY PdmWidth PdmWidthMM RenderFlag RenderFlags VerticalTabs painters staticMetaObject Static methods connect def connect ( ... ) connect(arg__1: PySide2.QtCore.QObject, arg__2: bytes, arg__3: typing.Callable, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> bool connect(self, arg__1: bytes, arg__2: typing.Callable, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> bool connect(self, arg__1: bytes, arg__2: PySide2.QtCore.QObject, arg__3: bytes, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> bool connect(self, sender: PySide2.QtCore.QObject, signal: bytes, member: bytes, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> PySide2.QtCore.QMetaObject.Connection connect(sender: PySide2.QtCore.QObject, signal: PySide2.QtCore.QMetaMethod, receiver: PySide2.QtCore.QObject, method: PySide2.QtCore.QMetaMethod, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> PySide2.QtCore.QMetaObject.Connection connect(sender: PySide2.QtCore.QObject, signal: bytes, receiver: PySide2.QtCore.QObject, member: bytes, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> PySide2.QtCore.QMetaObject.Connection createWindowContainer def createWindowContainer ( window : PySide2 . QtGui . QWindow , parent : typing . Union [ PySide2 . QtWidgets . QWidget , NoneType ] = None , flags : PySide2 . QtCore . Qt . WindowFlags = Default ( Qt . WindowFlags ) ) -> PySide2 . QtWidgets . QWidget createWindowContainer(window: PySide2.QtGui.QWindow, parent: typing.Union[PySide2.QtWidgets.QWidget, NoneType] = None, flags: PySide2.QtCore.Qt.WindowFlags = Default(Qt.WindowFlags)) -> PySide2.QtWidgets.QWidget devicePixelRatioFScale def devicePixelRatioFScale ( ) -> float devicePixelRatioFScale() -> float disconnect def disconnect ( ... ) disconnect(arg__1: PySide2.QtCore.QMetaObject.Connection) -> bool disconnect(arg__1: PySide2.QtCore.QObject, arg__2: bytes, arg__3: typing.Callable) -> bool disconnect(self, arg__1: bytes, arg__2: typing.Callable) -> bool disconnect(self, receiver: PySide2.QtCore.QObject, member: typing.Union[bytes, NoneType] = None) -> bool disconnect(self, signal: bytes, receiver: PySide2.QtCore.QObject, member: bytes) -> bool disconnect(sender: PySide2.QtCore.QObject, signal: PySide2.QtCore.QMetaMethod, receiver: PySide2.QtCore.QObject, member: PySide2.QtCore.QMetaMethod) -> bool disconnect(sender: PySide2.QtCore.QObject, signal: bytes, receiver: PySide2.QtCore.QObject, member: bytes) -> bool find def find ( arg__1 : int ) -> PySide2 . QtWidgets . QWidget find(arg__1: int) -> PySide2.QtWidgets.QWidget keyboardGrabber def keyboardGrabber ( ) -> PySide2 . QtWidgets . QWidget keyboardGrabber() -> PySide2.QtWidgets.QWidget mouseGrabber def mouseGrabber ( ) -> PySide2 . QtWidgets . QWidget mouseGrabber() -> PySide2.QtWidgets.QWidget registerUserData def registerUserData ( ) -> int registerUserData() -> int setTabOrder def setTabOrder ( arg__1 : PySide2 . QtWidgets . QWidget , arg__2 : PySide2 . QtWidgets . QWidget ) -> None setTabOrder(arg__1: PySide2.QtWidgets.QWidget, arg__2: PySide2.QtWidgets.QWidget) -> None Methods acceptDrops def acceptDrops ( self ) -> bool acceptDrops(self) -> bool accessibleDescription def accessibleDescription ( self ) -> str accessibleDescription(self) -> str accessibleName def accessibleName ( self ) -> str accessibleName(self) -> str actionEvent def actionEvent ( self , event : PySide2 . QtGui . QActionEvent ) -> None actionEvent(self, event: PySide2.QtGui.QActionEvent) -> None actions def actions ( self ) -> typing . List [ PySide2 . QtWidgets . QAction ] actions(self) -> typing.List[PySide2.QtWidgets.QAction] activateWindow def activateWindow ( self ) -> None activateWindow(self) -> None addAction def addAction ( self , action : PySide2 . QtWidgets . QAction ) -> None addAction(self, action: PySide2.QtWidgets.QAction) -> None addActions def addActions ( self , actions : typing . Sequence [ PySide2 . QtWidgets . QAction ] ) -> None addActions(self, actions: typing.Sequence[PySide2.QtWidgets.QAction]) -> None addDockWidget def addDockWidget ( ... ) addDockWidget(self, area: PySide2.QtCore.Qt.DockWidgetArea, dockwidget: PySide2.QtWidgets.QDockWidget) -> None addDockWidget(self, area: PySide2.QtCore.Qt.DockWidgetArea, dockwidget: PySide2.QtWidgets.QDockWidget, orientation: PySide2.QtCore.Qt.Orientation) -> None addToolBar def addToolBar ( ... ) addToolBar(self, area: PySide2.QtCore.Qt.ToolBarArea, toolbar: PySide2.QtWidgets.QToolBar) -> None addToolBar(self, title: str) -> PySide2.QtWidgets.QToolBar addToolBar(self, toolbar: PySide2.QtWidgets.QToolBar) -> None addToolBarBreak def addToolBarBreak ( self , area : PySide2 . QtCore . Qt . ToolBarArea = PySide2 . QtCore . Qt . ToolBarArea . TopToolBarArea ) -> None addToolBarBreak(self, area: PySide2.QtCore.Qt.ToolBarArea = PySide2.QtCore.Qt.ToolBarArea.TopToolBarArea) -> None adjustSize def adjustSize ( self ) -> None adjustSize(self) -> None autoFillBackground def autoFillBackground ( self ) -> bool autoFillBackground(self) -> bool backgroundRole def backgroundRole ( self ) -> PySide2 . QtGui . QPalette . ColorRole backgroundRole(self) -> PySide2.QtGui.QPalette.ColorRole backingStore def backingStore ( self ) -> PySide2 . QtGui . QBackingStore backingStore(self) -> PySide2.QtGui.QBackingStore baseSize def baseSize ( self ) -> PySide2 . QtCore . QSize baseSize(self) -> PySide2.QtCore.QSize blockSignals def blockSignals ( self , b : bool ) -> bool blockSignals(self, b: bool) -> bool centralWidget def centralWidget ( self ) -> PySide2 . QtWidgets . QWidget centralWidget(self) -> PySide2.QtWidgets.QWidget changeEvent def changeEvent ( self , event : PySide2 . QtCore . QEvent ) -> None changeEvent(self, event: PySide2.QtCore.QEvent) -> None childAt def childAt ( ... ) childAt(self, p: PySide2.QtCore.QPoint) -> PySide2.QtWidgets.QWidget childAt(self, x: int, y: int) -> PySide2.QtWidgets.QWidget childEvent def childEvent ( self , event : PySide2 . QtCore . QChildEvent ) -> None childEvent(self, event: PySide2.QtCore.QChildEvent) -> None children def children ( self ) -> typing . List [ PySide2 . QtCore . QObject ] children(self) -> typing.List[PySide2.QtCore.QObject] childrenRect def childrenRect ( self ) -> PySide2 . QtCore . QRect childrenRect(self) -> PySide2.QtCore.QRect childrenRegion def childrenRegion ( self ) -> PySide2 . QtGui . QRegion childrenRegion(self) -> PySide2.QtGui.QRegion clearFocus def clearFocus ( self ) -> None clearFocus(self) -> None clearMask def clearMask ( self ) -> None clearMask(self) -> None close def close ( self ) -> bool close(self) -> bool closeEvent def closeEvent ( self , event ) -> None closeEvent(self, event: PySide2.QtGui.QCloseEvent) -> None View Source def closeEvent ( self , event ) -> None : # noqa : N802 - Part of QT signature . self . window_shown = False self . hide () event . ignore () colorCount def colorCount ( self ) -> int colorCount(self) -> int connectNotify def connectNotify ( self , signal : PySide2 . QtCore . QMetaMethod ) -> None connectNotify(self, signal: PySide2.QtCore.QMetaMethod) -> None contentsMargins def contentsMargins ( self ) -> PySide2 . QtCore . QMargins contentsMargins(self) -> PySide2.QtCore.QMargins contentsRect def contentsRect ( self ) -> PySide2 . QtCore . QRect contentsRect(self) -> PySide2.QtCore.QRect contextMenuEvent def contextMenuEvent ( self , event : PySide2 . QtGui . QContextMenuEvent ) -> None contextMenuEvent(self, event: PySide2.QtGui.QContextMenuEvent) -> None contextMenuPolicy def contextMenuPolicy ( self ) -> PySide2 . QtCore . Qt . ContextMenuPolicy contextMenuPolicy(self) -> PySide2.QtCore.Qt.ContextMenuPolicy corner def corner ( self , corner : PySide2 . QtCore . Qt . Corner ) -> PySide2 . QtCore . Qt . DockWidgetArea corner(self, corner: PySide2.QtCore.Qt.Corner) -> PySide2.QtCore.Qt.DockWidgetArea create def create ( self , arg__1 : int = 0 , initializeWindow : bool = True , destroyOldWindow : bool = True ) -> None create(self, arg__1: int = 0, initializeWindow: bool = True, destroyOldWindow: bool = True) -> None createPopupMenu def createPopupMenu ( self ) -> PySide2 . QtWidgets . QMenu createPopupMenu(self) -> PySide2.QtWidgets.QMenu createWinId def createWinId ( self ) -> None createWinId(self) -> None cursor def cursor ( self ) -> PySide2 . QtGui . QCursor cursor(self) -> PySide2.QtGui.QCursor customContextMenuRequested def customContextMenuRequested ( ... ) customEvent def customEvent ( self , event : PySide2 . QtCore . QEvent ) -> None customEvent(self, event: PySide2.QtCore.QEvent) -> None deleteLater def deleteLater ( self ) -> None deleteLater(self) -> None depth def depth ( self ) -> int depth(self) -> int destroy def destroy ( self , destroyWindow : bool = True , destroySubWindows : bool = True ) -> None destroy(self, destroyWindow: bool = True, destroySubWindows: bool = True) -> None destroyed def destroyed ( ... ) devType def devType ( self ) -> int devType(self) -> int devicePixelRatio def devicePixelRatio ( self ) -> int devicePixelRatio(self) -> int devicePixelRatioF def devicePixelRatioF ( self ) -> float devicePixelRatioF(self) -> float disconnectNotify def disconnectNotify ( self , signal : PySide2 . QtCore . QMetaMethod ) -> None disconnectNotify(self, signal: PySide2.QtCore.QMetaMethod) -> None dockOptions def dockOptions ( self ) -> PySide2 . QtWidgets . QMainWindow . DockOptions dockOptions(self) -> PySide2.QtWidgets.QMainWindow.DockOptions dockWidgetArea def dockWidgetArea ( self , dockwidget : PySide2 . QtWidgets . QDockWidget ) -> PySide2 . QtCore . Qt . DockWidgetArea dockWidgetArea(self, dockwidget: PySide2.QtWidgets.QDockWidget) -> PySide2.QtCore.Qt.DockWidgetArea documentMode def documentMode ( self ) -> bool documentMode(self) -> bool dragEnterEvent def dragEnterEvent ( self , event : PySide2 . QtGui . QDragEnterEvent ) -> None dragEnterEvent(self, event: PySide2.QtGui.QDragEnterEvent) -> None dragLeaveEvent def dragLeaveEvent ( self , event : PySide2 . QtGui . QDragLeaveEvent ) -> None dragLeaveEvent(self, event: PySide2.QtGui.QDragLeaveEvent) -> None dragMoveEvent def dragMoveEvent ( self , event : PySide2 . QtGui . QDragMoveEvent ) -> None dragMoveEvent(self, event: PySide2.QtGui.QDragMoveEvent) -> None dropEvent def dropEvent ( self , event : PySide2 . QtGui . QDropEvent ) -> None dropEvent(self, event: PySide2.QtGui.QDropEvent) -> None dumpObjectInfo def dumpObjectInfo ( self ) -> None dumpObjectInfo(self) -> None dumpObjectTree def dumpObjectTree ( self ) -> None dumpObjectTree(self) -> None dynamicPropertyNames def dynamicPropertyNames ( self ) -> typing . List [ PySide2 . QtCore . QByteArray ] dynamicPropertyNames(self) -> typing.List[PySide2.QtCore.QByteArray] effectiveWinId def effectiveWinId ( self ) -> int effectiveWinId(self) -> int emit def emit ( self , arg__1 : bytes , * args : None ) -> bool emit(self, arg__1: bytes, *args: None) -> bool ensurePolished def ensurePolished ( self ) -> None ensurePolished(self) -> None enterEvent def enterEvent ( self , event : PySide2 . QtCore . QEvent ) -> None enterEvent(self, event: PySide2.QtCore.QEvent) -> None event def event ( self , event : PySide2 . QtCore . QEvent ) -> bool event(self, event: PySide2.QtCore.QEvent) -> bool eventFilter def eventFilter ( self , watched : PySide2 . QtCore . QObject , event : PySide2 . QtCore . QEvent ) -> bool eventFilter(self, watched: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) -> bool findChild def findChild ( self , arg__1 : type , arg__2 : str = '' ) -> object findChild(self, arg__1: type, arg__2: str = '') -> object findChildren def findChildren ( ... ) findChildren(self, arg__1: type, arg__2: PySide2.QtCore.QRegExp) -> typing.Iterable findChildren(self, arg__1: type, arg__2: PySide2.QtCore.QRegularExpression) -> typing.Iterable findChildren(self, arg__1: type, arg__2: str = '') -> typing.Iterable focusInEvent def focusInEvent ( self , event : PySide2 . QtGui . QFocusEvent ) -> None focusInEvent(self, event: PySide2.QtGui.QFocusEvent) -> None focusNextChild def focusNextChild ( self ) -> bool focusNextChild(self) -> bool focusNextPrevChild def focusNextPrevChild ( self , next : bool ) -> bool focusNextPrevChild(self, next: bool) -> bool focusOutEvent def focusOutEvent ( self , event : PySide2 . QtGui . QFocusEvent ) -> None focusOutEvent(self, event: PySide2.QtGui.QFocusEvent) -> None focusPolicy def focusPolicy ( self ) -> PySide2 . QtCore . Qt . FocusPolicy focusPolicy(self) -> PySide2.QtCore.Qt.FocusPolicy focusPreviousChild def focusPreviousChild ( self ) -> bool focusPreviousChild(self) -> bool focusProxy def focusProxy ( self ) -> PySide2 . QtWidgets . QWidget focusProxy(self) -> PySide2.QtWidgets.QWidget focusWidget def focusWidget ( self ) -> PySide2 . QtWidgets . QWidget focusWidget(self) -> PySide2.QtWidgets.QWidget font def font ( self ) -> PySide2 . QtGui . QFont font(self) -> PySide2.QtGui.QFont fontInfo def fontInfo ( self ) -> PySide2 . QtGui . QFontInfo fontInfo(self) -> PySide2.QtGui.QFontInfo fontMetrics def fontMetrics ( self ) -> PySide2 . QtGui . QFontMetrics fontMetrics(self) -> PySide2.QtGui.QFontMetrics foregroundRole def foregroundRole ( self ) -> PySide2 . QtGui . QPalette . ColorRole foregroundRole(self) -> PySide2.QtGui.QPalette.ColorRole frameGeometry def frameGeometry ( self ) -> PySide2 . QtCore . QRect frameGeometry(self) -> PySide2.QtCore.QRect frameSize def frameSize ( self ) -> PySide2 . QtCore . QSize frameSize(self) -> PySide2.QtCore.QSize geometry def geometry ( self ) -> PySide2 . QtCore . QRect geometry(self) -> PySide2.QtCore.QRect getContentsMargins def getContentsMargins ( self ) -> typing . Tuple [ int , int , int , int ] getContentsMargins(self) -> typing.Tuple[int, int, int, int] grab def grab ( self , rectangle : PySide2 . QtCore . QRect = PySide2 . QtCore . QRect ( 0 , 0 , - 1 , - 1 ) ) -> PySide2 . QtGui . QPixmap grab(self, rectangle: PySide2.QtCore.QRect = PySide2.QtCore.QRect(0, 0, -1, -1)) -> PySide2.QtGui.QPixmap grabGesture def grabGesture ( self , type : PySide2 . QtCore . Qt . GestureType , flags : PySide2 . QtCore . Qt . GestureFlags = Default ( Qt . GestureFlags ) ) -> None grabGesture(self, type: PySide2.QtCore.Qt.GestureType, flags: PySide2.QtCore.Qt.GestureFlags = Default(Qt.GestureFlags)) -> None grabKeyboard def grabKeyboard ( self ) -> None grabKeyboard(self) -> None grabMouse def grabMouse ( ... ) grabMouse(self) -> None grabMouse(self, arg__1: PySide2.QtGui.QCursor) -> None grabShortcut def grabShortcut ( self , key : PySide2 . QtGui . QKeySequence , context : PySide2 . QtCore . Qt . ShortcutContext = PySide2 . QtCore . Qt . ShortcutContext . WindowShortcut ) -> int grabShortcut(self, key: PySide2.QtGui.QKeySequence, context: PySide2.QtCore.Qt.ShortcutContext = PySide2.QtCore.Qt.ShortcutContext.WindowShortcut) -> int graphicsEffect def graphicsEffect ( self ) -> PySide2 . QtWidgets . QGraphicsEffect graphicsEffect(self) -> PySide2.QtWidgets.QGraphicsEffect graphicsProxyWidget def graphicsProxyWidget ( self ) -> PySide2 . QtWidgets . QGraphicsProxyWidget graphicsProxyWidget(self) -> PySide2.QtWidgets.QGraphicsProxyWidget hasFocus def hasFocus ( self ) -> bool hasFocus(self) -> bool hasHeightForWidth def hasHeightForWidth ( self ) -> bool hasHeightForWidth(self) -> bool hasMouseTracking def hasMouseTracking ( self ) -> bool hasMouseTracking(self) -> bool hasTabletTracking def hasTabletTracking ( self ) -> bool hasTabletTracking(self) -> bool height def height ( self ) -> int height(self) -> int heightForWidth def heightForWidth ( self , arg__1 : int ) -> int heightForWidth(self, arg__1: int) -> int heightMM def heightMM ( self ) -> int heightMM(self) -> int hide def hide ( self ) -> None hide(self) -> None hideEvent def hideEvent ( self , event : PySide2 . QtGui . QHideEvent ) -> None hideEvent(self, event: PySide2.QtGui.QHideEvent) -> None iconSize def iconSize ( self ) -> PySide2 . QtCore . QSize iconSize(self) -> PySide2.QtCore.QSize iconSizeChanged def iconSizeChanged ( ... ) inherits def inherits ( self , classname : bytes ) -> bool inherits(self, classname: bytes) -> bool initPainter def initPainter ( self , painter : PySide2 . QtGui . QPainter ) -> None initPainter(self, painter: PySide2.QtGui.QPainter) -> None inputMethodEvent def inputMethodEvent ( self , event : PySide2 . QtGui . QInputMethodEvent ) -> None inputMethodEvent(self, event: PySide2.QtGui.QInputMethodEvent) -> None inputMethodHints def inputMethodHints ( self ) -> PySide2 . QtCore . Qt . InputMethodHints inputMethodHints(self) -> PySide2.QtCore.Qt.InputMethodHints inputMethodQuery def inputMethodQuery ( self , arg__1 : PySide2 . QtCore . Qt . InputMethodQuery ) -> typing . Any inputMethodQuery(self, arg__1: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any insertAction def insertAction ( self , before : PySide2 . QtWidgets . QAction , action : PySide2 . QtWidgets . QAction ) -> None insertAction(self, before: PySide2.QtWidgets.QAction, action: PySide2.QtWidgets.QAction) -> None insertActions def insertActions ( self , before : PySide2 . QtWidgets . QAction , actions : typing . Sequence [ PySide2 . QtWidgets . QAction ] ) -> None insertActions(self, before: PySide2.QtWidgets.QAction, actions: typing.Sequence[PySide2.QtWidgets.QAction]) -> None insertToolBar def insertToolBar ( self , before : PySide2 . QtWidgets . QToolBar , toolbar : PySide2 . QtWidgets . QToolBar ) -> None insertToolBar(self, before: PySide2.QtWidgets.QToolBar, toolbar: PySide2.QtWidgets.QToolBar) -> None insertToolBarBreak def insertToolBarBreak ( self , before : PySide2 . QtWidgets . QToolBar ) -> None insertToolBarBreak(self, before: PySide2.QtWidgets.QToolBar) -> None installEventFilter def installEventFilter ( self , filterObj : PySide2 . QtCore . QObject ) -> None installEventFilter(self, filterObj: PySide2.QtCore.QObject) -> None internalWinId def internalWinId ( self ) -> int internalWinId(self) -> int isActiveWindow def isActiveWindow ( self ) -> bool isActiveWindow(self) -> bool isAncestorOf def isAncestorOf ( self , child : PySide2 . QtWidgets . QWidget ) -> bool isAncestorOf(self, child: PySide2.QtWidgets.QWidget) -> bool isAnimated def isAnimated ( self ) -> bool isAnimated(self) -> bool isDockNestingEnabled def isDockNestingEnabled ( self ) -> bool isDockNestingEnabled(self) -> bool isEnabled def isEnabled ( self ) -> bool isEnabled(self) -> bool isEnabledTo def isEnabledTo ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> bool isEnabledTo(self, arg__1: PySide2.QtWidgets.QWidget) -> bool isEnabledToTLW def isEnabledToTLW ( self ) -> bool isEnabledToTLW(self) -> bool isFullScreen def isFullScreen ( self ) -> bool isFullScreen(self) -> bool isHidden def isHidden ( self ) -> bool isHidden(self) -> bool isLeftToRight def isLeftToRight ( self ) -> bool isLeftToRight(self) -> bool isMaximized def isMaximized ( self ) -> bool isMaximized(self) -> bool isMinimized def isMinimized ( self ) -> bool isMinimized(self) -> bool isModal def isModal ( self ) -> bool isModal(self) -> bool isRightToLeft def isRightToLeft ( self ) -> bool isRightToLeft(self) -> bool isSeparator def isSeparator ( self , pos : PySide2 . QtCore . QPoint ) -> bool isSeparator(self, pos: PySide2.QtCore.QPoint) -> bool isSignalConnected def isSignalConnected ( self , signal : PySide2 . QtCore . QMetaMethod ) -> bool isSignalConnected(self, signal: PySide2.QtCore.QMetaMethod) -> bool isTopLevel def isTopLevel ( self ) -> bool isTopLevel(self) -> bool isVisible def isVisible ( self ) -> bool isVisible(self) -> bool isVisibleTo def isVisibleTo ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> bool isVisibleTo(self, arg__1: PySide2.QtWidgets.QWidget) -> bool isWidgetType def isWidgetType ( self ) -> bool isWidgetType(self) -> bool isWindow def isWindow ( self ) -> bool isWindow(self) -> bool isWindowModified def isWindowModified ( self ) -> bool isWindowModified(self) -> bool isWindowType def isWindowType ( self ) -> bool isWindowType(self) -> bool keyPressEvent def keyPressEvent ( self , event : PySide2 . QtGui . QKeyEvent ) -> None keyPressEvent(self, event: PySide2.QtGui.QKeyEvent) -> None keyReleaseEvent def keyReleaseEvent ( self , event : PySide2 . QtGui . QKeyEvent ) -> None keyReleaseEvent(self, event: PySide2.QtGui.QKeyEvent) -> None killTimer def killTimer ( self , id : int ) -> None killTimer(self, id: int) -> None layout def layout ( self ) -> PySide2 . QtWidgets . QLayout layout(self) -> PySide2.QtWidgets.QLayout layoutDirection def layoutDirection ( self ) -> PySide2 . QtCore . Qt . LayoutDirection layoutDirection(self) -> PySide2.QtCore.Qt.LayoutDirection leaveEvent def leaveEvent ( self , event : PySide2 . QtCore . QEvent ) -> None leaveEvent(self, event: PySide2.QtCore.QEvent) -> None locale def locale ( self ) -> PySide2 . QtCore . QLocale locale(self) -> PySide2.QtCore.QLocale logicalDpiX def logicalDpiX ( self ) -> int logicalDpiX(self) -> int logicalDpiY def logicalDpiY ( self ) -> int logicalDpiY(self) -> int lower def lower ( self ) -> None lower(self) -> None mapFrom def mapFrom ( self , arg__1 : PySide2 . QtWidgets . QWidget , arg__2 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapFrom(self, arg__1: PySide2.QtWidgets.QWidget, arg__2: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint mapFromGlobal def mapFromGlobal ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapFromGlobal(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint mapFromParent def mapFromParent ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapFromParent(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint mapTo def mapTo ( self , arg__1 : PySide2 . QtWidgets . QWidget , arg__2 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapTo(self, arg__1: PySide2.QtWidgets.QWidget, arg__2: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint mapToGlobal def mapToGlobal ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapToGlobal(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint mapToParent def mapToParent ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapToParent(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint mask def mask ( self ) -> PySide2 . QtGui . QRegion mask(self) -> PySide2.QtGui.QRegion maximumHeight def maximumHeight ( self ) -> int maximumHeight(self) -> int maximumSize def maximumSize ( self ) -> PySide2 . QtCore . QSize maximumSize(self) -> PySide2.QtCore.QSize maximumWidth def maximumWidth ( self ) -> int maximumWidth(self) -> int menuBar def menuBar ( self ) -> PySide2 . QtWidgets . QMenuBar menuBar(self) -> PySide2.QtWidgets.QMenuBar menuWidget def menuWidget ( self ) -> PySide2 . QtWidgets . QWidget menuWidget(self) -> PySide2.QtWidgets.QWidget metaObject def metaObject ( self ) -> PySide2 . QtCore . QMetaObject metaObject(self) -> PySide2.QtCore.QMetaObject metric def metric ( self , arg__1 : PySide2 . QtGui . QPaintDevice . PaintDeviceMetric ) -> int metric(self, arg__1: PySide2.QtGui.QPaintDevice.PaintDeviceMetric) -> int minimumHeight def minimumHeight ( self ) -> int minimumHeight(self) -> int minimumSize def minimumSize ( self ) -> PySide2 . QtCore . QSize minimumSize(self) -> PySide2.QtCore.QSize minimumSizeHint def minimumSizeHint ( self ) -> PySide2 . QtCore . QSize minimumSizeHint(self) -> PySide2.QtCore.QSize minimumWidth def minimumWidth ( self ) -> int minimumWidth(self) -> int mouseDoubleClickEvent def mouseDoubleClickEvent ( self , event : PySide2 . QtGui . QMouseEvent ) -> None mouseDoubleClickEvent(self, event: PySide2.QtGui.QMouseEvent) -> None mouseMoveEvent def mouseMoveEvent ( self , event : PySide2 . QtGui . QMouseEvent ) -> None mouseMoveEvent(self, event: PySide2.QtGui.QMouseEvent) -> None mousePressEvent def mousePressEvent ( self , event : PySide2 . QtGui . QMouseEvent ) -> None mousePressEvent(self, event: PySide2.QtGui.QMouseEvent) -> None mouseReleaseEvent def mouseReleaseEvent ( self , event : PySide2 . QtGui . QMouseEvent ) -> None mouseReleaseEvent(self, event: PySide2.QtGui.QMouseEvent) -> None move def move ( ... ) move(self, arg__1: PySide2.QtCore.QPoint) -> None move(self, x: int, y: int) -> None moveEvent def moveEvent ( self , event : PySide2 . QtGui . QMoveEvent ) -> None moveEvent(self, event: PySide2.QtGui.QMoveEvent) -> None moveToThread def moveToThread ( self , thread : PySide2 . QtCore . QThread ) -> None moveToThread(self, thread: PySide2.QtCore.QThread) -> None nativeEvent def nativeEvent ( self , eventType : PySide2 . QtCore . QByteArray , message : int ) -> typing . Tuple [ bool , int ] nativeEvent(self, eventType: PySide2.QtCore.QByteArray, message: int) -> typing.Tuple[bool, int] nativeParentWidget def nativeParentWidget ( self ) -> PySide2 . QtWidgets . QWidget nativeParentWidget(self) -> PySide2.QtWidgets.QWidget nextInFocusChain def nextInFocusChain ( self ) -> PySide2 . QtWidgets . QWidget nextInFocusChain(self) -> PySide2.QtWidgets.QWidget normalGeometry def normalGeometry ( self ) -> PySide2 . QtCore . QRect normalGeometry(self) -> PySide2.QtCore.QRect objectName def objectName ( self ) -> str objectName(self) -> str objectNameChanged def objectNameChanged ( ... ) overrideWindowFlags def overrideWindowFlags ( self , type : PySide2 . QtCore . Qt . WindowFlags ) -> None overrideWindowFlags(self, type: PySide2.QtCore.Qt.WindowFlags) -> None overrideWindowState def overrideWindowState ( self , state : PySide2 . QtCore . Qt . WindowStates ) -> None overrideWindowState(self, state: PySide2.QtCore.Qt.WindowStates) -> None paintEngine def paintEngine ( self ) -> PySide2 . QtGui . QPaintEngine paintEngine(self) -> PySide2.QtGui.QPaintEngine paintEvent def paintEvent ( self , event : PySide2 . QtGui . QPaintEvent ) -> None paintEvent(self, event: PySide2.QtGui.QPaintEvent) -> None paintingActive def paintingActive ( self ) -> bool paintingActive(self) -> bool palette def palette ( self ) -> PySide2 . QtGui . QPalette palette(self) -> PySide2.QtGui.QPalette parent def parent ( self ) -> PySide2 . QtCore . QObject parent(self) -> PySide2.QtCore.QObject parentWidget def parentWidget ( self ) -> PySide2 . QtWidgets . QWidget parentWidget(self) -> PySide2.QtWidgets.QWidget physicalDpiX def physicalDpiX ( self ) -> int physicalDpiX(self) -> int physicalDpiY def physicalDpiY ( self ) -> int physicalDpiY(self) -> int pos def pos ( self ) -> PySide2 . QtCore . QPoint pos(self) -> PySide2.QtCore.QPoint previousInFocusChain def previousInFocusChain ( self ) -> PySide2 . QtWidgets . QWidget previousInFocusChain(self) -> PySide2.QtWidgets.QWidget property def property ( self , name : bytes ) -> typing . Any property(self, name: bytes) -> typing.Any raise_ def raise_ ( self ) -> None raise_(self) -> None receivers def receivers ( self , signal : bytes ) -> int receivers(self, signal: bytes) -> int rect def rect ( self ) -> PySide2 . QtCore . QRect rect(self) -> PySide2.QtCore.QRect redirected def redirected ( self , offset : PySide2 . QtCore . QPoint ) -> PySide2 . QtGui . QPaintDevice redirected(self, offset: PySide2.QtCore.QPoint) -> PySide2.QtGui.QPaintDevice releaseKeyboard def releaseKeyboard ( self ) -> None releaseKeyboard(self) -> None releaseMouse def releaseMouse ( self ) -> None releaseMouse(self) -> None releaseShortcut def releaseShortcut ( self , id : int ) -> None releaseShortcut(self, id: int) -> None removeAction def removeAction ( self , action : PySide2 . QtWidgets . QAction ) -> None removeAction(self, action: PySide2.QtWidgets.QAction) -> None removeDockWidget def removeDockWidget ( self , dockwidget : PySide2 . QtWidgets . QDockWidget ) -> None removeDockWidget(self, dockwidget: PySide2.QtWidgets.QDockWidget) -> None removeEventFilter def removeEventFilter ( self , obj : PySide2 . QtCore . QObject ) -> None removeEventFilter(self, obj: PySide2.QtCore.QObject) -> None removeToolBar def removeToolBar ( self , toolbar : PySide2 . QtWidgets . QToolBar ) -> None removeToolBar(self, toolbar: PySide2.QtWidgets.QToolBar) -> None removeToolBarBreak def removeToolBarBreak ( self , before : PySide2 . QtWidgets . QToolBar ) -> None removeToolBarBreak(self, before: PySide2.QtWidgets.QToolBar) -> None render def render ( ... ) render(self, painter: PySide2.QtGui.QPainter, targetOffset: PySide2.QtCore.QPoint, sourceRegion: PySide2.QtGui.QRegion = Default(QRegion), renderFlags: PySide2.QtWidgets.QWidget.RenderFlags = Instance(QWidget.RenderFlags(QWidget.DrawWindowBackground | QWidget.DrawChildren))) -> None render(self, target: PySide2.QtGui.QPaintDevice, targetOffset: PySide2.QtCore.QPoint = Default(QPoint), sourceRegion: PySide2.QtGui.QRegion = Default(QRegion), renderFlags: PySide2.QtWidgets.QWidget.RenderFlags = Instance(QWidget.RenderFlags(QWidget.DrawWindowBackground | QWidget.DrawChildren))) -> None repaint def repaint ( ... ) repaint(self) -> None repaint(self, arg__1: PySide2.QtCore.QRect) -> None repaint(self, arg__1: PySide2.QtGui.QRegion) -> None repaint(self, x: int, y: int, w: int, h: int) -> None resize def resize ( ... ) resize(self, arg__1: PySide2.QtCore.QSize) -> None resize(self, w: int, h: int) -> None resizeDocks def resizeDocks ( self , docks : typing . Sequence [ PySide2 . QtWidgets . QDockWidget ], sizes : typing . Sequence [ int ], orientation : PySide2 . QtCore . Qt . Orientation ) -> None resizeDocks(self, docks: typing.Sequence[PySide2.QtWidgets.QDockWidget], sizes: typing.Sequence[int], orientation: PySide2.QtCore.Qt.Orientation) -> None resizeEvent def resizeEvent ( self , event : PySide2 . QtGui . QResizeEvent ) -> None resizeEvent(self, event: PySide2.QtGui.QResizeEvent) -> None restoreDockWidget def restoreDockWidget ( self , dockwidget : PySide2 . QtWidgets . QDockWidget ) -> bool restoreDockWidget(self, dockwidget: PySide2.QtWidgets.QDockWidget) -> bool restoreGeometry def restoreGeometry ( self , geometry : PySide2 . QtCore . QByteArray ) -> bool restoreGeometry(self, geometry: PySide2.QtCore.QByteArray) -> bool restoreState def restoreState ( self , state : PySide2 . QtCore . QByteArray , version : int = 0 ) -> bool restoreState(self, state: PySide2.QtCore.QByteArray, version: int = 0) -> bool saveGeometry def saveGeometry ( self ) -> PySide2 . QtCore . QByteArray saveGeometry(self) -> PySide2.QtCore.QByteArray saveState def saveState ( self , version : int = 0 ) -> PySide2 . QtCore . QByteArray saveState(self, version: int = 0) -> PySide2.QtCore.QByteArray screen def screen ( self ) -> PySide2 . QtGui . QScreen screen(self) -> PySide2.QtGui.QScreen scroll def scroll ( ... ) scroll(self, dx: int, dy: int) -> None scroll(self, dx: int, dy: int, arg__3: PySide2.QtCore.QRect) -> None sender def sender ( self ) -> PySide2 . QtCore . QObject sender(self) -> PySide2.QtCore.QObject senderSignalIndex def senderSignalIndex ( self ) -> int senderSignalIndex(self) -> int setAcceptDrops def setAcceptDrops ( self , on : bool ) -> None setAcceptDrops(self, on: bool) -> None setAccessibleDescription def setAccessibleDescription ( self , description : str ) -> None setAccessibleDescription(self, description: str) -> None setAccessibleName def setAccessibleName ( self , name : str ) -> None setAccessibleName(self, name: str) -> None setAnimated def setAnimated ( self , enabled : bool ) -> None setAnimated(self, enabled: bool) -> None setAttribute def setAttribute ( self , arg__1 : PySide2 . QtCore . Qt . WidgetAttribute , on : bool = True ) -> None setAttribute(self, arg__1: PySide2.QtCore.Qt.WidgetAttribute, on: bool = True) -> None setAutoFillBackground def setAutoFillBackground ( self , enabled : bool ) -> None setAutoFillBackground(self, enabled: bool) -> None setBackgroundRole def setBackgroundRole ( self , arg__1 : PySide2 . QtGui . QPalette . ColorRole ) -> None setBackgroundRole(self, arg__1: PySide2.QtGui.QPalette.ColorRole) -> None setBaseSize def setBaseSize ( ... ) setBaseSize(self, arg__1: PySide2.QtCore.QSize) -> None setBaseSize(self, basew: int, baseh: int) -> None setCentralWidget def setCentralWidget ( self , widget : PySide2 . QtWidgets . QWidget ) -> None setCentralWidget(self, widget: PySide2.QtWidgets.QWidget) -> None setContentsMargins def setContentsMargins ( ... ) setContentsMargins(self, left: int, top: int, right: int, bottom: int) -> None setContentsMargins(self, margins: PySide2.QtCore.QMargins) -> None setContextMenuPolicy def setContextMenuPolicy ( self , policy : PySide2 . QtCore . Qt . ContextMenuPolicy ) -> None setContextMenuPolicy(self, policy: PySide2.QtCore.Qt.ContextMenuPolicy) -> None setCorner def setCorner ( self , corner : PySide2 . QtCore . Qt . Corner , area : PySide2 . QtCore . Qt . DockWidgetArea ) -> None setCorner(self, corner: PySide2.QtCore.Qt.Corner, area: PySide2.QtCore.Qt.DockWidgetArea) -> None setCursor def setCursor ( self , arg__1 : PySide2 . QtGui . QCursor ) -> None setCursor(self, arg__1: PySide2.QtGui.QCursor) -> None setDisabled def setDisabled ( self , arg__1 : bool ) -> None setDisabled(self, arg__1: bool) -> None setDockNestingEnabled def setDockNestingEnabled ( self , enabled : bool ) -> None setDockNestingEnabled(self, enabled: bool) -> None setDockOptions def setDockOptions ( self , options : PySide2 . QtWidgets . QMainWindow . DockOptions ) -> None setDockOptions(self, options: PySide2.QtWidgets.QMainWindow.DockOptions) -> None setDocumentMode def setDocumentMode ( self , enabled : bool ) -> None setDocumentMode(self, enabled: bool) -> None setEnabled def setEnabled ( self , arg__1 : bool ) -> None setEnabled(self, arg__1: bool) -> None setFixedHeight def setFixedHeight ( self , h : int ) -> None setFixedHeight(self, h: int) -> None setFixedSize def setFixedSize ( ... ) setFixedSize(self, arg__1: PySide2.QtCore.QSize) -> None setFixedSize(self, w: int, h: int) -> None setFixedWidth def setFixedWidth ( self , w : int ) -> None setFixedWidth(self, w: int) -> None setFocus def setFocus ( ... ) setFocus(self) -> None setFocus(self, reason: PySide2.QtCore.Qt.FocusReason) -> None setFocusPolicy def setFocusPolicy ( self , policy : PySide2 . QtCore . Qt . FocusPolicy ) -> None setFocusPolicy(self, policy: PySide2.QtCore.Qt.FocusPolicy) -> None setFocusProxy def setFocusProxy ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> None setFocusProxy(self, arg__1: PySide2.QtWidgets.QWidget) -> None setFont def setFont ( self , arg__1 : PySide2 . QtGui . QFont ) -> None setFont(self, arg__1: PySide2.QtGui.QFont) -> None setForegroundRole def setForegroundRole ( self , arg__1 : PySide2 . QtGui . QPalette . ColorRole ) -> None setForegroundRole(self, arg__1: PySide2.QtGui.QPalette.ColorRole) -> None setGeometry def setGeometry ( ... ) setGeometry(self, arg__1: PySide2.QtCore.QRect) -> None setGeometry(self, x: int, y: int, w: int, h: int) -> None setGraphicsEffect def setGraphicsEffect ( self , effect : PySide2 . QtWidgets . QGraphicsEffect ) -> None setGraphicsEffect(self, effect: PySide2.QtWidgets.QGraphicsEffect) -> None setHidden def setHidden ( self , hidden : bool ) -> None setHidden(self, hidden: bool) -> None setIconSize def setIconSize ( self , iconSize : PySide2 . QtCore . QSize ) -> None setIconSize(self, iconSize: PySide2.QtCore.QSize) -> None setInputMethodHints def setInputMethodHints ( self , hints : PySide2 . QtCore . Qt . InputMethodHints ) -> None setInputMethodHints(self, hints: PySide2.QtCore.Qt.InputMethodHints) -> None setLayout def setLayout ( self , arg__1 : PySide2 . QtWidgets . QLayout ) -> None setLayout(self, arg__1: PySide2.QtWidgets.QLayout) -> None setLayoutDirection def setLayoutDirection ( self , direction : PySide2 . QtCore . Qt . LayoutDirection ) -> None setLayoutDirection(self, direction: PySide2.QtCore.Qt.LayoutDirection) -> None setLocale def setLocale ( self , locale : PySide2 . QtCore . QLocale ) -> None setLocale(self, locale: PySide2.QtCore.QLocale) -> None setMask def setMask ( ... ) setMask(self, arg__1: PySide2.QtGui.QBitmap) -> None setMask(self, arg__1: PySide2.QtGui.QRegion) -> None setMaximumHeight def setMaximumHeight ( self , maxh : int ) -> None setMaximumHeight(self, maxh: int) -> None setMaximumSize def setMaximumSize ( ... ) setMaximumSize(self, arg__1: PySide2.QtCore.QSize) -> None setMaximumSize(self, maxw: int, maxh: int) -> None setMaximumWidth def setMaximumWidth ( self , maxw : int ) -> None setMaximumWidth(self, maxw: int) -> None setMenuBar def setMenuBar ( self , menubar : PySide2 . QtWidgets . QMenuBar ) -> None setMenuBar(self, menubar: PySide2.QtWidgets.QMenuBar) -> None setMenuWidget def setMenuWidget ( self , menubar : PySide2 . QtWidgets . QWidget ) -> None setMenuWidget(self, menubar: PySide2.QtWidgets.QWidget) -> None setMinimumHeight def setMinimumHeight ( self , minh : int ) -> None setMinimumHeight(self, minh: int) -> None setMinimumSize def setMinimumSize ( ... ) setMinimumSize(self, arg__1: PySide2.QtCore.QSize) -> None setMinimumSize(self, minw: int, minh: int) -> None setMinimumWidth def setMinimumWidth ( self , minw : int ) -> None setMinimumWidth(self, minw: int) -> None setMouseTracking def setMouseTracking ( self , enable : bool ) -> None setMouseTracking(self, enable: bool) -> None setObjectName def setObjectName ( self , name : str ) -> None setObjectName(self, name: str) -> None setPalette def setPalette ( self , arg__1 : PySide2 . QtGui . QPalette ) -> None setPalette(self, arg__1: PySide2.QtGui.QPalette) -> None setParent def setParent ( ... ) setParent(self, parent: PySide2.QtCore.QObject) -> None setParent(self, parent: PySide2.QtWidgets.QWidget) -> None setParent(self, parent: PySide2.QtWidgets.QWidget, f: PySide2.QtCore.Qt.WindowFlags) -> None setProperty def setProperty ( self , name : bytes , value : typing . Any ) -> bool setProperty(self, name: bytes, value: typing.Any) -> bool setShortcutAutoRepeat def setShortcutAutoRepeat ( self , id : int , enable : bool = True ) -> None setShortcutAutoRepeat(self, id: int, enable: bool = True) -> None setShortcutEnabled def setShortcutEnabled ( self , id : int , enable : bool = True ) -> None setShortcutEnabled(self, id: int, enable: bool = True) -> None setSizeIncrement def setSizeIncrement ( ... ) setSizeIncrement(self, arg__1: PySide2.QtCore.QSize) -> None setSizeIncrement(self, w: int, h: int) -> None setSizePolicy def setSizePolicy ( ... ) setSizePolicy(self, arg__1: PySide2.QtWidgets.QSizePolicy) -> None setSizePolicy(self, horizontal: PySide2.QtWidgets.QSizePolicy.Policy, vertical: PySide2.QtWidgets.QSizePolicy.Policy) -> None setStatusBar def setStatusBar ( self , statusbar : PySide2 . QtWidgets . QStatusBar ) -> None setStatusBar(self, statusbar: PySide2.QtWidgets.QStatusBar) -> None setStatusTip def setStatusTip ( self , arg__1 : str ) -> None setStatusTip(self, arg__1: str) -> None setStyle def setStyle ( self , arg__1 : PySide2 . QtWidgets . QStyle ) -> None setStyle(self, arg__1: PySide2.QtWidgets.QStyle) -> None setStyleSheet def setStyleSheet ( self , styleSheet : str ) -> None setStyleSheet(self, styleSheet: str) -> None setTabPosition def setTabPosition ( self , areas : PySide2 . QtCore . Qt . DockWidgetAreas , tabPosition : PySide2 . QtWidgets . QTabWidget . TabPosition ) -> None setTabPosition(self, areas: PySide2.QtCore.Qt.DockWidgetAreas, tabPosition: PySide2.QtWidgets.QTabWidget.TabPosition) -> None setTabShape def setTabShape ( self , tabShape : PySide2 . QtWidgets . QTabWidget . TabShape ) -> None setTabShape(self, tabShape: PySide2.QtWidgets.QTabWidget.TabShape) -> None setTabletTracking def setTabletTracking ( self , enable : bool ) -> None setTabletTracking(self, enable: bool) -> None setToolButtonStyle def setToolButtonStyle ( self , toolButtonStyle : PySide2 . QtCore . Qt . ToolButtonStyle ) -> None setToolButtonStyle(self, toolButtonStyle: PySide2.QtCore.Qt.ToolButtonStyle) -> None setToolTip def setToolTip ( self , arg__1 : str ) -> None setToolTip(self, arg__1: str) -> None setToolTipDuration def setToolTipDuration ( self , msec : int ) -> None setToolTipDuration(self, msec: int) -> None setUnifiedTitleAndToolBarOnMac def setUnifiedTitleAndToolBarOnMac ( self , set : bool ) -> None setUnifiedTitleAndToolBarOnMac(self, set: bool) -> None setUpdatesEnabled def setUpdatesEnabled ( self , enable : bool ) -> None setUpdatesEnabled(self, enable: bool) -> None setVisible def setVisible ( self , visible : bool ) -> None setVisible(self, visible: bool) -> None setWhatsThis def setWhatsThis ( self , arg__1 : str ) -> None setWhatsThis(self, arg__1: str) -> None setWindowFilePath def setWindowFilePath ( self , filePath : str ) -> None setWindowFilePath(self, filePath: str) -> None setWindowFlag def setWindowFlag ( self , arg__1 : PySide2 . QtCore . Qt . WindowType , on : bool = True ) -> None setWindowFlag(self, arg__1: PySide2.QtCore.Qt.WindowType, on: bool = True) -> None setWindowFlags def setWindowFlags ( self , type : PySide2 . QtCore . Qt . WindowFlags ) -> None setWindowFlags(self, type: PySide2.QtCore.Qt.WindowFlags) -> None setWindowIcon def setWindowIcon ( self , icon : PySide2 . QtGui . QIcon ) -> None setWindowIcon(self, icon: PySide2.QtGui.QIcon) -> None setWindowIconText def setWindowIconText ( self , arg__1 : str ) -> None setWindowIconText(self, arg__1: str) -> None setWindowModality def setWindowModality ( self , windowModality : PySide2 . QtCore . Qt . WindowModality ) -> None setWindowModality(self, windowModality: PySide2.QtCore.Qt.WindowModality) -> None setWindowModified def setWindowModified ( self , arg__1 : bool ) -> None setWindowModified(self, arg__1: bool) -> None setWindowOpacity def setWindowOpacity ( self , level : float ) -> None setWindowOpacity(self, level: float) -> None setWindowRole def setWindowRole ( self , arg__1 : str ) -> None setWindowRole(self, arg__1: str) -> None setWindowState def setWindowState ( self , state : PySide2 . QtCore . Qt . WindowStates ) -> None setWindowState(self, state: PySide2.QtCore.Qt.WindowStates) -> None setWindowTitle def setWindowTitle ( self , arg__1 : str ) -> None setWindowTitle(self, arg__1: str) -> None sharedPainter def sharedPainter ( self ) -> PySide2 . QtGui . QPainter sharedPainter(self) -> PySide2.QtGui.QPainter show def show ( self ) -> None show(self) -> None showEvent def showEvent ( self , event : PySide2 . QtGui . QShowEvent ) -> None showEvent(self, event: PySide2.QtGui.QShowEvent) -> None showFullScreen def showFullScreen ( self ) -> None showFullScreen(self) -> None showMaximized def showMaximized ( self ) -> None showMaximized(self) -> None showMinimized def showMinimized ( self ) -> None showMinimized(self) -> None showNormal def showNormal ( self ) -> None showNormal(self) -> None signalsBlocked def signalsBlocked ( self ) -> bool signalsBlocked(self) -> bool size def size ( self ) -> PySide2 . QtCore . QSize size(self) -> PySide2.QtCore.QSize sizeHint def sizeHint ( self ) -> PySide2 . QtCore . QSize sizeHint(self) -> PySide2.QtCore.QSize sizeIncrement def sizeIncrement ( self ) -> PySide2 . QtCore . QSize sizeIncrement(self) -> PySide2.QtCore.QSize sizePolicy def sizePolicy ( self ) -> PySide2 . QtWidgets . QSizePolicy sizePolicy(self) -> PySide2.QtWidgets.QSizePolicy splitDockWidget def splitDockWidget ( self , after : PySide2 . QtWidgets . QDockWidget , dockwidget : PySide2 . QtWidgets . QDockWidget , orientation : PySide2 . QtCore . Qt . Orientation ) -> None splitDockWidget(self, after: PySide2.QtWidgets.QDockWidget, dockwidget: PySide2.QtWidgets.QDockWidget, orientation: PySide2.QtCore.Qt.Orientation) -> None stackUnder def stackUnder ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> None stackUnder(self, arg__1: PySide2.QtWidgets.QWidget) -> None startTimer def startTimer ( self , interval : int , timerType : PySide2 . QtCore . Qt . TimerType = PySide2 . QtCore . Qt . TimerType . CoarseTimer ) -> int startTimer(self, interval: int, timerType: PySide2.QtCore.Qt.TimerType = PySide2.QtCore.Qt.TimerType.CoarseTimer) -> int statusBar def statusBar ( self ) -> PySide2 . QtWidgets . QStatusBar statusBar(self) -> PySide2.QtWidgets.QStatusBar statusTip def statusTip ( self ) -> str statusTip(self) -> str style def style ( self ) -> PySide2 . QtWidgets . QStyle style(self) -> PySide2.QtWidgets.QStyle styleSheet def styleSheet ( self ) -> str styleSheet(self) -> str systray_clicked def systray_clicked ( self , _status = None ) -> None View Source def systray_clicked ( self , _status = None ) -> None : self . hide () if self . window_shown : self . window_shown = False return self . show () self . activateWindow () getattr ( self , \"raise\" )() # noqa : B009 - Can 't call as self.raise() due to syntax error. self.window_shown = True tabPosition def tabPosition ( self , area : PySide2 . QtCore . Qt . DockWidgetArea ) -> PySide2 . QtWidgets . QTabWidget . TabPosition tabPosition(self, area: PySide2.QtCore.Qt.DockWidgetArea) -> PySide2.QtWidgets.QTabWidget.TabPosition tabShape def tabShape ( self ) -> PySide2 . QtWidgets . QTabWidget . TabShape tabShape(self) -> PySide2.QtWidgets.QTabWidget.TabShape tabifiedDockWidgetActivated def tabifiedDockWidgetActivated ( ... ) tabifiedDockWidgets def tabifiedDockWidgets ( self , dockwidget : PySide2 . QtWidgets . QDockWidget ) -> typing . List [ PySide2 . QtWidgets . QDockWidget ] tabifiedDockWidgets(self, dockwidget: PySide2.QtWidgets.QDockWidget) -> typing.List[PySide2.QtWidgets.QDockWidget] tabifyDockWidget def tabifyDockWidget ( self , first : PySide2 . QtWidgets . QDockWidget , second : PySide2 . QtWidgets . QDockWidget ) -> None tabifyDockWidget(self, first: PySide2.QtWidgets.QDockWidget, second: PySide2.QtWidgets.QDockWidget) -> None tabletEvent def tabletEvent ( self , event : PySide2 . QtGui . QTabletEvent ) -> None tabletEvent(self, event: PySide2.QtGui.QTabletEvent) -> None takeCentralWidget def takeCentralWidget ( self ) -> PySide2 . QtWidgets . QWidget takeCentralWidget(self) -> PySide2.QtWidgets.QWidget testAttribute def testAttribute ( self , arg__1 : PySide2 . QtCore . Qt . WidgetAttribute ) -> bool testAttribute(self, arg__1: PySide2.QtCore.Qt.WidgetAttribute) -> bool thread def thread ( self ) -> PySide2 . QtCore . QThread thread(self) -> PySide2.QtCore.QThread timerEvent def timerEvent ( self , event : PySide2 . QtCore . QTimerEvent ) -> None timerEvent(self, event: PySide2.QtCore.QTimerEvent) -> None toolBarArea def toolBarArea ( self , toolbar : PySide2 . QtWidgets . QToolBar ) -> PySide2 . QtCore . Qt . ToolBarArea toolBarArea(self, toolbar: PySide2.QtWidgets.QToolBar) -> PySide2.QtCore.Qt.ToolBarArea toolBarBreak def toolBarBreak ( self , toolbar : PySide2 . QtWidgets . QToolBar ) -> bool toolBarBreak(self, toolbar: PySide2.QtWidgets.QToolBar) -> bool toolButtonStyle def toolButtonStyle ( self ) -> PySide2 . QtCore . Qt . ToolButtonStyle toolButtonStyle(self) -> PySide2.QtCore.Qt.ToolButtonStyle toolButtonStyleChanged def toolButtonStyleChanged ( ... ) toolTip def toolTip ( self ) -> str toolTip(self) -> str toolTipDuration def toolTipDuration ( self ) -> int toolTipDuration(self) -> int topLevelWidget def topLevelWidget ( self ) -> PySide2 . QtWidgets . QWidget topLevelWidget(self) -> PySide2.QtWidgets.QWidget tr def tr ( self , arg__1 : bytes , arg__2 : bytes = b '' , arg__3 : int = - 1 ) -> str tr(self, arg__1: bytes, arg__2: bytes = b'', arg__3: int = -1) -> str underMouse def underMouse ( self ) -> bool underMouse(self) -> bool ungrabGesture def ungrabGesture ( self , type : PySide2 . QtCore . Qt . GestureType ) -> None ungrabGesture(self, type: PySide2.QtCore.Qt.GestureType) -> None unifiedTitleAndToolBarOnMac def unifiedTitleAndToolBarOnMac ( self ) -> bool unifiedTitleAndToolBarOnMac(self) -> bool unsetCursor def unsetCursor ( self ) -> None unsetCursor(self) -> None unsetLayoutDirection def unsetLayoutDirection ( self ) -> None unsetLayoutDirection(self) -> None unsetLocale def unsetLocale ( self ) -> None unsetLocale(self) -> None update def update ( ... ) update(self) -> None update(self, arg__1: PySide2.QtCore.QRect) -> None update(self, arg__1: PySide2.QtGui.QRegion) -> None update(self, x: int, y: int, w: int, h: int) -> None updateGeometry def updateGeometry ( self ) -> None updateGeometry(self) -> None updateMicroFocus def updateMicroFocus ( self ) -> None updateMicroFocus(self) -> None updatesEnabled def updatesEnabled ( self ) -> bool updatesEnabled(self) -> bool visibleRegion def visibleRegion ( self ) -> PySide2 . QtGui . QRegion visibleRegion(self) -> PySide2.QtGui.QRegion whatsThis def whatsThis ( self ) -> str whatsThis(self) -> str wheelEvent def wheelEvent ( self , event : PySide2 . QtGui . QWheelEvent ) -> None wheelEvent(self, event: PySide2.QtGui.QWheelEvent) -> None width def width ( self ) -> int width(self) -> int widthMM def widthMM ( self ) -> int widthMM(self) -> int winId def winId ( self ) -> int winId(self) -> int window def window ( self ) -> PySide2 . QtWidgets . QWidget window(self) -> PySide2.QtWidgets.QWidget windowFilePath def windowFilePath ( self ) -> str windowFilePath(self) -> str windowFlags def windowFlags ( self ) -> PySide2 . QtCore . Qt . WindowFlags windowFlags(self) -> PySide2.QtCore.Qt.WindowFlags windowHandle def windowHandle ( self ) -> PySide2 . QtGui . QWindow windowHandle(self) -> PySide2.QtGui.QWindow windowIcon def windowIcon ( self ) -> PySide2 . QtGui . QIcon windowIcon(self) -> PySide2.QtGui.QIcon windowIconChanged def windowIconChanged ( ... ) windowIconText def windowIconText ( self ) -> str windowIconText(self) -> str windowIconTextChanged def windowIconTextChanged ( ... ) windowModality def windowModality ( self ) -> PySide2 . QtCore . Qt . WindowModality windowModality(self) -> PySide2.QtCore.Qt.WindowModality windowOpacity def windowOpacity ( self ) -> float windowOpacity(self) -> float windowRole def windowRole ( self ) -> str windowRole(self) -> str windowState def windowState ( self ) -> PySide2 . QtCore . Qt . WindowStates windowState(self) -> PySide2.QtCore.Qt.WindowStates windowTitle def windowTitle ( self ) -> str windowTitle(self) -> str windowTitleChanged def windowTitleChanged ( ... ) windowType def windowType ( self ) -> PySide2 . QtCore . Qt . WindowType windowType(self) -> PySide2.QtCore.Qt.WindowType x def x ( self ) -> int x(self) -> int y def y ( self ) -> int y(self) -> int","title":"Gui"},{"location":"reference/streamdeck_ui/gui/#module-streamdeck_uigui","text":"Defines the QT powered interface for configuring Stream Decks None View Source \"\"\"Defines the QT powered interface for configuring Stream Decks\"\"\" import os import sys import time from functools import partial from PySide2 import QtWidgets from PySide2.QtCore import QMimeData , QSize , Qt , QTimer from PySide2.QtGui import QDrag , QIcon from PySide2.QtWidgets import ( QAction , QApplication , QFileDialog , QMainWindow , QMenu , QMessageBox , QSizePolicy , QSystemTrayIcon , ) from streamdeck_ui import api from streamdeck_ui.config import LOGO from streamdeck_ui.ui_main import Ui_MainWindow BUTTON_STYLE = \"\"\" QToolButton{background-color:black; color:white;} QToolButton:checked{background-color:darkGray; color:black;} QToolButton:focus{border:none; } \"\"\" BUTTON_DRAG_STYLE = \"\"\" QToolButton{background-color:white; color:black;} QToolButton:checked{background-color:darkGray; color:black;} QToolButton:focus{border:none; } \"\"\" selected_button : QtWidgets . QToolButton text_timer = None class DraggableButton ( QtWidgets . QToolButton ): \"\"\"A QToolButton that supports drag and drop and swaps the button properties on drop \"\"\" def __init__ ( self , parent , ui ): super ( DraggableButton , self ) . __init__ ( parent ) self . setAcceptDrops ( True ) self . ui = ui def mouseMoveEvent ( self , e ): # noqa: N802 - Part of QT signature. if e . buttons () != Qt . LeftButton : return mimedata = QMimeData () drag = QDrag ( self ) drag . setMimeData ( mimedata ) drag . exec_ ( Qt . MoveAction ) def dropEvent ( self , e ): # noqa: N802 - Part of QT signature. global selected_button self . setStyleSheet ( BUTTON_STYLE ) # Ignore drag and drop on yourself if e . source () . index == self . index : return api . swap_buttons ( _deck_id ( self . ui ), _page ( self . ui ), e . source () . index , self . index ) # In the case that we've dragged the currently selected button, we have to # check the target button instead so it appears that it followed the drag/drop if e . source () . isChecked (): e . source () . setChecked ( False ) self . setChecked ( True ) selected_button = self redraw_buttons ( self . ui ) def dragEnterEvent ( self , e ): # noqa: N802 - Part of QT signature. if type ( self ) is DraggableButton : e . setAccepted ( True ) self . setStyleSheet ( BUTTON_DRAG_STYLE ) else : e . setAccepted ( False ) def dragLeaveEvent ( self , e ): # noqa: N802 - Part of QT signature. self . setStyleSheet ( BUTTON_STYLE ) def _deck_id ( ui ) -> str : return ui . device_list . itemData ( ui . device_list . currentIndex ()) def _page ( ui ) -> int : return ui . pages . currentIndex () def update_button_text ( ui , text : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_text ( deck_id , _page ( ui ), selected_button . index , text ) redraw_buttons ( ui ) def update_button_command ( ui , command : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_command ( deck_id , _page ( ui ), selected_button . index , command ) def update_button_keys ( ui , keys : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_keys ( deck_id , _page ( ui ), selected_button . index , keys ) def update_button_write ( ui ) -> None : deck_id = _deck_id ( ui ) api . set_button_write ( deck_id , _page ( ui ), selected_button . index , ui . write . toPlainText ()) def update_change_brightness ( ui , amount : int ) -> None : deck_id = _deck_id ( ui ) api . set_button_change_brightness ( deck_id , _page ( ui ), selected_button . index , amount ) def update_switch_page ( ui , page : int ) -> None : deck_id = _deck_id ( ui ) api . set_button_switch_page ( deck_id , _page ( ui ), selected_button . index , page ) def _highlight_first_button ( ui ) -> None : button = ui . pages . currentWidget () . findChildren ( QtWidgets . QToolButton )[ 0 ] button . setChecked ( False ) button . click () def change_page ( ui , page : int ) -> None : api . set_page ( _deck_id ( ui ), page ) redraw_buttons ( ui ) _highlight_first_button ( ui ) def select_image ( window ) -> None : deck_id = _deck_id ( window . ui ) image = api . get_button_icon ( deck_id , _page ( window . ui ), selected_button . index ) if not image : image = os . path . expanduser ( \"~\" ) file_name = QFileDialog . getOpenFileName ( window , \"Open Image\" , image , \"Image Files (*.png *.jpg *.bmp)\" )[ 0 ] if file_name : deck_id = _deck_id ( window . ui ) api . set_button_icon ( deck_id , _page ( window . ui ), selected_button . index , file_name ) redraw_buttons ( window . ui ) def remove_image ( window ) -> None : deck_id = _deck_id ( window . ui ) image = api . get_button_icon ( deck_id , _page ( window . ui ), selected_button . index ) if image : confirm = QMessageBox ( window ) confirm . setWindowTitle ( \"Remove image\" ) confirm . setText ( \"Are you sure you want to remove the image for this button?\" ) confirm . setStandardButtons ( QMessageBox . Yes | QMessageBox . No ) confirm . setIcon ( QMessageBox . Question ) button = confirm . exec_ () if button == QMessageBox . Yes : api . set_button_icon ( deck_id , _page ( window . ui ), selected_button . index , \"\" ) redraw_buttons ( window . ui ) def redraw_buttons ( ui ) -> None : deck_id = _deck_id ( ui ) current_tab = ui . pages . currentWidget () buttons = current_tab . findChildren ( QtWidgets . QToolButton ) for button in buttons : button . setText ( api . get_button_text ( deck_id , _page ( ui ), button . index )) button . setIcon ( QIcon ( api . get_button_icon ( deck_id , _page ( ui ), button . index ))) def set_brightness ( ui , value : int ) -> None : deck_id = _deck_id ( ui ) api . set_brightness ( deck_id , value ) def button_clicked ( ui , clicked_button , buttons ) -> None : global selected_button selected_button = clicked_button for button in buttons : if button == clicked_button : continue button . setChecked ( False ) deck_id = _deck_id ( ui ) button_id = selected_button . index ui . text . setText ( api . get_button_text ( deck_id , _page ( ui ), button_id )) ui . command . setText ( api . get_button_command ( deck_id , _page ( ui ), button_id )) ui . keys . setText ( api . get_button_keys ( deck_id , _page ( ui ), button_id )) ui . write . setPlainText ( api . get_button_write ( deck_id , _page ( ui ), button_id )) ui . change_brightness . setValue ( api . get_button_change_brightness ( deck_id , _page ( ui ), button_id )) ui . switch_page . setValue ( api . get_button_switch_page ( deck_id , _page ( ui ), button_id )) def build_buttons ( ui , tab ) -> None : deck_id = _deck_id ( ui ) deck = api . get_deck ( deck_id ) if hasattr ( tab , \"deck_buttons\" ): tab . deck_buttons . hide () tab . deck_buttons . deleteLater () base_widget = QtWidgets . QWidget ( tab ) tab . children ()[ 0 ] . addWidget ( base_widget ) tab . deck_buttons = base_widget row_layout = QtWidgets . QVBoxLayout ( base_widget ) index = 0 buttons = [] for _row in range ( deck [ \"layout\" ][ 0 ]): # type: ignore column_layout = QtWidgets . QHBoxLayout () row_layout . addLayout ( column_layout ) for _column in range ( deck [ \"layout\" ][ 1 ]): # type: ignore button = DraggableButton ( base_widget , ui ) button . setCheckable ( True ) button . index = index button . setSizePolicy ( QSizePolicy . MinimumExpanding , QSizePolicy . MinimumExpanding ) button . setToolButtonStyle ( Qt . ToolButtonTextUnderIcon ) button . setIconSize ( QSize ( 100 , 100 )) button . setStyleSheet ( BUTTON_STYLE ) buttons . append ( button ) column_layout . addWidget ( button ) index += 1 for button in buttons : button . clicked . connect ( lambda button = button , buttons = buttons : button_clicked ( ui , button , buttons ) ) def export_config ( window ) -> None : file_name = QFileDialog . getSaveFileName ( window , \"Export Config\" , os . path . expanduser ( \"~/streamdeck_ui_export.json\" ), \"JSON (*.json)\" )[ 0 ] if not file_name : return api . export_config ( file_name ) def import_config ( window ) -> None : file_name = QFileDialog . getOpenFileName ( window , \"Import Config\" , os . path . expanduser ( \"~\" ), \"Config Files (*.json)\" )[ 0 ] if not file_name : return api . import_config ( file_name ) redraw_buttons ( window . ui ) def sync ( ui ) -> None : api . ensure_decks_connected () ui . brightness . setValue ( api . get_brightness ( _deck_id ( ui ))) ui . pages . setCurrentIndex ( api . get_page ( _deck_id ( ui ))) def build_device ( ui , _device_index = None ) -> None : for page_id in range ( ui . pages . count ()): page = ui . pages . widget ( page_id ) page . setStyleSheet ( \"background-color: black\" ) build_buttons ( ui , page ) # Set the active page for this device ui . pages . setCurrentIndex ( api . get_page ( _deck_id ( ui ))) # Draw the buttons for the active page redraw_buttons ( ui ) sync ( ui ) _highlight_first_button ( ui ) class MainWindow ( QMainWindow ): def __init__ ( self ): super ( MainWindow , self ) . __init__ () self . ui = Ui_MainWindow () self . ui . setupUi ( self ) self . window_shown : bool = True def closeEvent ( self , event ) -> None : # noqa: N802 - Part of QT signature. self . window_shown = False self . hide () event . ignore () def systray_clicked ( self , _status = None ) -> None : self . hide () if self . window_shown : self . window_shown = False return self . show () self . activateWindow () getattr ( self , \"raise\" )() # noqa: B009 - Can't call as self.raise() due to syntax error. self . window_shown = True def queue_text_change ( ui , text : str ) -> None : global text_timer if text_timer : text_timer . stop () text_timer = QTimer () text_timer . setSingleShot ( True ) text_timer . timeout . connect ( partial ( update_button_text , ui , text )) text_timer . start ( 500 ) def start ( _exit : bool = False ) -> None : show_ui = True if \"-h\" in sys . argv or \"--help\" in sys . argv : print ( f \"Usage: { os . path . basename ( sys . argv [ 0 ]) } \" ) print ( \"Flags:\" ) print ( \" -h, --help \\t Show this message\" ) print ( \" -n, --no-ui \\t Run the program without showing a UI\" ) return elif \"-n\" in sys . argv or \"--no-ui\" in sys . argv : show_ui = False app = QApplication ( sys . argv ) logo = QIcon ( LOGO ) main_window = MainWindow () ui = main_window . ui main_window . setWindowIcon ( logo ) tray = QSystemTrayIcon ( logo , app ) tray . activated . connect ( main_window . systray_clicked ) menu = QMenu () action_exit = QAction ( \"Exit\" ) action_exit . triggered . connect ( app . exit ) menu . addAction ( action_exit ) tray . setContextMenu ( menu ) ui . text . textChanged . connect ( partial ( queue_text_change , ui )) ui . command . textChanged . connect ( partial ( update_button_command , ui )) ui . keys . textChanged . connect ( partial ( update_button_keys , ui )) ui . write . textChanged . connect ( partial ( update_button_write , ui )) ui . change_brightness . valueChanged . connect ( partial ( update_change_brightness , ui )) ui . switch_page . valueChanged . connect ( partial ( update_switch_page , ui )) ui . imageButton . clicked . connect ( partial ( select_image , main_window )) ui . brightness . valueChanged . connect ( partial ( set_brightness , ui )) ui . removeButton . clicked . connect ( partial ( remove_image , main_window )) items = api . open_decks () . items () if len ( items ) == 0 : print ( \"Waiting for Stream Deck(s)...\" ) while len ( items ) == 0 : time . sleep ( 3 ) items = api . open_decks () . items () for deck_id , deck in items : ui . device_list . addItem ( f \" { deck [ 'type' ] } - { deck_id } \" , userData = deck_id ) build_device ( ui ) ui . device_list . currentIndexChanged . connect ( partial ( build_device , ui )) ui . pages . currentChanged . connect ( partial ( change_page , ui )) ui . actionExport . triggered . connect ( partial ( export_config , main_window )) ui . actionImport . triggered . connect ( partial ( import_config , main_window )) ui . actionExit . triggered . connect ( app . exit ) timer = QTimer () timer . timeout . connect ( partial ( sync , ui )) timer . start ( 1000 ) api . render () tray . show () if show_ui : main_window . show () if _exit : return else : app . exec_ () api . close_decks () sys . exit () if __name__ == \"__main__\" : start ()","title":"Module streamdeck_ui.gui"},{"location":"reference/streamdeck_ui/gui/#variables","text":"BUTTON_DRAG_STYLE BUTTON_STYLE LOGO text_timer","title":"Variables"},{"location":"reference/streamdeck_ui/gui/#functions","text":"","title":"Functions"},{"location":"reference/streamdeck_ui/gui/#build_buttons","text":"def build_buttons ( ui , tab ) -> None View Source def build_buttons ( ui , tab ) -> None : deck_id = _deck_id ( ui ) deck = api . get_deck ( deck_id ) if hasattr ( tab , \"deck_buttons\" ) : tab . deck_buttons . hide () tab . deck_buttons . deleteLater () base_widget = QtWidgets . QWidget ( tab ) tab . children ()[ 0 ]. addWidget ( base_widget ) tab . deck_buttons = base_widget row_layout = QtWidgets . QVBoxLayout ( base_widget ) index = 0 buttons = [] for _row in range ( deck [ \"layout\" ][ 0 ]) : # type : ignore column_layout = QtWidgets . QHBoxLayout () row_layout . addLayout ( column_layout ) for _column in range ( deck [ \"layout\" ][ 1 ]) : # type : ignore button = DraggableButton ( base_widget , ui ) button . setCheckable ( True ) button . index = index button . setSizePolicy ( QSizePolicy . MinimumExpanding , QSizePolicy . MinimumExpanding ) button . setToolButtonStyle ( Qt . ToolButtonTextUnderIcon ) button . setIconSize ( QSize ( 100 , 100 )) button . setStyleSheet ( BUTTON_STYLE ) buttons . append ( button ) column_layout . addWidget ( button ) index += 1 for button in buttons : button . clicked . connect ( lambda button = button , buttons = buttons : button_clicked ( ui , button , buttons ) )","title":"build_buttons"},{"location":"reference/streamdeck_ui/gui/#build_device","text":"def build_device ( ui , _device_index = None ) -> None View Source def build_device ( ui , _device_index = None ) -> None : for page_id in range ( ui . pages . count ()) : page = ui . pages . widget ( page_id ) page . setStyleSheet ( \"background-color: black\" ) build_buttons ( ui , page ) # Set the active page for this device ui . pages . setCurrentIndex ( api . get_page ( _deck_id ( ui ))) # Draw the buttons for the active page redraw_buttons ( ui ) sync ( ui ) _highlight_first_button ( ui )","title":"build_device"},{"location":"reference/streamdeck_ui/gui/#button_clicked","text":"def button_clicked ( ui , clicked_button , buttons ) -> None View Source def button_clicked ( ui , clicked_button , buttons ) -> None : global selected_button selected_button = clicked_button for button in buttons : if button == clicked_button : continue button . setChecked ( False ) deck_id = _deck_id ( ui ) button_id = selected_button . index ui . text . setText ( api . get_button_text ( deck_id , _page ( ui ), button_id )) ui . command . setText ( api . get_button_command ( deck_id , _page ( ui ), button_id )) ui . keys . setText ( api . get_button_keys ( deck_id , _page ( ui ), button_id )) ui . write . setPlainText ( api . get_button_write ( deck_id , _page ( ui ), button_id )) ui . change_brightness . setValue ( api . get_button_change_brightness ( deck_id , _page ( ui ), button_id )) ui . switch_page . setValue ( api . get_button_switch_page ( deck_id , _page ( ui ), button_id ))","title":"button_clicked"},{"location":"reference/streamdeck_ui/gui/#change_page","text":"def change_page ( ui , page : int ) -> None View Source def change_page ( ui , page : int ) -> None : api . set_page ( _deck_id ( ui ), page ) redraw_buttons ( ui ) _highlight_first_button ( ui )","title":"change_page"},{"location":"reference/streamdeck_ui/gui/#export_config","text":"def export_config ( window ) -> None View Source def export_config ( window ) -> None : file_name = QFileDialog . getSaveFileName ( window , \"Export Config\" , os . path . expanduser ( \"~/streamdeck_ui_export.json\" ), \"JSON (*.json)\" )[ 0 ] if not file_name : return api . export_config ( file_name )","title":"export_config"},{"location":"reference/streamdeck_ui/gui/#import_config","text":"def import_config ( window ) -> None View Source def import_config ( window ) -> None : file_name = QFileDialog . getOpenFileName ( window , \"Import Config\" , os . path . expanduser ( \"~\" ), \"Config Files (*.json)\" )[ 0 ] if not file_name : return api . import_config ( file_name ) redraw_buttons ( window . ui )","title":"import_config"},{"location":"reference/streamdeck_ui/gui/#queue_text_change","text":"def queue_text_change ( ui , text : str ) -> None View Source def queue_text_change ( ui , text : str ) -> None : global text_timer if text_timer : text_timer . stop () text_timer = QTimer () text_timer . setSingleShot ( True ) text_timer . timeout . connect ( partial ( update_button_text , ui , text )) text_timer . start ( 500 )","title":"queue_text_change"},{"location":"reference/streamdeck_ui/gui/#redraw_buttons","text":"def redraw_buttons ( ui ) -> None View Source def redraw_buttons ( ui ) -> None : deck_id = _deck_id ( ui ) current_tab = ui . pages . currentWidget () buttons = current_tab . findChildren ( QtWidgets . QToolButton ) for button in buttons : button . setText ( api . get_button_text ( deck_id , _page ( ui ), button . index )) button . setIcon ( QIcon ( api . get_button_icon ( deck_id , _page ( ui ), button . index )))","title":"redraw_buttons"},{"location":"reference/streamdeck_ui/gui/#remove_image","text":"def remove_image ( window ) -> None View Source def remove_image ( window ) -> None : deck_id = _deck_id ( window . ui ) image = api . get_button_icon ( deck_id , _page ( window . ui ), selected_button . index ) if image : confirm = QMessageBox ( window ) confirm . setWindowTitle ( \"Remove image\" ) confirm . setText ( \"Are you sure you want to remove the image for this button?\" ) confirm . setStandardButtons ( QMessageBox . Yes | QMessageBox . No ) confirm . setIcon ( QMessageBox . Question ) button = confirm . exec_ () if button == QMessageBox . Yes : api . set_button_icon ( deck_id , _page ( window . ui ), selected_button . index , \"\" ) redraw_buttons ( window . ui )","title":"remove_image"},{"location":"reference/streamdeck_ui/gui/#select_image","text":"def select_image ( window ) -> None View Source def select_image ( window ) -> None : deck_id = _deck_id ( window . ui ) image = api . get_button_icon ( deck_id , _page ( window . ui ), selected_button . index ) if not image : image = os . path . expanduser ( \"~\" ) file_name = QFileDialog . getOpenFileName ( window , \"Open Image\" , image , \"Image Files (*.png *.jpg *.bmp)\" )[ 0 ] if file_name : deck_id = _deck_id ( window . ui ) api . set_button_icon ( deck_id , _page ( window . ui ), selected_button . index , file_name ) redraw_buttons ( window . ui )","title":"select_image"},{"location":"reference/streamdeck_ui/gui/#set_brightness","text":"def set_brightness ( ui , value : int ) -> None View Source def set_brightness ( ui , value : int ) -> None : deck_id = _deck_id ( ui ) api . set_brightness ( deck_id , value )","title":"set_brightness"},{"location":"reference/streamdeck_ui/gui/#start","text":"def start ( _exit : bool = False ) -> None View Source def start ( _exit : bool = False ) -> None : show_ui = True if \"-h\" in sys . argv or \"--help\" in sys . argv : print ( f \"Usage: {os.path.basename(sys.argv[0])}\" ) print ( \"Flags:\" ) print ( \" -h, --help \\t Show this message\" ) print ( \" -n, --no-ui \\t Run the program without showing a UI\" ) return elif \"-n\" in sys . argv or \"--no-ui\" in sys . argv : show_ui = False app = QApplication ( sys . argv ) logo = QIcon ( LOGO ) main_window = MainWindow () ui = main_window . ui main_window . setWindowIcon ( logo ) tray = QSystemTrayIcon ( logo , app ) tray . activated . connect ( main_window . systray_clicked ) menu = QMenu () action_exit = QAction ( \"Exit\" ) action_exit . triggered . connect ( app . exit ) menu . addAction ( action_exit ) tray . setContextMenu ( menu ) ui . text . textChanged . connect ( partial ( queue_text_change , ui )) ui . command . textChanged . connect ( partial ( update_button_command , ui )) ui . keys . textChanged . connect ( partial ( update_button_keys , ui )) ui . write . textChanged . connect ( partial ( update_button_write , ui )) ui . change_brightness . valueChanged . connect ( partial ( update_change_brightness , ui )) ui . switch_page . valueChanged . connect ( partial ( update_switch_page , ui )) ui . imageButton . clicked . connect ( partial ( select_image , main_window )) ui . brightness . valueChanged . connect ( partial ( set_brightness , ui )) ui . removeButton . clicked . connect ( partial ( remove_image , main_window )) items = api . open_decks () . items () if len ( items ) == 0 : print ( \"Waiting for Stream Deck(s)...\" ) while len ( items ) == 0 : time . sleep ( 3 ) items = api . open_decks () . items () for deck_id , deck in items : ui . device_list . addItem ( f \"{deck['type']} - {deck_id}\" , userData = deck_id ) build_device ( ui ) ui . device_list . currentIndexChanged . connect ( partial ( build_device , ui )) ui . pages . currentChanged . connect ( partial ( change_page , ui )) ui . actionExport . triggered . connect ( partial ( export_config , main_window )) ui . actionImport . triggered . connect ( partial ( import_config , main_window )) ui . actionExit . triggered . connect ( app . exit ) timer = QTimer () timer . timeout . connect ( partial ( sync , ui )) timer . start ( 1000 ) api . render () tray . show () if show_ui : main_window . show () if _exit : return else : app . exec_ () api . close_decks () sys . exit ()","title":"start"},{"location":"reference/streamdeck_ui/gui/#sync","text":"def sync ( ui ) -> None View Source def sync ( ui ) -> None : api . ensure_decks_connected () ui . brightness . setValue ( api . get_brightness ( _deck_id ( ui ))) ui . pages . setCurrentIndex ( api . get_page ( _deck_id ( ui )))","title":"sync"},{"location":"reference/streamdeck_ui/gui/#update_button_command","text":"def update_button_command ( ui , command : str ) -> None View Source def update_button_command ( ui , command : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_command ( deck_id , _page ( ui ), selected_button . index , command )","title":"update_button_command"},{"location":"reference/streamdeck_ui/gui/#update_button_keys","text":"def update_button_keys ( ui , keys : str ) -> None View Source def update_button_keys ( ui , keys : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_keys ( deck_id , _page ( ui ), selected_button . index , keys )","title":"update_button_keys"},{"location":"reference/streamdeck_ui/gui/#update_button_text","text":"def update_button_text ( ui , text : str ) -> None View Source def update_button_text ( ui , text : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_text ( deck_id , _page ( ui ), selected_button . index , text ) redraw_buttons ( ui )","title":"update_button_text"},{"location":"reference/streamdeck_ui/gui/#update_button_write","text":"def update_button_write ( ui ) -> None View Source def update_button_write ( ui ) -> None : deck_id = _deck_id ( ui ) api . set_button_write ( deck_id , _page ( ui ), selected_button . index , ui . write . toPlainText ())","title":"update_button_write"},{"location":"reference/streamdeck_ui/gui/#update_change_brightness","text":"def update_change_brightness ( ui , amount : int ) -> None View Source def update_change_brightness ( ui , amount : int ) -> None : deck_id = _deck_id ( ui ) api . set_button_change_brightness ( deck_id , _page ( ui ), selected_button . index , amount )","title":"update_change_brightness"},{"location":"reference/streamdeck_ui/gui/#update_switch_page","text":"def update_switch_page ( ui , page : int ) -> None View Source def update_switch_page ( ui , page : int ) -> None : deck_id = _deck_id ( ui ) api . set_button_switch_page ( deck_id , _page ( ui ), selected_button . index , page )","title":"update_switch_page"},{"location":"reference/streamdeck_ui/gui/#classes","text":"","title":"Classes"},{"location":"reference/streamdeck_ui/gui/#draggablebutton","text":"class DraggableButton ( parent , ui ) View Source class DraggableButton ( QtWidgets . QToolButton ): \"\"\"A QToolButton that supports drag and drop and swaps the button properties on drop \"\"\" def __init__ ( self , parent , ui ): super ( DraggableButton , self ). __init__ ( parent ) self . setAcceptDrops ( True ) self . ui = ui def mouseMoveEvent ( self , e ): # noqa: N802 - Part of QT signature. if e . buttons () != Qt.LeftButton: return mimedata = QMimeData() drag = QDrag(self) drag. setMimeData ( mimedata ) drag . exec_ ( Qt.MoveAction) def dropEvent(self, e): # noqa: N802 - Part of QT signature. global selected_button self . setStyleSheet ( BUTTON_STYLE ) # Ignore drag and drop on yourself if e . source (). index == self . index: return api . swap_buttons ( _deck_id ( self . ui ), _page ( self . ui ), e . source (). index , self . index ) # In the case that we've dragged the currently selected button, we have to # check the target button instead so it appears that it followed the drag/drop if e . source (). isChecked (): e . source (). setChecked ( False ) self . setChecked ( True ) selected_button = self redraw_buttons ( self . ui ) def dragEnterEvent ( self , e ): # noqa: N802 - Part of QT signature. if type ( self ) is DraggableButton: e . setAccepted ( True ) self . setStyleSheet ( BUTTON_DRAG_STYLE ) else: e . setAccepted ( False ) def dragLeaveEvent ( self , e ): # noqa: N802 - Part of QT signature. self . setStyleSheet ( BUTTON_STYLE )","title":"DraggableButton"},{"location":"reference/streamdeck_ui/gui/#ancestors-in-mro","text":"PySide2.QtWidgets.QToolButton PySide2.QtWidgets.QAbstractButton PySide2.QtWidgets.QWidget PySide2.QtCore.QObject PySide2.QtGui.QPaintDevice Shiboken.Object","title":"Ancestors (in MRO)"},{"location":"reference/streamdeck_ui/gui/#class-variables","text":"DelayedPopup DrawChildren DrawWindowBackground IgnoreMask InstantPopup MenuButtonPopup PaintDeviceMetric PdmDepth PdmDevicePixelRatio PdmDevicePixelRatioScaled PdmDpiX PdmDpiY PdmHeight PdmHeightMM PdmNumColors PdmPhysicalDpiX PdmPhysicalDpiY PdmWidth PdmWidthMM RenderFlag RenderFlags ToolButtonPopupMode painters staticMetaObject","title":"Class variables"},{"location":"reference/streamdeck_ui/gui/#static-methods","text":"","title":"Static methods"},{"location":"reference/streamdeck_ui/gui/#connect","text":"def connect ( ... ) connect(arg__1: PySide2.QtCore.QObject, arg__2: bytes, arg__3: typing.Callable, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> bool connect(self, arg__1: bytes, arg__2: typing.Callable, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> bool connect(self, arg__1: bytes, arg__2: PySide2.QtCore.QObject, arg__3: bytes, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> bool connect(self, sender: PySide2.QtCore.QObject, signal: bytes, member: bytes, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> PySide2.QtCore.QMetaObject.Connection connect(sender: PySide2.QtCore.QObject, signal: PySide2.QtCore.QMetaMethod, receiver: PySide2.QtCore.QObject, method: PySide2.QtCore.QMetaMethod, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> PySide2.QtCore.QMetaObject.Connection connect(sender: PySide2.QtCore.QObject, signal: bytes, receiver: PySide2.QtCore.QObject, member: bytes, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> PySide2.QtCore.QMetaObject.Connection","title":"connect"},{"location":"reference/streamdeck_ui/gui/#createwindowcontainer","text":"def createWindowContainer ( window : PySide2 . QtGui . QWindow , parent : typing . Union [ PySide2 . QtWidgets . QWidget , NoneType ] = None , flags : PySide2 . QtCore . Qt . WindowFlags = Default ( Qt . WindowFlags ) ) -> PySide2 . QtWidgets . QWidget createWindowContainer(window: PySide2.QtGui.QWindow, parent: typing.Union[PySide2.QtWidgets.QWidget, NoneType] = None, flags: PySide2.QtCore.Qt.WindowFlags = Default(Qt.WindowFlags)) -> PySide2.QtWidgets.QWidget","title":"createWindowContainer"},{"location":"reference/streamdeck_ui/gui/#devicepixelratiofscale","text":"def devicePixelRatioFScale ( ) -> float devicePixelRatioFScale() -> float","title":"devicePixelRatioFScale"},{"location":"reference/streamdeck_ui/gui/#disconnect","text":"def disconnect ( ... ) disconnect(arg__1: PySide2.QtCore.QMetaObject.Connection) -> bool disconnect(arg__1: PySide2.QtCore.QObject, arg__2: bytes, arg__3: typing.Callable) -> bool disconnect(self, arg__1: bytes, arg__2: typing.Callable) -> bool disconnect(self, receiver: PySide2.QtCore.QObject, member: typing.Union[bytes, NoneType] = None) -> bool disconnect(self, signal: bytes, receiver: PySide2.QtCore.QObject, member: bytes) -> bool disconnect(sender: PySide2.QtCore.QObject, signal: PySide2.QtCore.QMetaMethod, receiver: PySide2.QtCore.QObject, member: PySide2.QtCore.QMetaMethod) -> bool disconnect(sender: PySide2.QtCore.QObject, signal: bytes, receiver: PySide2.QtCore.QObject, member: bytes) -> bool","title":"disconnect"},{"location":"reference/streamdeck_ui/gui/#find","text":"def find ( arg__1 : int ) -> PySide2 . QtWidgets . QWidget find(arg__1: int) -> PySide2.QtWidgets.QWidget","title":"find"},{"location":"reference/streamdeck_ui/gui/#keyboardgrabber","text":"def keyboardGrabber ( ) -> PySide2 . QtWidgets . QWidget keyboardGrabber() -> PySide2.QtWidgets.QWidget","title":"keyboardGrabber"},{"location":"reference/streamdeck_ui/gui/#mousegrabber","text":"def mouseGrabber ( ) -> PySide2 . QtWidgets . QWidget mouseGrabber() -> PySide2.QtWidgets.QWidget","title":"mouseGrabber"},{"location":"reference/streamdeck_ui/gui/#registeruserdata","text":"def registerUserData ( ) -> int registerUserData() -> int","title":"registerUserData"},{"location":"reference/streamdeck_ui/gui/#settaborder","text":"def setTabOrder ( arg__1 : PySide2 . QtWidgets . QWidget , arg__2 : PySide2 . QtWidgets . QWidget ) -> None setTabOrder(arg__1: PySide2.QtWidgets.QWidget, arg__2: PySide2.QtWidgets.QWidget) -> None","title":"setTabOrder"},{"location":"reference/streamdeck_ui/gui/#methods","text":"","title":"Methods"},{"location":"reference/streamdeck_ui/gui/#acceptdrops","text":"def acceptDrops ( self ) -> bool acceptDrops(self) -> bool","title":"acceptDrops"},{"location":"reference/streamdeck_ui/gui/#accessibledescription","text":"def accessibleDescription ( self ) -> str accessibleDescription(self) -> str","title":"accessibleDescription"},{"location":"reference/streamdeck_ui/gui/#accessiblename","text":"def accessibleName ( self ) -> str accessibleName(self) -> str","title":"accessibleName"},{"location":"reference/streamdeck_ui/gui/#actionevent","text":"def actionEvent ( self , arg__1 : PySide2 . QtGui . QActionEvent ) -> None actionEvent(self, arg__1: PySide2.QtGui.QActionEvent) -> None","title":"actionEvent"},{"location":"reference/streamdeck_ui/gui/#actions","text":"def actions ( self ) -> typing . List [ PySide2 . QtWidgets . QAction ] actions(self) -> typing.List[PySide2.QtWidgets.QAction]","title":"actions"},{"location":"reference/streamdeck_ui/gui/#activatewindow","text":"def activateWindow ( self ) -> None activateWindow(self) -> None","title":"activateWindow"},{"location":"reference/streamdeck_ui/gui/#addaction","text":"def addAction ( self , action : PySide2 . QtWidgets . QAction ) -> None addAction(self, action: PySide2.QtWidgets.QAction) -> None","title":"addAction"},{"location":"reference/streamdeck_ui/gui/#addactions","text":"def addActions ( self , actions : typing . Sequence [ PySide2 . QtWidgets . QAction ] ) -> None addActions(self, actions: typing.Sequence[PySide2.QtWidgets.QAction]) -> None","title":"addActions"},{"location":"reference/streamdeck_ui/gui/#adjustsize","text":"def adjustSize ( self ) -> None adjustSize(self) -> None","title":"adjustSize"},{"location":"reference/streamdeck_ui/gui/#animateclick","text":"def animateClick ( self , msec : int = 100 ) -> None animateClick(self, msec: int = 100) -> None","title":"animateClick"},{"location":"reference/streamdeck_ui/gui/#arrowtype","text":"def arrowType ( self ) -> PySide2 . QtCore . Qt . ArrowType arrowType(self) -> PySide2.QtCore.Qt.ArrowType","title":"arrowType"},{"location":"reference/streamdeck_ui/gui/#autoexclusive","text":"def autoExclusive ( self ) -> bool autoExclusive(self) -> bool","title":"autoExclusive"},{"location":"reference/streamdeck_ui/gui/#autofillbackground","text":"def autoFillBackground ( self ) -> bool autoFillBackground(self) -> bool","title":"autoFillBackground"},{"location":"reference/streamdeck_ui/gui/#autoraise","text":"def autoRaise ( self ) -> bool autoRaise(self) -> bool","title":"autoRaise"},{"location":"reference/streamdeck_ui/gui/#autorepeat","text":"def autoRepeat ( self ) -> bool autoRepeat(self) -> bool","title":"autoRepeat"},{"location":"reference/streamdeck_ui/gui/#autorepeatdelay","text":"def autoRepeatDelay ( self ) -> int autoRepeatDelay(self) -> int","title":"autoRepeatDelay"},{"location":"reference/streamdeck_ui/gui/#autorepeatinterval","text":"def autoRepeatInterval ( self ) -> int autoRepeatInterval(self) -> int","title":"autoRepeatInterval"},{"location":"reference/streamdeck_ui/gui/#backgroundrole","text":"def backgroundRole ( self ) -> PySide2 . QtGui . QPalette . ColorRole backgroundRole(self) -> PySide2.QtGui.QPalette.ColorRole","title":"backgroundRole"},{"location":"reference/streamdeck_ui/gui/#backingstore","text":"def backingStore ( self ) -> PySide2 . QtGui . QBackingStore backingStore(self) -> PySide2.QtGui.QBackingStore","title":"backingStore"},{"location":"reference/streamdeck_ui/gui/#basesize","text":"def baseSize ( self ) -> PySide2 . QtCore . QSize baseSize(self) -> PySide2.QtCore.QSize","title":"baseSize"},{"location":"reference/streamdeck_ui/gui/#blocksignals","text":"def blockSignals ( self , b : bool ) -> bool blockSignals(self, b: bool) -> bool","title":"blockSignals"},{"location":"reference/streamdeck_ui/gui/#changeevent","text":"def changeEvent ( self , arg__1 : PySide2 . QtCore . QEvent ) -> None changeEvent(self, arg__1: PySide2.QtCore.QEvent) -> None","title":"changeEvent"},{"location":"reference/streamdeck_ui/gui/#checkstateset","text":"def checkStateSet ( self ) -> None checkStateSet(self) -> None","title":"checkStateSet"},{"location":"reference/streamdeck_ui/gui/#childat","text":"def childAt ( ... ) childAt(self, p: PySide2.QtCore.QPoint) -> PySide2.QtWidgets.QWidget childAt(self, x: int, y: int) -> PySide2.QtWidgets.QWidget","title":"childAt"},{"location":"reference/streamdeck_ui/gui/#childevent","text":"def childEvent ( self , event : PySide2 . QtCore . QChildEvent ) -> None childEvent(self, event: PySide2.QtCore.QChildEvent) -> None","title":"childEvent"},{"location":"reference/streamdeck_ui/gui/#children","text":"def children ( self ) -> typing . List [ PySide2 . QtCore . QObject ] children(self) -> typing.List[PySide2.QtCore.QObject]","title":"children"},{"location":"reference/streamdeck_ui/gui/#childrenrect","text":"def childrenRect ( self ) -> PySide2 . QtCore . QRect childrenRect(self) -> PySide2.QtCore.QRect","title":"childrenRect"},{"location":"reference/streamdeck_ui/gui/#childrenregion","text":"def childrenRegion ( self ) -> PySide2 . QtGui . QRegion childrenRegion(self) -> PySide2.QtGui.QRegion","title":"childrenRegion"},{"location":"reference/streamdeck_ui/gui/#clearfocus","text":"def clearFocus ( self ) -> None clearFocus(self) -> None","title":"clearFocus"},{"location":"reference/streamdeck_ui/gui/#clearmask","text":"def clearMask ( self ) -> None clearMask(self) -> None","title":"clearMask"},{"location":"reference/streamdeck_ui/gui/#click","text":"def click ( self ) -> None click(self) -> None","title":"click"},{"location":"reference/streamdeck_ui/gui/#clicked","text":"def clicked ( ... )","title":"clicked"},{"location":"reference/streamdeck_ui/gui/#close","text":"def close ( self ) -> bool close(self) -> bool","title":"close"},{"location":"reference/streamdeck_ui/gui/#closeevent","text":"def closeEvent ( self , event : PySide2 . QtGui . QCloseEvent ) -> None closeEvent(self, event: PySide2.QtGui.QCloseEvent) -> None","title":"closeEvent"},{"location":"reference/streamdeck_ui/gui/#colorcount","text":"def colorCount ( self ) -> int colorCount(self) -> int","title":"colorCount"},{"location":"reference/streamdeck_ui/gui/#connectnotify","text":"def connectNotify ( self , signal : PySide2 . QtCore . QMetaMethod ) -> None connectNotify(self, signal: PySide2.QtCore.QMetaMethod) -> None","title":"connectNotify"},{"location":"reference/streamdeck_ui/gui/#contentsmargins","text":"def contentsMargins ( self ) -> PySide2 . QtCore . QMargins contentsMargins(self) -> PySide2.QtCore.QMargins","title":"contentsMargins"},{"location":"reference/streamdeck_ui/gui/#contentsrect","text":"def contentsRect ( self ) -> PySide2 . QtCore . QRect contentsRect(self) -> PySide2.QtCore.QRect","title":"contentsRect"},{"location":"reference/streamdeck_ui/gui/#contextmenuevent","text":"def contextMenuEvent ( self , event : PySide2 . QtGui . QContextMenuEvent ) -> None contextMenuEvent(self, event: PySide2.QtGui.QContextMenuEvent) -> None","title":"contextMenuEvent"},{"location":"reference/streamdeck_ui/gui/#contextmenupolicy","text":"def contextMenuPolicy ( self ) -> PySide2 . QtCore . Qt . ContextMenuPolicy contextMenuPolicy(self) -> PySide2.QtCore.Qt.ContextMenuPolicy","title":"contextMenuPolicy"},{"location":"reference/streamdeck_ui/gui/#create","text":"def create ( self , arg__1 : int = 0 , initializeWindow : bool = True , destroyOldWindow : bool = True ) -> None create(self, arg__1: int = 0, initializeWindow: bool = True, destroyOldWindow: bool = True) -> None","title":"create"},{"location":"reference/streamdeck_ui/gui/#createwinid","text":"def createWinId ( self ) -> None createWinId(self) -> None","title":"createWinId"},{"location":"reference/streamdeck_ui/gui/#cursor","text":"def cursor ( self ) -> PySide2 . QtGui . QCursor cursor(self) -> PySide2.QtGui.QCursor","title":"cursor"},{"location":"reference/streamdeck_ui/gui/#customcontextmenurequested","text":"def customContextMenuRequested ( ... )","title":"customContextMenuRequested"},{"location":"reference/streamdeck_ui/gui/#customevent","text":"def customEvent ( self , event : PySide2 . QtCore . QEvent ) -> None customEvent(self, event: PySide2.QtCore.QEvent) -> None","title":"customEvent"},{"location":"reference/streamdeck_ui/gui/#defaultaction","text":"def defaultAction ( self ) -> PySide2 . QtWidgets . QAction defaultAction(self) -> PySide2.QtWidgets.QAction","title":"defaultAction"},{"location":"reference/streamdeck_ui/gui/#deletelater","text":"def deleteLater ( self ) -> None deleteLater(self) -> None","title":"deleteLater"},{"location":"reference/streamdeck_ui/gui/#depth","text":"def depth ( self ) -> int depth(self) -> int","title":"depth"},{"location":"reference/streamdeck_ui/gui/#destroy","text":"def destroy ( self , destroyWindow : bool = True , destroySubWindows : bool = True ) -> None destroy(self, destroyWindow: bool = True, destroySubWindows: bool = True) -> None","title":"destroy"},{"location":"reference/streamdeck_ui/gui/#destroyed","text":"def destroyed ( ... )","title":"destroyed"},{"location":"reference/streamdeck_ui/gui/#devtype","text":"def devType ( self ) -> int devType(self) -> int","title":"devType"},{"location":"reference/streamdeck_ui/gui/#devicepixelratio","text":"def devicePixelRatio ( self ) -> int devicePixelRatio(self) -> int","title":"devicePixelRatio"},{"location":"reference/streamdeck_ui/gui/#devicepixelratiof","text":"def devicePixelRatioF ( self ) -> float devicePixelRatioF(self) -> float","title":"devicePixelRatioF"},{"location":"reference/streamdeck_ui/gui/#disconnectnotify","text":"def disconnectNotify ( self , signal : PySide2 . QtCore . QMetaMethod ) -> None disconnectNotify(self, signal: PySide2.QtCore.QMetaMethod) -> None","title":"disconnectNotify"},{"location":"reference/streamdeck_ui/gui/#dragenterevent","text":"def dragEnterEvent ( self , e ) dragEnterEvent(self, event: PySide2.QtGui.QDragEnterEvent) -> None View Source def dragEnterEvent ( self , e ) : # noqa : N802 - Part of QT signature . if type ( self ) is DraggableButton : e . setAccepted ( True ) self . setStyleSheet ( BUTTON_DRAG_STYLE ) else : e . setAccepted ( False )","title":"dragEnterEvent"},{"location":"reference/streamdeck_ui/gui/#dragleaveevent","text":"def dragLeaveEvent ( self , e ) dragLeaveEvent(self, event: PySide2.QtGui.QDragLeaveEvent) -> None View Source def dragLeaveEvent(self, e): # noqa: N802 - Part of QT signature. self.setStyleSheet(BUTTON_STYLE)","title":"dragLeaveEvent"},{"location":"reference/streamdeck_ui/gui/#dragmoveevent","text":"def dragMoveEvent ( self , event : PySide2 . QtGui . QDragMoveEvent ) -> None dragMoveEvent(self, event: PySide2.QtGui.QDragMoveEvent) -> None","title":"dragMoveEvent"},{"location":"reference/streamdeck_ui/gui/#dropevent","text":"def dropEvent ( self , e ) dropEvent(self, event: PySide2.QtGui.QDropEvent) -> None View Source def dropEvent ( self , e ) : # noqa : N802 - Part of QT signature . global selected_button self . setStyleSheet ( BUTTON_STYLE ) # Ignore drag and drop on yourself if e . source () . index == self . index : return api . swap_buttons ( _deck_id ( self . ui ) , _page ( self . ui ) , e . source () . index , self . index ) # In the case that we ' ve dragged the currently selected button, we have to # check the target button instead so it appears that it followed the drag / drop if e . source () . isChecked () : e . source () . setChecked ( False ) self . setChecked ( True ) selected_button = self redraw_buttons ( self . ui )","title":"dropEvent"},{"location":"reference/streamdeck_ui/gui/#dumpobjectinfo","text":"def dumpObjectInfo ( self ) -> None dumpObjectInfo(self) -> None","title":"dumpObjectInfo"},{"location":"reference/streamdeck_ui/gui/#dumpobjecttree","text":"def dumpObjectTree ( self ) -> None dumpObjectTree(self) -> None","title":"dumpObjectTree"},{"location":"reference/streamdeck_ui/gui/#dynamicpropertynames","text":"def dynamicPropertyNames ( self ) -> typing . List [ PySide2 . QtCore . QByteArray ] dynamicPropertyNames(self) -> typing.List[PySide2.QtCore.QByteArray]","title":"dynamicPropertyNames"},{"location":"reference/streamdeck_ui/gui/#effectivewinid","text":"def effectiveWinId ( self ) -> int effectiveWinId(self) -> int","title":"effectiveWinId"},{"location":"reference/streamdeck_ui/gui/#emit","text":"def emit ( self , arg__1 : bytes , * args : None ) -> bool emit(self, arg__1: bytes, *args: None) -> bool","title":"emit"},{"location":"reference/streamdeck_ui/gui/#ensurepolished","text":"def ensurePolished ( self ) -> None ensurePolished(self) -> None","title":"ensurePolished"},{"location":"reference/streamdeck_ui/gui/#enterevent","text":"def enterEvent ( self , arg__1 : PySide2 . QtCore . QEvent ) -> None enterEvent(self, arg__1: PySide2.QtCore.QEvent) -> None","title":"enterEvent"},{"location":"reference/streamdeck_ui/gui/#event","text":"def event ( self , e : PySide2 . QtCore . QEvent ) -> bool event(self, e: PySide2.QtCore.QEvent) -> bool","title":"event"},{"location":"reference/streamdeck_ui/gui/#eventfilter","text":"def eventFilter ( self , watched : PySide2 . QtCore . QObject , event : PySide2 . QtCore . QEvent ) -> bool eventFilter(self, watched: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) -> bool","title":"eventFilter"},{"location":"reference/streamdeck_ui/gui/#findchild","text":"def findChild ( self , arg__1 : type , arg__2 : str = '' ) -> object findChild(self, arg__1: type, arg__2: str = '') -> object","title":"findChild"},{"location":"reference/streamdeck_ui/gui/#findchildren","text":"def findChildren ( ... ) findChildren(self, arg__1: type, arg__2: PySide2.QtCore.QRegExp) -> typing.Iterable findChildren(self, arg__1: type, arg__2: PySide2.QtCore.QRegularExpression) -> typing.Iterable findChildren(self, arg__1: type, arg__2: str = '') -> typing.Iterable","title":"findChildren"},{"location":"reference/streamdeck_ui/gui/#focusinevent","text":"def focusInEvent ( self , e : PySide2 . QtGui . QFocusEvent ) -> None focusInEvent(self, e: PySide2.QtGui.QFocusEvent) -> None","title":"focusInEvent"},{"location":"reference/streamdeck_ui/gui/#focusnextchild","text":"def focusNextChild ( self ) -> bool focusNextChild(self) -> bool","title":"focusNextChild"},{"location":"reference/streamdeck_ui/gui/#focusnextprevchild","text":"def focusNextPrevChild ( self , next : bool ) -> bool focusNextPrevChild(self, next: bool) -> bool","title":"focusNextPrevChild"},{"location":"reference/streamdeck_ui/gui/#focusoutevent","text":"def focusOutEvent ( self , e : PySide2 . QtGui . QFocusEvent ) -> None focusOutEvent(self, e: PySide2.QtGui.QFocusEvent) -> None","title":"focusOutEvent"},{"location":"reference/streamdeck_ui/gui/#focuspolicy","text":"def focusPolicy ( self ) -> PySide2 . QtCore . Qt . FocusPolicy focusPolicy(self) -> PySide2.QtCore.Qt.FocusPolicy","title":"focusPolicy"},{"location":"reference/streamdeck_ui/gui/#focuspreviouschild","text":"def focusPreviousChild ( self ) -> bool focusPreviousChild(self) -> bool","title":"focusPreviousChild"},{"location":"reference/streamdeck_ui/gui/#focusproxy","text":"def focusProxy ( self ) -> PySide2 . QtWidgets . QWidget focusProxy(self) -> PySide2.QtWidgets.QWidget","title":"focusProxy"},{"location":"reference/streamdeck_ui/gui/#focuswidget","text":"def focusWidget ( self ) -> PySide2 . QtWidgets . QWidget focusWidget(self) -> PySide2.QtWidgets.QWidget","title":"focusWidget"},{"location":"reference/streamdeck_ui/gui/#font","text":"def font ( self ) -> PySide2 . QtGui . QFont font(self) -> PySide2.QtGui.QFont","title":"font"},{"location":"reference/streamdeck_ui/gui/#fontinfo","text":"def fontInfo ( self ) -> PySide2 . QtGui . QFontInfo fontInfo(self) -> PySide2.QtGui.QFontInfo","title":"fontInfo"},{"location":"reference/streamdeck_ui/gui/#fontmetrics","text":"def fontMetrics ( self ) -> PySide2 . QtGui . QFontMetrics fontMetrics(self) -> PySide2.QtGui.QFontMetrics","title":"fontMetrics"},{"location":"reference/streamdeck_ui/gui/#foregroundrole","text":"def foregroundRole ( self ) -> PySide2 . QtGui . QPalette . ColorRole foregroundRole(self) -> PySide2.QtGui.QPalette.ColorRole","title":"foregroundRole"},{"location":"reference/streamdeck_ui/gui/#framegeometry","text":"def frameGeometry ( self ) -> PySide2 . QtCore . QRect frameGeometry(self) -> PySide2.QtCore.QRect","title":"frameGeometry"},{"location":"reference/streamdeck_ui/gui/#framesize","text":"def frameSize ( self ) -> PySide2 . QtCore . QSize frameSize(self) -> PySide2.QtCore.QSize","title":"frameSize"},{"location":"reference/streamdeck_ui/gui/#geometry","text":"def geometry ( self ) -> PySide2 . QtCore . QRect geometry(self) -> PySide2.QtCore.QRect","title":"geometry"},{"location":"reference/streamdeck_ui/gui/#getcontentsmargins","text":"def getContentsMargins ( self ) -> typing . Tuple [ int , int , int , int ] getContentsMargins(self) -> typing.Tuple[int, int, int, int]","title":"getContentsMargins"},{"location":"reference/streamdeck_ui/gui/#grab","text":"def grab ( self , rectangle : PySide2 . QtCore . QRect = PySide2 . QtCore . QRect ( 0 , 0 , - 1 , - 1 ) ) -> PySide2 . QtGui . QPixmap grab(self, rectangle: PySide2.QtCore.QRect = PySide2.QtCore.QRect(0, 0, -1, -1)) -> PySide2.QtGui.QPixmap","title":"grab"},{"location":"reference/streamdeck_ui/gui/#grabgesture","text":"def grabGesture ( self , type : PySide2 . QtCore . Qt . GestureType , flags : PySide2 . QtCore . Qt . GestureFlags = Default ( Qt . GestureFlags ) ) -> None grabGesture(self, type: PySide2.QtCore.Qt.GestureType, flags: PySide2.QtCore.Qt.GestureFlags = Default(Qt.GestureFlags)) -> None","title":"grabGesture"},{"location":"reference/streamdeck_ui/gui/#grabkeyboard","text":"def grabKeyboard ( self ) -> None grabKeyboard(self) -> None","title":"grabKeyboard"},{"location":"reference/streamdeck_ui/gui/#grabmouse","text":"def grabMouse ( ... ) grabMouse(self) -> None grabMouse(self, arg__1: PySide2.QtGui.QCursor) -> None","title":"grabMouse"},{"location":"reference/streamdeck_ui/gui/#grabshortcut","text":"def grabShortcut ( self , key : PySide2 . QtGui . QKeySequence , context : PySide2 . QtCore . Qt . ShortcutContext = PySide2 . QtCore . Qt . ShortcutContext . WindowShortcut ) -> int grabShortcut(self, key: PySide2.QtGui.QKeySequence, context: PySide2.QtCore.Qt.ShortcutContext = PySide2.QtCore.Qt.ShortcutContext.WindowShortcut) -> int","title":"grabShortcut"},{"location":"reference/streamdeck_ui/gui/#graphicseffect","text":"def graphicsEffect ( self ) -> PySide2 . QtWidgets . QGraphicsEffect graphicsEffect(self) -> PySide2.QtWidgets.QGraphicsEffect","title":"graphicsEffect"},{"location":"reference/streamdeck_ui/gui/#graphicsproxywidget","text":"def graphicsProxyWidget ( self ) -> PySide2 . QtWidgets . QGraphicsProxyWidget graphicsProxyWidget(self) -> PySide2.QtWidgets.QGraphicsProxyWidget","title":"graphicsProxyWidget"},{"location":"reference/streamdeck_ui/gui/#group","text":"def group ( self ) -> PySide2 . QtWidgets . QButtonGroup group(self) -> PySide2.QtWidgets.QButtonGroup","title":"group"},{"location":"reference/streamdeck_ui/gui/#hasfocus","text":"def hasFocus ( self ) -> bool hasFocus(self) -> bool","title":"hasFocus"},{"location":"reference/streamdeck_ui/gui/#hasheightforwidth","text":"def hasHeightForWidth ( self ) -> bool hasHeightForWidth(self) -> bool","title":"hasHeightForWidth"},{"location":"reference/streamdeck_ui/gui/#hasmousetracking","text":"def hasMouseTracking ( self ) -> bool hasMouseTracking(self) -> bool","title":"hasMouseTracking"},{"location":"reference/streamdeck_ui/gui/#hastablettracking","text":"def hasTabletTracking ( self ) -> bool hasTabletTracking(self) -> bool","title":"hasTabletTracking"},{"location":"reference/streamdeck_ui/gui/#height","text":"def height ( self ) -> int height(self) -> int","title":"height"},{"location":"reference/streamdeck_ui/gui/#heightforwidth","text":"def heightForWidth ( self , arg__1 : int ) -> int heightForWidth(self, arg__1: int) -> int","title":"heightForWidth"},{"location":"reference/streamdeck_ui/gui/#heightmm","text":"def heightMM ( self ) -> int heightMM(self) -> int","title":"heightMM"},{"location":"reference/streamdeck_ui/gui/#hide","text":"def hide ( self ) -> None hide(self) -> None","title":"hide"},{"location":"reference/streamdeck_ui/gui/#hideevent","text":"def hideEvent ( self , event : PySide2 . QtGui . QHideEvent ) -> None hideEvent(self, event: PySide2.QtGui.QHideEvent) -> None","title":"hideEvent"},{"location":"reference/streamdeck_ui/gui/#hitbutton","text":"def hitButton ( self , pos : PySide2 . QtCore . QPoint ) -> bool hitButton(self, pos: PySide2.QtCore.QPoint) -> bool","title":"hitButton"},{"location":"reference/streamdeck_ui/gui/#icon","text":"def icon ( self ) -> PySide2 . QtGui . QIcon icon(self) -> PySide2.QtGui.QIcon","title":"icon"},{"location":"reference/streamdeck_ui/gui/#iconsize","text":"def iconSize ( self ) -> PySide2 . QtCore . QSize iconSize(self) -> PySide2.QtCore.QSize","title":"iconSize"},{"location":"reference/streamdeck_ui/gui/#inherits","text":"def inherits ( self , classname : bytes ) -> bool inherits(self, classname: bytes) -> bool","title":"inherits"},{"location":"reference/streamdeck_ui/gui/#initpainter","text":"def initPainter ( self , painter : PySide2 . QtGui . QPainter ) -> None initPainter(self, painter: PySide2.QtGui.QPainter) -> None","title":"initPainter"},{"location":"reference/streamdeck_ui/gui/#initstyleoption","text":"def initStyleOption ( self , option : PySide2 . QtWidgets . QStyleOptionToolButton ) -> None initStyleOption(self, option: PySide2.QtWidgets.QStyleOptionToolButton) -> None","title":"initStyleOption"},{"location":"reference/streamdeck_ui/gui/#inputmethodevent","text":"def inputMethodEvent ( self , event : PySide2 . QtGui . QInputMethodEvent ) -> None inputMethodEvent(self, event: PySide2.QtGui.QInputMethodEvent) -> None","title":"inputMethodEvent"},{"location":"reference/streamdeck_ui/gui/#inputmethodhints","text":"def inputMethodHints ( self ) -> PySide2 . QtCore . Qt . InputMethodHints inputMethodHints(self) -> PySide2.QtCore.Qt.InputMethodHints","title":"inputMethodHints"},{"location":"reference/streamdeck_ui/gui/#inputmethodquery","text":"def inputMethodQuery ( self , arg__1 : PySide2 . QtCore . Qt . InputMethodQuery ) -> typing . Any inputMethodQuery(self, arg__1: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any","title":"inputMethodQuery"},{"location":"reference/streamdeck_ui/gui/#insertaction","text":"def insertAction ( self , before : PySide2 . QtWidgets . QAction , action : PySide2 . QtWidgets . QAction ) -> None insertAction(self, before: PySide2.QtWidgets.QAction, action: PySide2.QtWidgets.QAction) -> None","title":"insertAction"},{"location":"reference/streamdeck_ui/gui/#insertactions","text":"def insertActions ( self , before : PySide2 . QtWidgets . QAction , actions : typing . Sequence [ PySide2 . QtWidgets . QAction ] ) -> None insertActions(self, before: PySide2.QtWidgets.QAction, actions: typing.Sequence[PySide2.QtWidgets.QAction]) -> None","title":"insertActions"},{"location":"reference/streamdeck_ui/gui/#installeventfilter","text":"def installEventFilter ( self , filterObj : PySide2 . QtCore . QObject ) -> None installEventFilter(self, filterObj: PySide2.QtCore.QObject) -> None","title":"installEventFilter"},{"location":"reference/streamdeck_ui/gui/#internalwinid","text":"def internalWinId ( self ) -> int internalWinId(self) -> int","title":"internalWinId"},{"location":"reference/streamdeck_ui/gui/#isactivewindow","text":"def isActiveWindow ( self ) -> bool isActiveWindow(self) -> bool","title":"isActiveWindow"},{"location":"reference/streamdeck_ui/gui/#isancestorof","text":"def isAncestorOf ( self , child : PySide2 . QtWidgets . QWidget ) -> bool isAncestorOf(self, child: PySide2.QtWidgets.QWidget) -> bool","title":"isAncestorOf"},{"location":"reference/streamdeck_ui/gui/#ischeckable","text":"def isCheckable ( self ) -> bool isCheckable(self) -> bool","title":"isCheckable"},{"location":"reference/streamdeck_ui/gui/#ischecked","text":"def isChecked ( self ) -> bool isChecked(self) -> bool","title":"isChecked"},{"location":"reference/streamdeck_ui/gui/#isdown","text":"def isDown ( self ) -> bool isDown(self) -> bool","title":"isDown"},{"location":"reference/streamdeck_ui/gui/#isenabled","text":"def isEnabled ( self ) -> bool isEnabled(self) -> bool","title":"isEnabled"},{"location":"reference/streamdeck_ui/gui/#isenabledto","text":"def isEnabledTo ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> bool isEnabledTo(self, arg__1: PySide2.QtWidgets.QWidget) -> bool","title":"isEnabledTo"},{"location":"reference/streamdeck_ui/gui/#isenabledtotlw","text":"def isEnabledToTLW ( self ) -> bool isEnabledToTLW(self) -> bool","title":"isEnabledToTLW"},{"location":"reference/streamdeck_ui/gui/#isfullscreen","text":"def isFullScreen ( self ) -> bool isFullScreen(self) -> bool","title":"isFullScreen"},{"location":"reference/streamdeck_ui/gui/#ishidden","text":"def isHidden ( self ) -> bool isHidden(self) -> bool","title":"isHidden"},{"location":"reference/streamdeck_ui/gui/#islefttoright","text":"def isLeftToRight ( self ) -> bool isLeftToRight(self) -> bool","title":"isLeftToRight"},{"location":"reference/streamdeck_ui/gui/#ismaximized","text":"def isMaximized ( self ) -> bool isMaximized(self) -> bool","title":"isMaximized"},{"location":"reference/streamdeck_ui/gui/#isminimized","text":"def isMinimized ( self ) -> bool isMinimized(self) -> bool","title":"isMinimized"},{"location":"reference/streamdeck_ui/gui/#ismodal","text":"def isModal ( self ) -> bool isModal(self) -> bool","title":"isModal"},{"location":"reference/streamdeck_ui/gui/#isrighttoleft","text":"def isRightToLeft ( self ) -> bool isRightToLeft(self) -> bool","title":"isRightToLeft"},{"location":"reference/streamdeck_ui/gui/#issignalconnected","text":"def isSignalConnected ( self , signal : PySide2 . QtCore . QMetaMethod ) -> bool isSignalConnected(self, signal: PySide2.QtCore.QMetaMethod) -> bool","title":"isSignalConnected"},{"location":"reference/streamdeck_ui/gui/#istoplevel","text":"def isTopLevel ( self ) -> bool isTopLevel(self) -> bool","title":"isTopLevel"},{"location":"reference/streamdeck_ui/gui/#isvisible","text":"def isVisible ( self ) -> bool isVisible(self) -> bool","title":"isVisible"},{"location":"reference/streamdeck_ui/gui/#isvisibleto","text":"def isVisibleTo ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> bool isVisibleTo(self, arg__1: PySide2.QtWidgets.QWidget) -> bool","title":"isVisibleTo"},{"location":"reference/streamdeck_ui/gui/#iswidgettype","text":"def isWidgetType ( self ) -> bool isWidgetType(self) -> bool","title":"isWidgetType"},{"location":"reference/streamdeck_ui/gui/#iswindow","text":"def isWindow ( self ) -> bool isWindow(self) -> bool","title":"isWindow"},{"location":"reference/streamdeck_ui/gui/#iswindowmodified","text":"def isWindowModified ( self ) -> bool isWindowModified(self) -> bool","title":"isWindowModified"},{"location":"reference/streamdeck_ui/gui/#iswindowtype","text":"def isWindowType ( self ) -> bool isWindowType(self) -> bool","title":"isWindowType"},{"location":"reference/streamdeck_ui/gui/#keypressevent","text":"def keyPressEvent ( self , e : PySide2 . QtGui . QKeyEvent ) -> None keyPressEvent(self, e: PySide2.QtGui.QKeyEvent) -> None","title":"keyPressEvent"},{"location":"reference/streamdeck_ui/gui/#keyreleaseevent","text":"def keyReleaseEvent ( self , e : PySide2 . QtGui . QKeyEvent ) -> None keyReleaseEvent(self, e: PySide2.QtGui.QKeyEvent) -> None","title":"keyReleaseEvent"},{"location":"reference/streamdeck_ui/gui/#killtimer","text":"def killTimer ( self , id : int ) -> None killTimer(self, id: int) -> None","title":"killTimer"},{"location":"reference/streamdeck_ui/gui/#layout","text":"def layout ( self ) -> PySide2 . QtWidgets . QLayout layout(self) -> PySide2.QtWidgets.QLayout","title":"layout"},{"location":"reference/streamdeck_ui/gui/#layoutdirection","text":"def layoutDirection ( self ) -> PySide2 . QtCore . Qt . LayoutDirection layoutDirection(self) -> PySide2.QtCore.Qt.LayoutDirection","title":"layoutDirection"},{"location":"reference/streamdeck_ui/gui/#leaveevent","text":"def leaveEvent ( self , arg__1 : PySide2 . QtCore . QEvent ) -> None leaveEvent(self, arg__1: PySide2.QtCore.QEvent) -> None","title":"leaveEvent"},{"location":"reference/streamdeck_ui/gui/#locale","text":"def locale ( self ) -> PySide2 . QtCore . QLocale locale(self) -> PySide2.QtCore.QLocale","title":"locale"},{"location":"reference/streamdeck_ui/gui/#logicaldpix","text":"def logicalDpiX ( self ) -> int logicalDpiX(self) -> int","title":"logicalDpiX"},{"location":"reference/streamdeck_ui/gui/#logicaldpiy","text":"def logicalDpiY ( self ) -> int logicalDpiY(self) -> int","title":"logicalDpiY"},{"location":"reference/streamdeck_ui/gui/#lower","text":"def lower ( self ) -> None lower(self) -> None","title":"lower"},{"location":"reference/streamdeck_ui/gui/#mapfrom","text":"def mapFrom ( self , arg__1 : PySide2 . QtWidgets . QWidget , arg__2 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapFrom(self, arg__1: PySide2.QtWidgets.QWidget, arg__2: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint","title":"mapFrom"},{"location":"reference/streamdeck_ui/gui/#mapfromglobal","text":"def mapFromGlobal ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapFromGlobal(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint","title":"mapFromGlobal"},{"location":"reference/streamdeck_ui/gui/#mapfromparent","text":"def mapFromParent ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapFromParent(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint","title":"mapFromParent"},{"location":"reference/streamdeck_ui/gui/#mapto","text":"def mapTo ( self , arg__1 : PySide2 . QtWidgets . QWidget , arg__2 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapTo(self, arg__1: PySide2.QtWidgets.QWidget, arg__2: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint","title":"mapTo"},{"location":"reference/streamdeck_ui/gui/#maptoglobal","text":"def mapToGlobal ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapToGlobal(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint","title":"mapToGlobal"},{"location":"reference/streamdeck_ui/gui/#maptoparent","text":"def mapToParent ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapToParent(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint","title":"mapToParent"},{"location":"reference/streamdeck_ui/gui/#mask","text":"def mask ( self ) -> PySide2 . QtGui . QRegion mask(self) -> PySide2.QtGui.QRegion","title":"mask"},{"location":"reference/streamdeck_ui/gui/#maximumheight","text":"def maximumHeight ( self ) -> int maximumHeight(self) -> int","title":"maximumHeight"},{"location":"reference/streamdeck_ui/gui/#maximumsize","text":"def maximumSize ( self ) -> PySide2 . QtCore . QSize maximumSize(self) -> PySide2.QtCore.QSize","title":"maximumSize"},{"location":"reference/streamdeck_ui/gui/#maximumwidth","text":"def maximumWidth ( self ) -> int maximumWidth(self) -> int","title":"maximumWidth"},{"location":"reference/streamdeck_ui/gui/#menu","text":"def menu ( self ) -> PySide2 . QtWidgets . QMenu menu(self) -> PySide2.QtWidgets.QMenu","title":"menu"},{"location":"reference/streamdeck_ui/gui/#metaobject","text":"def metaObject ( self ) -> PySide2 . QtCore . QMetaObject metaObject(self) -> PySide2.QtCore.QMetaObject","title":"metaObject"},{"location":"reference/streamdeck_ui/gui/#metric","text":"def metric ( self , arg__1 : PySide2 . QtGui . QPaintDevice . PaintDeviceMetric ) -> int metric(self, arg__1: PySide2.QtGui.QPaintDevice.PaintDeviceMetric) -> int","title":"metric"},{"location":"reference/streamdeck_ui/gui/#minimumheight","text":"def minimumHeight ( self ) -> int minimumHeight(self) -> int","title":"minimumHeight"},{"location":"reference/streamdeck_ui/gui/#minimumsize","text":"def minimumSize ( self ) -> PySide2 . QtCore . QSize minimumSize(self) -> PySide2.QtCore.QSize","title":"minimumSize"},{"location":"reference/streamdeck_ui/gui/#minimumsizehint","text":"def minimumSizeHint ( self ) -> PySide2 . QtCore . QSize minimumSizeHint(self) -> PySide2.QtCore.QSize","title":"minimumSizeHint"},{"location":"reference/streamdeck_ui/gui/#minimumwidth","text":"def minimumWidth ( self ) -> int minimumWidth(self) -> int","title":"minimumWidth"},{"location":"reference/streamdeck_ui/gui/#mousedoubleclickevent","text":"def mouseDoubleClickEvent ( self , event : PySide2 . QtGui . QMouseEvent ) -> None mouseDoubleClickEvent(self, event: PySide2.QtGui.QMouseEvent) -> None","title":"mouseDoubleClickEvent"},{"location":"reference/streamdeck_ui/gui/#mousemoveevent","text":"def mouseMoveEvent ( self , e ) mouseMoveEvent(self, e: PySide2.QtGui.QMouseEvent) -> None View Source def mouseMoveEvent ( self , e ) : # noqa : N802 - Part of QT signature . if e . buttons () != Qt . LeftButton : return mimedata = QMimeData () drag = QDrag ( self ) drag . setMimeData ( mimedata ) drag . exec_ ( Qt . MoveAction )","title":"mouseMoveEvent"},{"location":"reference/streamdeck_ui/gui/#mousepressevent","text":"def mousePressEvent ( self , arg__1 : PySide2 . QtGui . QMouseEvent ) -> None mousePressEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None","title":"mousePressEvent"},{"location":"reference/streamdeck_ui/gui/#mousereleaseevent","text":"def mouseReleaseEvent ( self , arg__1 : PySide2 . QtGui . QMouseEvent ) -> None mouseReleaseEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None","title":"mouseReleaseEvent"},{"location":"reference/streamdeck_ui/gui/#move","text":"def move ( ... ) move(self, arg__1: PySide2.QtCore.QPoint) -> None move(self, x: int, y: int) -> None","title":"move"},{"location":"reference/streamdeck_ui/gui/#moveevent","text":"def moveEvent ( self , event : PySide2 . QtGui . QMoveEvent ) -> None moveEvent(self, event: PySide2.QtGui.QMoveEvent) -> None","title":"moveEvent"},{"location":"reference/streamdeck_ui/gui/#movetothread","text":"def moveToThread ( self , thread : PySide2 . QtCore . QThread ) -> None moveToThread(self, thread: PySide2.QtCore.QThread) -> None","title":"moveToThread"},{"location":"reference/streamdeck_ui/gui/#nativeevent","text":"def nativeEvent ( self , eventType : PySide2 . QtCore . QByteArray , message : int ) -> typing . Tuple [ bool , int ] nativeEvent(self, eventType: PySide2.QtCore.QByteArray, message: int) -> typing.Tuple[bool, int]","title":"nativeEvent"},{"location":"reference/streamdeck_ui/gui/#nativeparentwidget","text":"def nativeParentWidget ( self ) -> PySide2 . QtWidgets . QWidget nativeParentWidget(self) -> PySide2.QtWidgets.QWidget","title":"nativeParentWidget"},{"location":"reference/streamdeck_ui/gui/#nextcheckstate","text":"def nextCheckState ( self ) -> None nextCheckState(self) -> None","title":"nextCheckState"},{"location":"reference/streamdeck_ui/gui/#nextinfocuschain","text":"def nextInFocusChain ( self ) -> PySide2 . QtWidgets . QWidget nextInFocusChain(self) -> PySide2.QtWidgets.QWidget","title":"nextInFocusChain"},{"location":"reference/streamdeck_ui/gui/#normalgeometry","text":"def normalGeometry ( self ) -> PySide2 . QtCore . QRect normalGeometry(self) -> PySide2.QtCore.QRect","title":"normalGeometry"},{"location":"reference/streamdeck_ui/gui/#objectname","text":"def objectName ( self ) -> str objectName(self) -> str","title":"objectName"},{"location":"reference/streamdeck_ui/gui/#objectnamechanged","text":"def objectNameChanged ( ... )","title":"objectNameChanged"},{"location":"reference/streamdeck_ui/gui/#overridewindowflags","text":"def overrideWindowFlags ( self , type : PySide2 . QtCore . Qt . WindowFlags ) -> None overrideWindowFlags(self, type: PySide2.QtCore.Qt.WindowFlags) -> None","title":"overrideWindowFlags"},{"location":"reference/streamdeck_ui/gui/#overridewindowstate","text":"def overrideWindowState ( self , state : PySide2 . QtCore . Qt . WindowStates ) -> None overrideWindowState(self, state: PySide2.QtCore.Qt.WindowStates) -> None","title":"overrideWindowState"},{"location":"reference/streamdeck_ui/gui/#paintengine","text":"def paintEngine ( self ) -> PySide2 . QtGui . QPaintEngine paintEngine(self) -> PySide2.QtGui.QPaintEngine","title":"paintEngine"},{"location":"reference/streamdeck_ui/gui/#paintevent","text":"def paintEvent ( self , arg__1 : PySide2 . QtGui . QPaintEvent ) -> None paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None","title":"paintEvent"},{"location":"reference/streamdeck_ui/gui/#paintingactive","text":"def paintingActive ( self ) -> bool paintingActive(self) -> bool","title":"paintingActive"},{"location":"reference/streamdeck_ui/gui/#palette","text":"def palette ( self ) -> PySide2 . QtGui . QPalette palette(self) -> PySide2.QtGui.QPalette","title":"palette"},{"location":"reference/streamdeck_ui/gui/#parent","text":"def parent ( self ) -> PySide2 . QtCore . QObject parent(self) -> PySide2.QtCore.QObject","title":"parent"},{"location":"reference/streamdeck_ui/gui/#parentwidget","text":"def parentWidget ( self ) -> PySide2 . QtWidgets . QWidget parentWidget(self) -> PySide2.QtWidgets.QWidget","title":"parentWidget"},{"location":"reference/streamdeck_ui/gui/#physicaldpix","text":"def physicalDpiX ( self ) -> int physicalDpiX(self) -> int","title":"physicalDpiX"},{"location":"reference/streamdeck_ui/gui/#physicaldpiy","text":"def physicalDpiY ( self ) -> int physicalDpiY(self) -> int","title":"physicalDpiY"},{"location":"reference/streamdeck_ui/gui/#popupmode","text":"def popupMode ( self ) -> PySide2 . QtWidgets . QToolButton . ToolButtonPopupMode popupMode(self) -> PySide2.QtWidgets.QToolButton.ToolButtonPopupMode","title":"popupMode"},{"location":"reference/streamdeck_ui/gui/#pos","text":"def pos ( self ) -> PySide2 . QtCore . QPoint pos(self) -> PySide2.QtCore.QPoint","title":"pos"},{"location":"reference/streamdeck_ui/gui/#pressed","text":"def pressed ( ... )","title":"pressed"},{"location":"reference/streamdeck_ui/gui/#previousinfocuschain","text":"def previousInFocusChain ( self ) -> PySide2 . QtWidgets . QWidget previousInFocusChain(self) -> PySide2.QtWidgets.QWidget","title":"previousInFocusChain"},{"location":"reference/streamdeck_ui/gui/#property","text":"def property ( self , name : bytes ) -> typing . Any property(self, name: bytes) -> typing.Any","title":"property"},{"location":"reference/streamdeck_ui/gui/#raise_","text":"def raise_ ( self ) -> None raise_(self) -> None","title":"raise_"},{"location":"reference/streamdeck_ui/gui/#receivers","text":"def receivers ( self , signal : bytes ) -> int receivers(self, signal: bytes) -> int","title":"receivers"},{"location":"reference/streamdeck_ui/gui/#rect","text":"def rect ( self ) -> PySide2 . QtCore . QRect rect(self) -> PySide2.QtCore.QRect","title":"rect"},{"location":"reference/streamdeck_ui/gui/#redirected","text":"def redirected ( self , offset : PySide2 . QtCore . QPoint ) -> PySide2 . QtGui . QPaintDevice redirected(self, offset: PySide2.QtCore.QPoint) -> PySide2.QtGui.QPaintDevice","title":"redirected"},{"location":"reference/streamdeck_ui/gui/#releasekeyboard","text":"def releaseKeyboard ( self ) -> None releaseKeyboard(self) -> None","title":"releaseKeyboard"},{"location":"reference/streamdeck_ui/gui/#releasemouse","text":"def releaseMouse ( self ) -> None releaseMouse(self) -> None","title":"releaseMouse"},{"location":"reference/streamdeck_ui/gui/#releaseshortcut","text":"def releaseShortcut ( self , id : int ) -> None releaseShortcut(self, id: int) -> None","title":"releaseShortcut"},{"location":"reference/streamdeck_ui/gui/#released","text":"def released ( ... )","title":"released"},{"location":"reference/streamdeck_ui/gui/#removeaction","text":"def removeAction ( self , action : PySide2 . QtWidgets . QAction ) -> None removeAction(self, action: PySide2.QtWidgets.QAction) -> None","title":"removeAction"},{"location":"reference/streamdeck_ui/gui/#removeeventfilter","text":"def removeEventFilter ( self , obj : PySide2 . QtCore . QObject ) -> None removeEventFilter(self, obj: PySide2.QtCore.QObject) -> None","title":"removeEventFilter"},{"location":"reference/streamdeck_ui/gui/#render","text":"def render ( ... ) render(self, painter: PySide2.QtGui.QPainter, targetOffset: PySide2.QtCore.QPoint, sourceRegion: PySide2.QtGui.QRegion = Default(QRegion), renderFlags: PySide2.QtWidgets.QWidget.RenderFlags = Instance(QWidget.RenderFlags(QWidget.DrawWindowBackground | QWidget.DrawChildren))) -> None render(self, target: PySide2.QtGui.QPaintDevice, targetOffset: PySide2.QtCore.QPoint = Default(QPoint), sourceRegion: PySide2.QtGui.QRegion = Default(QRegion), renderFlags: PySide2.QtWidgets.QWidget.RenderFlags = Instance(QWidget.RenderFlags(QWidget.DrawWindowBackground | QWidget.DrawChildren))) -> None","title":"render"},{"location":"reference/streamdeck_ui/gui/#repaint","text":"def repaint ( ... ) repaint(self) -> None repaint(self, arg__1: PySide2.QtCore.QRect) -> None repaint(self, arg__1: PySide2.QtGui.QRegion) -> None repaint(self, x: int, y: int, w: int, h: int) -> None","title":"repaint"},{"location":"reference/streamdeck_ui/gui/#resize","text":"def resize ( ... ) resize(self, arg__1: PySide2.QtCore.QSize) -> None resize(self, w: int, h: int) -> None","title":"resize"},{"location":"reference/streamdeck_ui/gui/#resizeevent","text":"def resizeEvent ( self , event : PySide2 . QtGui . QResizeEvent ) -> None resizeEvent(self, event: PySide2.QtGui.QResizeEvent) -> None","title":"resizeEvent"},{"location":"reference/streamdeck_ui/gui/#restoregeometry","text":"def restoreGeometry ( self , geometry : PySide2 . QtCore . QByteArray ) -> bool restoreGeometry(self, geometry: PySide2.QtCore.QByteArray) -> bool","title":"restoreGeometry"},{"location":"reference/streamdeck_ui/gui/#savegeometry","text":"def saveGeometry ( self ) -> PySide2 . QtCore . QByteArray saveGeometry(self) -> PySide2.QtCore.QByteArray","title":"saveGeometry"},{"location":"reference/streamdeck_ui/gui/#screen","text":"def screen ( self ) -> PySide2 . QtGui . QScreen screen(self) -> PySide2.QtGui.QScreen","title":"screen"},{"location":"reference/streamdeck_ui/gui/#scroll","text":"def scroll ( ... ) scroll(self, dx: int, dy: int) -> None scroll(self, dx: int, dy: int, arg__3: PySide2.QtCore.QRect) -> None","title":"scroll"},{"location":"reference/streamdeck_ui/gui/#sender","text":"def sender ( self ) -> PySide2 . QtCore . QObject sender(self) -> PySide2.QtCore.QObject","title":"sender"},{"location":"reference/streamdeck_ui/gui/#sendersignalindex","text":"def senderSignalIndex ( self ) -> int senderSignalIndex(self) -> int","title":"senderSignalIndex"},{"location":"reference/streamdeck_ui/gui/#setacceptdrops","text":"def setAcceptDrops ( self , on : bool ) -> None setAcceptDrops(self, on: bool) -> None","title":"setAcceptDrops"},{"location":"reference/streamdeck_ui/gui/#setaccessibledescription","text":"def setAccessibleDescription ( self , description : str ) -> None setAccessibleDescription(self, description: str) -> None","title":"setAccessibleDescription"},{"location":"reference/streamdeck_ui/gui/#setaccessiblename","text":"def setAccessibleName ( self , name : str ) -> None setAccessibleName(self, name: str) -> None","title":"setAccessibleName"},{"location":"reference/streamdeck_ui/gui/#setarrowtype","text":"def setArrowType ( self , type : PySide2 . QtCore . Qt . ArrowType ) -> None setArrowType(self, type: PySide2.QtCore.Qt.ArrowType) -> None","title":"setArrowType"},{"location":"reference/streamdeck_ui/gui/#setattribute","text":"def setAttribute ( self , arg__1 : PySide2 . QtCore . Qt . WidgetAttribute , on : bool = True ) -> None setAttribute(self, arg__1: PySide2.QtCore.Qt.WidgetAttribute, on: bool = True) -> None","title":"setAttribute"},{"location":"reference/streamdeck_ui/gui/#setautoexclusive","text":"def setAutoExclusive ( self , arg__1 : bool ) -> None setAutoExclusive(self, arg__1: bool) -> None","title":"setAutoExclusive"},{"location":"reference/streamdeck_ui/gui/#setautofillbackground","text":"def setAutoFillBackground ( self , enabled : bool ) -> None setAutoFillBackground(self, enabled: bool) -> None","title":"setAutoFillBackground"},{"location":"reference/streamdeck_ui/gui/#setautoraise","text":"def setAutoRaise ( self , enable : bool ) -> None setAutoRaise(self, enable: bool) -> None","title":"setAutoRaise"},{"location":"reference/streamdeck_ui/gui/#setautorepeat","text":"def setAutoRepeat ( self , arg__1 : bool ) -> None setAutoRepeat(self, arg__1: bool) -> None","title":"setAutoRepeat"},{"location":"reference/streamdeck_ui/gui/#setautorepeatdelay","text":"def setAutoRepeatDelay ( self , arg__1 : int ) -> None setAutoRepeatDelay(self, arg__1: int) -> None","title":"setAutoRepeatDelay"},{"location":"reference/streamdeck_ui/gui/#setautorepeatinterval","text":"def setAutoRepeatInterval ( self , arg__1 : int ) -> None setAutoRepeatInterval(self, arg__1: int) -> None","title":"setAutoRepeatInterval"},{"location":"reference/streamdeck_ui/gui/#setbackgroundrole","text":"def setBackgroundRole ( self , arg__1 : PySide2 . QtGui . QPalette . ColorRole ) -> None setBackgroundRole(self, arg__1: PySide2.QtGui.QPalette.ColorRole) -> None","title":"setBackgroundRole"},{"location":"reference/streamdeck_ui/gui/#setbasesize","text":"def setBaseSize ( ... ) setBaseSize(self, arg__1: PySide2.QtCore.QSize) -> None setBaseSize(self, basew: int, baseh: int) -> None","title":"setBaseSize"},{"location":"reference/streamdeck_ui/gui/#setcheckable","text":"def setCheckable ( self , arg__1 : bool ) -> None setCheckable(self, arg__1: bool) -> None","title":"setCheckable"},{"location":"reference/streamdeck_ui/gui/#setchecked","text":"def setChecked ( self , arg__1 : bool ) -> None setChecked(self, arg__1: bool) -> None","title":"setChecked"},{"location":"reference/streamdeck_ui/gui/#setcontentsmargins","text":"def setContentsMargins ( ... ) setContentsMargins(self, left: int, top: int, right: int, bottom: int) -> None setContentsMargins(self, margins: PySide2.QtCore.QMargins) -> None","title":"setContentsMargins"},{"location":"reference/streamdeck_ui/gui/#setcontextmenupolicy","text":"def setContextMenuPolicy ( self , policy : PySide2 . QtCore . Qt . ContextMenuPolicy ) -> None setContextMenuPolicy(self, policy: PySide2.QtCore.Qt.ContextMenuPolicy) -> None","title":"setContextMenuPolicy"},{"location":"reference/streamdeck_ui/gui/#setcursor","text":"def setCursor ( self , arg__1 : PySide2 . QtGui . QCursor ) -> None setCursor(self, arg__1: PySide2.QtGui.QCursor) -> None","title":"setCursor"},{"location":"reference/streamdeck_ui/gui/#setdefaultaction","text":"def setDefaultAction ( self , arg__1 : PySide2 . QtWidgets . QAction ) -> None setDefaultAction(self, arg__1: PySide2.QtWidgets.QAction) -> None","title":"setDefaultAction"},{"location":"reference/streamdeck_ui/gui/#setdisabled","text":"def setDisabled ( self , arg__1 : bool ) -> None setDisabled(self, arg__1: bool) -> None","title":"setDisabled"},{"location":"reference/streamdeck_ui/gui/#setdown","text":"def setDown ( self , arg__1 : bool ) -> None setDown(self, arg__1: bool) -> None","title":"setDown"},{"location":"reference/streamdeck_ui/gui/#setenabled","text":"def setEnabled ( self , arg__1 : bool ) -> None setEnabled(self, arg__1: bool) -> None","title":"setEnabled"},{"location":"reference/streamdeck_ui/gui/#setfixedheight","text":"def setFixedHeight ( self , h : int ) -> None setFixedHeight(self, h: int) -> None","title":"setFixedHeight"},{"location":"reference/streamdeck_ui/gui/#setfixedsize","text":"def setFixedSize ( ... ) setFixedSize(self, arg__1: PySide2.QtCore.QSize) -> None setFixedSize(self, w: int, h: int) -> None","title":"setFixedSize"},{"location":"reference/streamdeck_ui/gui/#setfixedwidth","text":"def setFixedWidth ( self , w : int ) -> None setFixedWidth(self, w: int) -> None","title":"setFixedWidth"},{"location":"reference/streamdeck_ui/gui/#setfocus","text":"def setFocus ( ... ) setFocus(self) -> None setFocus(self, reason: PySide2.QtCore.Qt.FocusReason) -> None","title":"setFocus"},{"location":"reference/streamdeck_ui/gui/#setfocuspolicy","text":"def setFocusPolicy ( self , policy : PySide2 . QtCore . Qt . FocusPolicy ) -> None setFocusPolicy(self, policy: PySide2.QtCore.Qt.FocusPolicy) -> None","title":"setFocusPolicy"},{"location":"reference/streamdeck_ui/gui/#setfocusproxy","text":"def setFocusProxy ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> None setFocusProxy(self, arg__1: PySide2.QtWidgets.QWidget) -> None","title":"setFocusProxy"},{"location":"reference/streamdeck_ui/gui/#setfont","text":"def setFont ( self , arg__1 : PySide2 . QtGui . QFont ) -> None setFont(self, arg__1: PySide2.QtGui.QFont) -> None","title":"setFont"},{"location":"reference/streamdeck_ui/gui/#setforegroundrole","text":"def setForegroundRole ( self , arg__1 : PySide2 . QtGui . QPalette . ColorRole ) -> None setForegroundRole(self, arg__1: PySide2.QtGui.QPalette.ColorRole) -> None","title":"setForegroundRole"},{"location":"reference/streamdeck_ui/gui/#setgeometry","text":"def setGeometry ( ... ) setGeometry(self, arg__1: PySide2.QtCore.QRect) -> None setGeometry(self, x: int, y: int, w: int, h: int) -> None","title":"setGeometry"},{"location":"reference/streamdeck_ui/gui/#setgraphicseffect","text":"def setGraphicsEffect ( self , effect : PySide2 . QtWidgets . QGraphicsEffect ) -> None setGraphicsEffect(self, effect: PySide2.QtWidgets.QGraphicsEffect) -> None","title":"setGraphicsEffect"},{"location":"reference/streamdeck_ui/gui/#sethidden","text":"def setHidden ( self , hidden : bool ) -> None setHidden(self, hidden: bool) -> None","title":"setHidden"},{"location":"reference/streamdeck_ui/gui/#seticon","text":"def setIcon ( self , icon : PySide2 . QtGui . QIcon ) -> None setIcon(self, icon: PySide2.QtGui.QIcon) -> None","title":"setIcon"},{"location":"reference/streamdeck_ui/gui/#seticonsize","text":"def setIconSize ( self , size : PySide2 . QtCore . QSize ) -> None setIconSize(self, size: PySide2.QtCore.QSize) -> None","title":"setIconSize"},{"location":"reference/streamdeck_ui/gui/#setinputmethodhints","text":"def setInputMethodHints ( self , hints : PySide2 . QtCore . Qt . InputMethodHints ) -> None setInputMethodHints(self, hints: PySide2.QtCore.Qt.InputMethodHints) -> None","title":"setInputMethodHints"},{"location":"reference/streamdeck_ui/gui/#setlayout","text":"def setLayout ( self , arg__1 : PySide2 . QtWidgets . QLayout ) -> None setLayout(self, arg__1: PySide2.QtWidgets.QLayout) -> None","title":"setLayout"},{"location":"reference/streamdeck_ui/gui/#setlayoutdirection","text":"def setLayoutDirection ( self , direction : PySide2 . QtCore . Qt . LayoutDirection ) -> None setLayoutDirection(self, direction: PySide2.QtCore.Qt.LayoutDirection) -> None","title":"setLayoutDirection"},{"location":"reference/streamdeck_ui/gui/#setlocale","text":"def setLocale ( self , locale : PySide2 . QtCore . QLocale ) -> None setLocale(self, locale: PySide2.QtCore.QLocale) -> None","title":"setLocale"},{"location":"reference/streamdeck_ui/gui/#setmask","text":"def setMask ( ... ) setMask(self, arg__1: PySide2.QtGui.QBitmap) -> None setMask(self, arg__1: PySide2.QtGui.QRegion) -> None","title":"setMask"},{"location":"reference/streamdeck_ui/gui/#setmaximumheight","text":"def setMaximumHeight ( self , maxh : int ) -> None setMaximumHeight(self, maxh: int) -> None","title":"setMaximumHeight"},{"location":"reference/streamdeck_ui/gui/#setmaximumsize","text":"def setMaximumSize ( ... ) setMaximumSize(self, arg__1: PySide2.QtCore.QSize) -> None setMaximumSize(self, maxw: int, maxh: int) -> None","title":"setMaximumSize"},{"location":"reference/streamdeck_ui/gui/#setmaximumwidth","text":"def setMaximumWidth ( self , maxw : int ) -> None setMaximumWidth(self, maxw: int) -> None","title":"setMaximumWidth"},{"location":"reference/streamdeck_ui/gui/#setmenu","text":"def setMenu ( self , menu : PySide2 . QtWidgets . QMenu ) -> None setMenu(self, menu: PySide2.QtWidgets.QMenu) -> None","title":"setMenu"},{"location":"reference/streamdeck_ui/gui/#setminimumheight","text":"def setMinimumHeight ( self , minh : int ) -> None setMinimumHeight(self, minh: int) -> None","title":"setMinimumHeight"},{"location":"reference/streamdeck_ui/gui/#setminimumsize","text":"def setMinimumSize ( ... ) setMinimumSize(self, arg__1: PySide2.QtCore.QSize) -> None setMinimumSize(self, minw: int, minh: int) -> None","title":"setMinimumSize"},{"location":"reference/streamdeck_ui/gui/#setminimumwidth","text":"def setMinimumWidth ( self , minw : int ) -> None setMinimumWidth(self, minw: int) -> None","title":"setMinimumWidth"},{"location":"reference/streamdeck_ui/gui/#setmousetracking","text":"def setMouseTracking ( self , enable : bool ) -> None setMouseTracking(self, enable: bool) -> None","title":"setMouseTracking"},{"location":"reference/streamdeck_ui/gui/#setobjectname","text":"def setObjectName ( self , name : str ) -> None setObjectName(self, name: str) -> None","title":"setObjectName"},{"location":"reference/streamdeck_ui/gui/#setpalette","text":"def setPalette ( self , arg__1 : PySide2 . QtGui . QPalette ) -> None setPalette(self, arg__1: PySide2.QtGui.QPalette) -> None","title":"setPalette"},{"location":"reference/streamdeck_ui/gui/#setparent","text":"def setParent ( ... ) setParent(self, parent: PySide2.QtCore.QObject) -> None setParent(self, parent: PySide2.QtWidgets.QWidget) -> None setParent(self, parent: PySide2.QtWidgets.QWidget, f: PySide2.QtCore.Qt.WindowFlags) -> None","title":"setParent"},{"location":"reference/streamdeck_ui/gui/#setpopupmode","text":"def setPopupMode ( self , mode : PySide2 . QtWidgets . QToolButton . ToolButtonPopupMode ) -> None setPopupMode(self, mode: PySide2.QtWidgets.QToolButton.ToolButtonPopupMode) -> None","title":"setPopupMode"},{"location":"reference/streamdeck_ui/gui/#setproperty","text":"def setProperty ( self , name : bytes , value : typing . Any ) -> bool setProperty(self, name: bytes, value: typing.Any) -> bool","title":"setProperty"},{"location":"reference/streamdeck_ui/gui/#setshortcut","text":"def setShortcut ( self , key : PySide2 . QtGui . QKeySequence ) -> None setShortcut(self, key: PySide2.QtGui.QKeySequence) -> None","title":"setShortcut"},{"location":"reference/streamdeck_ui/gui/#setshortcutautorepeat","text":"def setShortcutAutoRepeat ( self , id : int , enable : bool = True ) -> None setShortcutAutoRepeat(self, id: int, enable: bool = True) -> None","title":"setShortcutAutoRepeat"},{"location":"reference/streamdeck_ui/gui/#setshortcutenabled","text":"def setShortcutEnabled ( self , id : int , enable : bool = True ) -> None setShortcutEnabled(self, id: int, enable: bool = True) -> None","title":"setShortcutEnabled"},{"location":"reference/streamdeck_ui/gui/#setsizeincrement","text":"def setSizeIncrement ( ... ) setSizeIncrement(self, arg__1: PySide2.QtCore.QSize) -> None setSizeIncrement(self, w: int, h: int) -> None","title":"setSizeIncrement"},{"location":"reference/streamdeck_ui/gui/#setsizepolicy","text":"def setSizePolicy ( ... ) setSizePolicy(self, arg__1: PySide2.QtWidgets.QSizePolicy) -> None setSizePolicy(self, horizontal: PySide2.QtWidgets.QSizePolicy.Policy, vertical: PySide2.QtWidgets.QSizePolicy.Policy) -> None","title":"setSizePolicy"},{"location":"reference/streamdeck_ui/gui/#setstatustip","text":"def setStatusTip ( self , arg__1 : str ) -> None setStatusTip(self, arg__1: str) -> None","title":"setStatusTip"},{"location":"reference/streamdeck_ui/gui/#setstyle","text":"def setStyle ( self , arg__1 : PySide2 . QtWidgets . QStyle ) -> None setStyle(self, arg__1: PySide2.QtWidgets.QStyle) -> None","title":"setStyle"},{"location":"reference/streamdeck_ui/gui/#setstylesheet","text":"def setStyleSheet ( self , styleSheet : str ) -> None setStyleSheet(self, styleSheet: str) -> None","title":"setStyleSheet"},{"location":"reference/streamdeck_ui/gui/#settablettracking","text":"def setTabletTracking ( self , enable : bool ) -> None setTabletTracking(self, enable: bool) -> None","title":"setTabletTracking"},{"location":"reference/streamdeck_ui/gui/#settext","text":"def setText ( self , text : str ) -> None setText(self, text: str) -> None","title":"setText"},{"location":"reference/streamdeck_ui/gui/#settoolbuttonstyle","text":"def setToolButtonStyle ( self , style : PySide2 . QtCore . Qt . ToolButtonStyle ) -> None setToolButtonStyle(self, style: PySide2.QtCore.Qt.ToolButtonStyle) -> None","title":"setToolButtonStyle"},{"location":"reference/streamdeck_ui/gui/#settooltip","text":"def setToolTip ( self , arg__1 : str ) -> None setToolTip(self, arg__1: str) -> None","title":"setToolTip"},{"location":"reference/streamdeck_ui/gui/#settooltipduration","text":"def setToolTipDuration ( self , msec : int ) -> None setToolTipDuration(self, msec: int) -> None","title":"setToolTipDuration"},{"location":"reference/streamdeck_ui/gui/#setupdatesenabled","text":"def setUpdatesEnabled ( self , enable : bool ) -> None setUpdatesEnabled(self, enable: bool) -> None","title":"setUpdatesEnabled"},{"location":"reference/streamdeck_ui/gui/#setvisible","text":"def setVisible ( self , visible : bool ) -> None setVisible(self, visible: bool) -> None","title":"setVisible"},{"location":"reference/streamdeck_ui/gui/#setwhatsthis","text":"def setWhatsThis ( self , arg__1 : str ) -> None setWhatsThis(self, arg__1: str) -> None","title":"setWhatsThis"},{"location":"reference/streamdeck_ui/gui/#setwindowfilepath","text":"def setWindowFilePath ( self , filePath : str ) -> None setWindowFilePath(self, filePath: str) -> None","title":"setWindowFilePath"},{"location":"reference/streamdeck_ui/gui/#setwindowflag","text":"def setWindowFlag ( self , arg__1 : PySide2 . QtCore . Qt . WindowType , on : bool = True ) -> None setWindowFlag(self, arg__1: PySide2.QtCore.Qt.WindowType, on: bool = True) -> None","title":"setWindowFlag"},{"location":"reference/streamdeck_ui/gui/#setwindowflags","text":"def setWindowFlags ( self , type : PySide2 . QtCore . Qt . WindowFlags ) -> None setWindowFlags(self, type: PySide2.QtCore.Qt.WindowFlags) -> None","title":"setWindowFlags"},{"location":"reference/streamdeck_ui/gui/#setwindowicon","text":"def setWindowIcon ( self , icon : PySide2 . QtGui . QIcon ) -> None setWindowIcon(self, icon: PySide2.QtGui.QIcon) -> None","title":"setWindowIcon"},{"location":"reference/streamdeck_ui/gui/#setwindowicontext","text":"def setWindowIconText ( self , arg__1 : str ) -> None setWindowIconText(self, arg__1: str) -> None","title":"setWindowIconText"},{"location":"reference/streamdeck_ui/gui/#setwindowmodality","text":"def setWindowModality ( self , windowModality : PySide2 . QtCore . Qt . WindowModality ) -> None setWindowModality(self, windowModality: PySide2.QtCore.Qt.WindowModality) -> None","title":"setWindowModality"},{"location":"reference/streamdeck_ui/gui/#setwindowmodified","text":"def setWindowModified ( self , arg__1 : bool ) -> None setWindowModified(self, arg__1: bool) -> None","title":"setWindowModified"},{"location":"reference/streamdeck_ui/gui/#setwindowopacity","text":"def setWindowOpacity ( self , level : float ) -> None setWindowOpacity(self, level: float) -> None","title":"setWindowOpacity"},{"location":"reference/streamdeck_ui/gui/#setwindowrole","text":"def setWindowRole ( self , arg__1 : str ) -> None setWindowRole(self, arg__1: str) -> None","title":"setWindowRole"},{"location":"reference/streamdeck_ui/gui/#setwindowstate","text":"def setWindowState ( self , state : PySide2 . QtCore . Qt . WindowStates ) -> None setWindowState(self, state: PySide2.QtCore.Qt.WindowStates) -> None","title":"setWindowState"},{"location":"reference/streamdeck_ui/gui/#setwindowtitle","text":"def setWindowTitle ( self , arg__1 : str ) -> None setWindowTitle(self, arg__1: str) -> None","title":"setWindowTitle"},{"location":"reference/streamdeck_ui/gui/#sharedpainter","text":"def sharedPainter ( self ) -> PySide2 . QtGui . QPainter sharedPainter(self) -> PySide2.QtGui.QPainter","title":"sharedPainter"},{"location":"reference/streamdeck_ui/gui/#shortcut","text":"def shortcut ( self ) -> PySide2 . QtGui . QKeySequence shortcut(self) -> PySide2.QtGui.QKeySequence","title":"shortcut"},{"location":"reference/streamdeck_ui/gui/#show","text":"def show ( self ) -> None show(self) -> None","title":"show"},{"location":"reference/streamdeck_ui/gui/#showevent","text":"def showEvent ( self , event : PySide2 . QtGui . QShowEvent ) -> None showEvent(self, event: PySide2.QtGui.QShowEvent) -> None","title":"showEvent"},{"location":"reference/streamdeck_ui/gui/#showfullscreen","text":"def showFullScreen ( self ) -> None showFullScreen(self) -> None","title":"showFullScreen"},{"location":"reference/streamdeck_ui/gui/#showmaximized","text":"def showMaximized ( self ) -> None showMaximized(self) -> None","title":"showMaximized"},{"location":"reference/streamdeck_ui/gui/#showmenu","text":"def showMenu ( self ) -> None showMenu(self) -> None","title":"showMenu"},{"location":"reference/streamdeck_ui/gui/#showminimized","text":"def showMinimized ( self ) -> None showMinimized(self) -> None","title":"showMinimized"},{"location":"reference/streamdeck_ui/gui/#shownormal","text":"def showNormal ( self ) -> None showNormal(self) -> None","title":"showNormal"},{"location":"reference/streamdeck_ui/gui/#signalsblocked","text":"def signalsBlocked ( self ) -> bool signalsBlocked(self) -> bool","title":"signalsBlocked"},{"location":"reference/streamdeck_ui/gui/#size","text":"def size ( self ) -> PySide2 . QtCore . QSize size(self) -> PySide2.QtCore.QSize","title":"size"},{"location":"reference/streamdeck_ui/gui/#sizehint","text":"def sizeHint ( self ) -> PySide2 . QtCore . QSize sizeHint(self) -> PySide2.QtCore.QSize","title":"sizeHint"},{"location":"reference/streamdeck_ui/gui/#sizeincrement","text":"def sizeIncrement ( self ) -> PySide2 . QtCore . QSize sizeIncrement(self) -> PySide2.QtCore.QSize","title":"sizeIncrement"},{"location":"reference/streamdeck_ui/gui/#sizepolicy","text":"def sizePolicy ( self ) -> PySide2 . QtWidgets . QSizePolicy sizePolicy(self) -> PySide2.QtWidgets.QSizePolicy","title":"sizePolicy"},{"location":"reference/streamdeck_ui/gui/#stackunder","text":"def stackUnder ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> None stackUnder(self, arg__1: PySide2.QtWidgets.QWidget) -> None","title":"stackUnder"},{"location":"reference/streamdeck_ui/gui/#starttimer","text":"def startTimer ( self , interval : int , timerType : PySide2 . QtCore . Qt . TimerType = PySide2 . QtCore . Qt . TimerType . CoarseTimer ) -> int startTimer(self, interval: int, timerType: PySide2.QtCore.Qt.TimerType = PySide2.QtCore.Qt.TimerType.CoarseTimer) -> int","title":"startTimer"},{"location":"reference/streamdeck_ui/gui/#statustip","text":"def statusTip ( self ) -> str statusTip(self) -> str","title":"statusTip"},{"location":"reference/streamdeck_ui/gui/#style","text":"def style ( self ) -> PySide2 . QtWidgets . QStyle style(self) -> PySide2.QtWidgets.QStyle","title":"style"},{"location":"reference/streamdeck_ui/gui/#stylesheet","text":"def styleSheet ( self ) -> str styleSheet(self) -> str","title":"styleSheet"},{"location":"reference/streamdeck_ui/gui/#tabletevent","text":"def tabletEvent ( self , event : PySide2 . QtGui . QTabletEvent ) -> None tabletEvent(self, event: PySide2.QtGui.QTabletEvent) -> None","title":"tabletEvent"},{"location":"reference/streamdeck_ui/gui/#testattribute","text":"def testAttribute ( self , arg__1 : PySide2 . QtCore . Qt . WidgetAttribute ) -> bool testAttribute(self, arg__1: PySide2.QtCore.Qt.WidgetAttribute) -> bool","title":"testAttribute"},{"location":"reference/streamdeck_ui/gui/#text","text":"def text ( self ) -> str text(self) -> str","title":"text"},{"location":"reference/streamdeck_ui/gui/#thread","text":"def thread ( self ) -> PySide2 . QtCore . QThread thread(self) -> PySide2.QtCore.QThread","title":"thread"},{"location":"reference/streamdeck_ui/gui/#timerevent","text":"def timerEvent ( self , arg__1 : PySide2 . QtCore . QTimerEvent ) -> None timerEvent(self, arg__1: PySide2.QtCore.QTimerEvent) -> None","title":"timerEvent"},{"location":"reference/streamdeck_ui/gui/#toggle","text":"def toggle ( self ) -> None toggle(self) -> None","title":"toggle"},{"location":"reference/streamdeck_ui/gui/#toggled","text":"def toggled ( ... )","title":"toggled"},{"location":"reference/streamdeck_ui/gui/#toolbuttonstyle","text":"def toolButtonStyle ( self ) -> PySide2 . QtCore . Qt . ToolButtonStyle toolButtonStyle(self) -> PySide2.QtCore.Qt.ToolButtonStyle","title":"toolButtonStyle"},{"location":"reference/streamdeck_ui/gui/#tooltip","text":"def toolTip ( self ) -> str toolTip(self) -> str","title":"toolTip"},{"location":"reference/streamdeck_ui/gui/#tooltipduration","text":"def toolTipDuration ( self ) -> int toolTipDuration(self) -> int","title":"toolTipDuration"},{"location":"reference/streamdeck_ui/gui/#toplevelwidget","text":"def topLevelWidget ( self ) -> PySide2 . QtWidgets . QWidget topLevelWidget(self) -> PySide2.QtWidgets.QWidget","title":"topLevelWidget"},{"location":"reference/streamdeck_ui/gui/#tr","text":"def tr ( self , arg__1 : bytes , arg__2 : bytes = b '' , arg__3 : int = - 1 ) -> str tr(self, arg__1: bytes, arg__2: bytes = b'', arg__3: int = -1) -> str","title":"tr"},{"location":"reference/streamdeck_ui/gui/#triggered","text":"def triggered ( ... )","title":"triggered"},{"location":"reference/streamdeck_ui/gui/#undermouse","text":"def underMouse ( self ) -> bool underMouse(self) -> bool","title":"underMouse"},{"location":"reference/streamdeck_ui/gui/#ungrabgesture","text":"def ungrabGesture ( self , type : PySide2 . QtCore . Qt . GestureType ) -> None ungrabGesture(self, type: PySide2.QtCore.Qt.GestureType) -> None","title":"ungrabGesture"},{"location":"reference/streamdeck_ui/gui/#unsetcursor","text":"def unsetCursor ( self ) -> None unsetCursor(self) -> None","title":"unsetCursor"},{"location":"reference/streamdeck_ui/gui/#unsetlayoutdirection","text":"def unsetLayoutDirection ( self ) -> None unsetLayoutDirection(self) -> None","title":"unsetLayoutDirection"},{"location":"reference/streamdeck_ui/gui/#unsetlocale","text":"def unsetLocale ( self ) -> None unsetLocale(self) -> None","title":"unsetLocale"},{"location":"reference/streamdeck_ui/gui/#update","text":"def update ( ... ) update(self) -> None update(self, arg__1: PySide2.QtCore.QRect) -> None update(self, arg__1: PySide2.QtGui.QRegion) -> None update(self, x: int, y: int, w: int, h: int) -> None","title":"update"},{"location":"reference/streamdeck_ui/gui/#updategeometry","text":"def updateGeometry ( self ) -> None updateGeometry(self) -> None","title":"updateGeometry"},{"location":"reference/streamdeck_ui/gui/#updatemicrofocus","text":"def updateMicroFocus ( self ) -> None updateMicroFocus(self) -> None","title":"updateMicroFocus"},{"location":"reference/streamdeck_ui/gui/#updatesenabled","text":"def updatesEnabled ( self ) -> bool updatesEnabled(self) -> bool","title":"updatesEnabled"},{"location":"reference/streamdeck_ui/gui/#visibleregion","text":"def visibleRegion ( self ) -> PySide2 . QtGui . QRegion visibleRegion(self) -> PySide2.QtGui.QRegion","title":"visibleRegion"},{"location":"reference/streamdeck_ui/gui/#whatsthis","text":"def whatsThis ( self ) -> str whatsThis(self) -> str","title":"whatsThis"},{"location":"reference/streamdeck_ui/gui/#wheelevent","text":"def wheelEvent ( self , event : PySide2 . QtGui . QWheelEvent ) -> None wheelEvent(self, event: PySide2.QtGui.QWheelEvent) -> None","title":"wheelEvent"},{"location":"reference/streamdeck_ui/gui/#width","text":"def width ( self ) -> int width(self) -> int","title":"width"},{"location":"reference/streamdeck_ui/gui/#widthmm","text":"def widthMM ( self ) -> int widthMM(self) -> int","title":"widthMM"},{"location":"reference/streamdeck_ui/gui/#winid","text":"def winId ( self ) -> int winId(self) -> int","title":"winId"},{"location":"reference/streamdeck_ui/gui/#window","text":"def window ( self ) -> PySide2 . QtWidgets . QWidget window(self) -> PySide2.QtWidgets.QWidget","title":"window"},{"location":"reference/streamdeck_ui/gui/#windowfilepath","text":"def windowFilePath ( self ) -> str windowFilePath(self) -> str","title":"windowFilePath"},{"location":"reference/streamdeck_ui/gui/#windowflags","text":"def windowFlags ( self ) -> PySide2 . QtCore . Qt . WindowFlags windowFlags(self) -> PySide2.QtCore.Qt.WindowFlags","title":"windowFlags"},{"location":"reference/streamdeck_ui/gui/#windowhandle","text":"def windowHandle ( self ) -> PySide2 . QtGui . QWindow windowHandle(self) -> PySide2.QtGui.QWindow","title":"windowHandle"},{"location":"reference/streamdeck_ui/gui/#windowicon","text":"def windowIcon ( self ) -> PySide2 . QtGui . QIcon windowIcon(self) -> PySide2.QtGui.QIcon","title":"windowIcon"},{"location":"reference/streamdeck_ui/gui/#windowiconchanged","text":"def windowIconChanged ( ... )","title":"windowIconChanged"},{"location":"reference/streamdeck_ui/gui/#windowicontext","text":"def windowIconText ( self ) -> str windowIconText(self) -> str","title":"windowIconText"},{"location":"reference/streamdeck_ui/gui/#windowicontextchanged","text":"def windowIconTextChanged ( ... )","title":"windowIconTextChanged"},{"location":"reference/streamdeck_ui/gui/#windowmodality","text":"def windowModality ( self ) -> PySide2 . QtCore . Qt . WindowModality windowModality(self) -> PySide2.QtCore.Qt.WindowModality","title":"windowModality"},{"location":"reference/streamdeck_ui/gui/#windowopacity","text":"def windowOpacity ( self ) -> float windowOpacity(self) -> float","title":"windowOpacity"},{"location":"reference/streamdeck_ui/gui/#windowrole","text":"def windowRole ( self ) -> str windowRole(self) -> str","title":"windowRole"},{"location":"reference/streamdeck_ui/gui/#windowstate","text":"def windowState ( self ) -> PySide2 . QtCore . Qt . WindowStates windowState(self) -> PySide2.QtCore.Qt.WindowStates","title":"windowState"},{"location":"reference/streamdeck_ui/gui/#windowtitle","text":"def windowTitle ( self ) -> str windowTitle(self) -> str","title":"windowTitle"},{"location":"reference/streamdeck_ui/gui/#windowtitlechanged","text":"def windowTitleChanged ( ... )","title":"windowTitleChanged"},{"location":"reference/streamdeck_ui/gui/#windowtype","text":"def windowType ( self ) -> PySide2 . QtCore . Qt . WindowType windowType(self) -> PySide2.QtCore.Qt.WindowType","title":"windowType"},{"location":"reference/streamdeck_ui/gui/#x","text":"def x ( self ) -> int x(self) -> int","title":"x"},{"location":"reference/streamdeck_ui/gui/#y","text":"def y ( self ) -> int y(self) -> int","title":"y"},{"location":"reference/streamdeck_ui/gui/#mainwindow","text":"class MainWindow ( ) View Source class MainWindow ( QMainWindow ): def __init__ ( self ): super ( MainWindow , self ). __init__ () self . ui = Ui_MainWindow () self . ui . setupUi ( self ) self . window_shown: bool = True def closeEvent ( self , event ) -> None: # noqa: N802 - Part of QT signature. self . window_shown = False self . hide () event . ignore () def systray_clicked ( self , _status = None ) -> None: self . hide () if self . window_shown: self . window_shown = False return self . show () self . activateWindow () getattr ( self , \"raise\" )() # noqa: B009 - Can't call as self.raise() due to syntax error. self . window_shown = True","title":"MainWindow"},{"location":"reference/streamdeck_ui/gui/#ancestors-in-mro_1","text":"PySide2.QtWidgets.QMainWindow PySide2.QtWidgets.QWidget PySide2.QtCore.QObject PySide2.QtGui.QPaintDevice Shiboken.Object","title":"Ancestors (in MRO)"},{"location":"reference/streamdeck_ui/gui/#class-variables_1","text":"AllowNestedDocks AllowTabbedDocks AnimatedDocks DockOption DockOptions DrawChildren DrawWindowBackground ForceTabbedDocks GroupedDragging IgnoreMask PaintDeviceMetric PdmDepth PdmDevicePixelRatio PdmDevicePixelRatioScaled PdmDpiX PdmDpiY PdmHeight PdmHeightMM PdmNumColors PdmPhysicalDpiX PdmPhysicalDpiY PdmWidth PdmWidthMM RenderFlag RenderFlags VerticalTabs painters staticMetaObject","title":"Class variables"},{"location":"reference/streamdeck_ui/gui/#static-methods_1","text":"","title":"Static methods"},{"location":"reference/streamdeck_ui/gui/#connect_1","text":"def connect ( ... ) connect(arg__1: PySide2.QtCore.QObject, arg__2: bytes, arg__3: typing.Callable, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> bool connect(self, arg__1: bytes, arg__2: typing.Callable, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> bool connect(self, arg__1: bytes, arg__2: PySide2.QtCore.QObject, arg__3: bytes, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> bool connect(self, sender: PySide2.QtCore.QObject, signal: bytes, member: bytes, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> PySide2.QtCore.QMetaObject.Connection connect(sender: PySide2.QtCore.QObject, signal: PySide2.QtCore.QMetaMethod, receiver: PySide2.QtCore.QObject, method: PySide2.QtCore.QMetaMethod, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> PySide2.QtCore.QMetaObject.Connection connect(sender: PySide2.QtCore.QObject, signal: bytes, receiver: PySide2.QtCore.QObject, member: bytes, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> PySide2.QtCore.QMetaObject.Connection","title":"connect"},{"location":"reference/streamdeck_ui/gui/#createwindowcontainer_1","text":"def createWindowContainer ( window : PySide2 . QtGui . QWindow , parent : typing . Union [ PySide2 . QtWidgets . QWidget , NoneType ] = None , flags : PySide2 . QtCore . Qt . WindowFlags = Default ( Qt . WindowFlags ) ) -> PySide2 . QtWidgets . QWidget createWindowContainer(window: PySide2.QtGui.QWindow, parent: typing.Union[PySide2.QtWidgets.QWidget, NoneType] = None, flags: PySide2.QtCore.Qt.WindowFlags = Default(Qt.WindowFlags)) -> PySide2.QtWidgets.QWidget","title":"createWindowContainer"},{"location":"reference/streamdeck_ui/gui/#devicepixelratiofscale_1","text":"def devicePixelRatioFScale ( ) -> float devicePixelRatioFScale() -> float","title":"devicePixelRatioFScale"},{"location":"reference/streamdeck_ui/gui/#disconnect_1","text":"def disconnect ( ... ) disconnect(arg__1: PySide2.QtCore.QMetaObject.Connection) -> bool disconnect(arg__1: PySide2.QtCore.QObject, arg__2: bytes, arg__3: typing.Callable) -> bool disconnect(self, arg__1: bytes, arg__2: typing.Callable) -> bool disconnect(self, receiver: PySide2.QtCore.QObject, member: typing.Union[bytes, NoneType] = None) -> bool disconnect(self, signal: bytes, receiver: PySide2.QtCore.QObject, member: bytes) -> bool disconnect(sender: PySide2.QtCore.QObject, signal: PySide2.QtCore.QMetaMethod, receiver: PySide2.QtCore.QObject, member: PySide2.QtCore.QMetaMethod) -> bool disconnect(sender: PySide2.QtCore.QObject, signal: bytes, receiver: PySide2.QtCore.QObject, member: bytes) -> bool","title":"disconnect"},{"location":"reference/streamdeck_ui/gui/#find_1","text":"def find ( arg__1 : int ) -> PySide2 . QtWidgets . QWidget find(arg__1: int) -> PySide2.QtWidgets.QWidget","title":"find"},{"location":"reference/streamdeck_ui/gui/#keyboardgrabber_1","text":"def keyboardGrabber ( ) -> PySide2 . QtWidgets . QWidget keyboardGrabber() -> PySide2.QtWidgets.QWidget","title":"keyboardGrabber"},{"location":"reference/streamdeck_ui/gui/#mousegrabber_1","text":"def mouseGrabber ( ) -> PySide2 . QtWidgets . QWidget mouseGrabber() -> PySide2.QtWidgets.QWidget","title":"mouseGrabber"},{"location":"reference/streamdeck_ui/gui/#registeruserdata_1","text":"def registerUserData ( ) -> int registerUserData() -> int","title":"registerUserData"},{"location":"reference/streamdeck_ui/gui/#settaborder_1","text":"def setTabOrder ( arg__1 : PySide2 . QtWidgets . QWidget , arg__2 : PySide2 . QtWidgets . QWidget ) -> None setTabOrder(arg__1: PySide2.QtWidgets.QWidget, arg__2: PySide2.QtWidgets.QWidget) -> None","title":"setTabOrder"},{"location":"reference/streamdeck_ui/gui/#methods_1","text":"","title":"Methods"},{"location":"reference/streamdeck_ui/gui/#acceptdrops_1","text":"def acceptDrops ( self ) -> bool acceptDrops(self) -> bool","title":"acceptDrops"},{"location":"reference/streamdeck_ui/gui/#accessibledescription_1","text":"def accessibleDescription ( self ) -> str accessibleDescription(self) -> str","title":"accessibleDescription"},{"location":"reference/streamdeck_ui/gui/#accessiblename_1","text":"def accessibleName ( self ) -> str accessibleName(self) -> str","title":"accessibleName"},{"location":"reference/streamdeck_ui/gui/#actionevent_1","text":"def actionEvent ( self , event : PySide2 . QtGui . QActionEvent ) -> None actionEvent(self, event: PySide2.QtGui.QActionEvent) -> None","title":"actionEvent"},{"location":"reference/streamdeck_ui/gui/#actions_1","text":"def actions ( self ) -> typing . List [ PySide2 . QtWidgets . QAction ] actions(self) -> typing.List[PySide2.QtWidgets.QAction]","title":"actions"},{"location":"reference/streamdeck_ui/gui/#activatewindow_1","text":"def activateWindow ( self ) -> None activateWindow(self) -> None","title":"activateWindow"},{"location":"reference/streamdeck_ui/gui/#addaction_1","text":"def addAction ( self , action : PySide2 . QtWidgets . QAction ) -> None addAction(self, action: PySide2.QtWidgets.QAction) -> None","title":"addAction"},{"location":"reference/streamdeck_ui/gui/#addactions_1","text":"def addActions ( self , actions : typing . Sequence [ PySide2 . QtWidgets . QAction ] ) -> None addActions(self, actions: typing.Sequence[PySide2.QtWidgets.QAction]) -> None","title":"addActions"},{"location":"reference/streamdeck_ui/gui/#adddockwidget","text":"def addDockWidget ( ... ) addDockWidget(self, area: PySide2.QtCore.Qt.DockWidgetArea, dockwidget: PySide2.QtWidgets.QDockWidget) -> None addDockWidget(self, area: PySide2.QtCore.Qt.DockWidgetArea, dockwidget: PySide2.QtWidgets.QDockWidget, orientation: PySide2.QtCore.Qt.Orientation) -> None","title":"addDockWidget"},{"location":"reference/streamdeck_ui/gui/#addtoolbar","text":"def addToolBar ( ... ) addToolBar(self, area: PySide2.QtCore.Qt.ToolBarArea, toolbar: PySide2.QtWidgets.QToolBar) -> None addToolBar(self, title: str) -> PySide2.QtWidgets.QToolBar addToolBar(self, toolbar: PySide2.QtWidgets.QToolBar) -> None","title":"addToolBar"},{"location":"reference/streamdeck_ui/gui/#addtoolbarbreak","text":"def addToolBarBreak ( self , area : PySide2 . QtCore . Qt . ToolBarArea = PySide2 . QtCore . Qt . ToolBarArea . TopToolBarArea ) -> None addToolBarBreak(self, area: PySide2.QtCore.Qt.ToolBarArea = PySide2.QtCore.Qt.ToolBarArea.TopToolBarArea) -> None","title":"addToolBarBreak"},{"location":"reference/streamdeck_ui/gui/#adjustsize_1","text":"def adjustSize ( self ) -> None adjustSize(self) -> None","title":"adjustSize"},{"location":"reference/streamdeck_ui/gui/#autofillbackground_1","text":"def autoFillBackground ( self ) -> bool autoFillBackground(self) -> bool","title":"autoFillBackground"},{"location":"reference/streamdeck_ui/gui/#backgroundrole_1","text":"def backgroundRole ( self ) -> PySide2 . QtGui . QPalette . ColorRole backgroundRole(self) -> PySide2.QtGui.QPalette.ColorRole","title":"backgroundRole"},{"location":"reference/streamdeck_ui/gui/#backingstore_1","text":"def backingStore ( self ) -> PySide2 . QtGui . QBackingStore backingStore(self) -> PySide2.QtGui.QBackingStore","title":"backingStore"},{"location":"reference/streamdeck_ui/gui/#basesize_1","text":"def baseSize ( self ) -> PySide2 . QtCore . QSize baseSize(self) -> PySide2.QtCore.QSize","title":"baseSize"},{"location":"reference/streamdeck_ui/gui/#blocksignals_1","text":"def blockSignals ( self , b : bool ) -> bool blockSignals(self, b: bool) -> bool","title":"blockSignals"},{"location":"reference/streamdeck_ui/gui/#centralwidget","text":"def centralWidget ( self ) -> PySide2 . QtWidgets . QWidget centralWidget(self) -> PySide2.QtWidgets.QWidget","title":"centralWidget"},{"location":"reference/streamdeck_ui/gui/#changeevent_1","text":"def changeEvent ( self , event : PySide2 . QtCore . QEvent ) -> None changeEvent(self, event: PySide2.QtCore.QEvent) -> None","title":"changeEvent"},{"location":"reference/streamdeck_ui/gui/#childat_1","text":"def childAt ( ... ) childAt(self, p: PySide2.QtCore.QPoint) -> PySide2.QtWidgets.QWidget childAt(self, x: int, y: int) -> PySide2.QtWidgets.QWidget","title":"childAt"},{"location":"reference/streamdeck_ui/gui/#childevent_1","text":"def childEvent ( self , event : PySide2 . QtCore . QChildEvent ) -> None childEvent(self, event: PySide2.QtCore.QChildEvent) -> None","title":"childEvent"},{"location":"reference/streamdeck_ui/gui/#children_1","text":"def children ( self ) -> typing . List [ PySide2 . QtCore . QObject ] children(self) -> typing.List[PySide2.QtCore.QObject]","title":"children"},{"location":"reference/streamdeck_ui/gui/#childrenrect_1","text":"def childrenRect ( self ) -> PySide2 . QtCore . QRect childrenRect(self) -> PySide2.QtCore.QRect","title":"childrenRect"},{"location":"reference/streamdeck_ui/gui/#childrenregion_1","text":"def childrenRegion ( self ) -> PySide2 . QtGui . QRegion childrenRegion(self) -> PySide2.QtGui.QRegion","title":"childrenRegion"},{"location":"reference/streamdeck_ui/gui/#clearfocus_1","text":"def clearFocus ( self ) -> None clearFocus(self) -> None","title":"clearFocus"},{"location":"reference/streamdeck_ui/gui/#clearmask_1","text":"def clearMask ( self ) -> None clearMask(self) -> None","title":"clearMask"},{"location":"reference/streamdeck_ui/gui/#close_1","text":"def close ( self ) -> bool close(self) -> bool","title":"close"},{"location":"reference/streamdeck_ui/gui/#closeevent_1","text":"def closeEvent ( self , event ) -> None closeEvent(self, event: PySide2.QtGui.QCloseEvent) -> None View Source def closeEvent ( self , event ) -> None : # noqa : N802 - Part of QT signature . self . window_shown = False self . hide () event . ignore ()","title":"closeEvent"},{"location":"reference/streamdeck_ui/gui/#colorcount_1","text":"def colorCount ( self ) -> int colorCount(self) -> int","title":"colorCount"},{"location":"reference/streamdeck_ui/gui/#connectnotify_1","text":"def connectNotify ( self , signal : PySide2 . QtCore . QMetaMethod ) -> None connectNotify(self, signal: PySide2.QtCore.QMetaMethod) -> None","title":"connectNotify"},{"location":"reference/streamdeck_ui/gui/#contentsmargins_1","text":"def contentsMargins ( self ) -> PySide2 . QtCore . QMargins contentsMargins(self) -> PySide2.QtCore.QMargins","title":"contentsMargins"},{"location":"reference/streamdeck_ui/gui/#contentsrect_1","text":"def contentsRect ( self ) -> PySide2 . QtCore . QRect contentsRect(self) -> PySide2.QtCore.QRect","title":"contentsRect"},{"location":"reference/streamdeck_ui/gui/#contextmenuevent_1","text":"def contextMenuEvent ( self , event : PySide2 . QtGui . QContextMenuEvent ) -> None contextMenuEvent(self, event: PySide2.QtGui.QContextMenuEvent) -> None","title":"contextMenuEvent"},{"location":"reference/streamdeck_ui/gui/#contextmenupolicy_1","text":"def contextMenuPolicy ( self ) -> PySide2 . QtCore . Qt . ContextMenuPolicy contextMenuPolicy(self) -> PySide2.QtCore.Qt.ContextMenuPolicy","title":"contextMenuPolicy"},{"location":"reference/streamdeck_ui/gui/#corner","text":"def corner ( self , corner : PySide2 . QtCore . Qt . Corner ) -> PySide2 . QtCore . Qt . DockWidgetArea corner(self, corner: PySide2.QtCore.Qt.Corner) -> PySide2.QtCore.Qt.DockWidgetArea","title":"corner"},{"location":"reference/streamdeck_ui/gui/#create_1","text":"def create ( self , arg__1 : int = 0 , initializeWindow : bool = True , destroyOldWindow : bool = True ) -> None create(self, arg__1: int = 0, initializeWindow: bool = True, destroyOldWindow: bool = True) -> None","title":"create"},{"location":"reference/streamdeck_ui/gui/#createpopupmenu","text":"def createPopupMenu ( self ) -> PySide2 . QtWidgets . QMenu createPopupMenu(self) -> PySide2.QtWidgets.QMenu","title":"createPopupMenu"},{"location":"reference/streamdeck_ui/gui/#createwinid_1","text":"def createWinId ( self ) -> None createWinId(self) -> None","title":"createWinId"},{"location":"reference/streamdeck_ui/gui/#cursor_1","text":"def cursor ( self ) -> PySide2 . QtGui . QCursor cursor(self) -> PySide2.QtGui.QCursor","title":"cursor"},{"location":"reference/streamdeck_ui/gui/#customcontextmenurequested_1","text":"def customContextMenuRequested ( ... )","title":"customContextMenuRequested"},{"location":"reference/streamdeck_ui/gui/#customevent_1","text":"def customEvent ( self , event : PySide2 . QtCore . QEvent ) -> None customEvent(self, event: PySide2.QtCore.QEvent) -> None","title":"customEvent"},{"location":"reference/streamdeck_ui/gui/#deletelater_1","text":"def deleteLater ( self ) -> None deleteLater(self) -> None","title":"deleteLater"},{"location":"reference/streamdeck_ui/gui/#depth_1","text":"def depth ( self ) -> int depth(self) -> int","title":"depth"},{"location":"reference/streamdeck_ui/gui/#destroy_1","text":"def destroy ( self , destroyWindow : bool = True , destroySubWindows : bool = True ) -> None destroy(self, destroyWindow: bool = True, destroySubWindows: bool = True) -> None","title":"destroy"},{"location":"reference/streamdeck_ui/gui/#destroyed_1","text":"def destroyed ( ... )","title":"destroyed"},{"location":"reference/streamdeck_ui/gui/#devtype_1","text":"def devType ( self ) -> int devType(self) -> int","title":"devType"},{"location":"reference/streamdeck_ui/gui/#devicepixelratio_1","text":"def devicePixelRatio ( self ) -> int devicePixelRatio(self) -> int","title":"devicePixelRatio"},{"location":"reference/streamdeck_ui/gui/#devicepixelratiof_1","text":"def devicePixelRatioF ( self ) -> float devicePixelRatioF(self) -> float","title":"devicePixelRatioF"},{"location":"reference/streamdeck_ui/gui/#disconnectnotify_1","text":"def disconnectNotify ( self , signal : PySide2 . QtCore . QMetaMethod ) -> None disconnectNotify(self, signal: PySide2.QtCore.QMetaMethod) -> None","title":"disconnectNotify"},{"location":"reference/streamdeck_ui/gui/#dockoptions","text":"def dockOptions ( self ) -> PySide2 . QtWidgets . QMainWindow . DockOptions dockOptions(self) -> PySide2.QtWidgets.QMainWindow.DockOptions","title":"dockOptions"},{"location":"reference/streamdeck_ui/gui/#dockwidgetarea","text":"def dockWidgetArea ( self , dockwidget : PySide2 . QtWidgets . QDockWidget ) -> PySide2 . QtCore . Qt . DockWidgetArea dockWidgetArea(self, dockwidget: PySide2.QtWidgets.QDockWidget) -> PySide2.QtCore.Qt.DockWidgetArea","title":"dockWidgetArea"},{"location":"reference/streamdeck_ui/gui/#documentmode","text":"def documentMode ( self ) -> bool documentMode(self) -> bool","title":"documentMode"},{"location":"reference/streamdeck_ui/gui/#dragenterevent_1","text":"def dragEnterEvent ( self , event : PySide2 . QtGui . QDragEnterEvent ) -> None dragEnterEvent(self, event: PySide2.QtGui.QDragEnterEvent) -> None","title":"dragEnterEvent"},{"location":"reference/streamdeck_ui/gui/#dragleaveevent_1","text":"def dragLeaveEvent ( self , event : PySide2 . QtGui . QDragLeaveEvent ) -> None dragLeaveEvent(self, event: PySide2.QtGui.QDragLeaveEvent) -> None","title":"dragLeaveEvent"},{"location":"reference/streamdeck_ui/gui/#dragmoveevent_1","text":"def dragMoveEvent ( self , event : PySide2 . QtGui . QDragMoveEvent ) -> None dragMoveEvent(self, event: PySide2.QtGui.QDragMoveEvent) -> None","title":"dragMoveEvent"},{"location":"reference/streamdeck_ui/gui/#dropevent_1","text":"def dropEvent ( self , event : PySide2 . QtGui . QDropEvent ) -> None dropEvent(self, event: PySide2.QtGui.QDropEvent) -> None","title":"dropEvent"},{"location":"reference/streamdeck_ui/gui/#dumpobjectinfo_1","text":"def dumpObjectInfo ( self ) -> None dumpObjectInfo(self) -> None","title":"dumpObjectInfo"},{"location":"reference/streamdeck_ui/gui/#dumpobjecttree_1","text":"def dumpObjectTree ( self ) -> None dumpObjectTree(self) -> None","title":"dumpObjectTree"},{"location":"reference/streamdeck_ui/gui/#dynamicpropertynames_1","text":"def dynamicPropertyNames ( self ) -> typing . List [ PySide2 . QtCore . QByteArray ] dynamicPropertyNames(self) -> typing.List[PySide2.QtCore.QByteArray]","title":"dynamicPropertyNames"},{"location":"reference/streamdeck_ui/gui/#effectivewinid_1","text":"def effectiveWinId ( self ) -> int effectiveWinId(self) -> int","title":"effectiveWinId"},{"location":"reference/streamdeck_ui/gui/#emit_1","text":"def emit ( self , arg__1 : bytes , * args : None ) -> bool emit(self, arg__1: bytes, *args: None) -> bool","title":"emit"},{"location":"reference/streamdeck_ui/gui/#ensurepolished_1","text":"def ensurePolished ( self ) -> None ensurePolished(self) -> None","title":"ensurePolished"},{"location":"reference/streamdeck_ui/gui/#enterevent_1","text":"def enterEvent ( self , event : PySide2 . QtCore . QEvent ) -> None enterEvent(self, event: PySide2.QtCore.QEvent) -> None","title":"enterEvent"},{"location":"reference/streamdeck_ui/gui/#event_1","text":"def event ( self , event : PySide2 . QtCore . QEvent ) -> bool event(self, event: PySide2.QtCore.QEvent) -> bool","title":"event"},{"location":"reference/streamdeck_ui/gui/#eventfilter_1","text":"def eventFilter ( self , watched : PySide2 . QtCore . QObject , event : PySide2 . QtCore . QEvent ) -> bool eventFilter(self, watched: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) -> bool","title":"eventFilter"},{"location":"reference/streamdeck_ui/gui/#findchild_1","text":"def findChild ( self , arg__1 : type , arg__2 : str = '' ) -> object findChild(self, arg__1: type, arg__2: str = '') -> object","title":"findChild"},{"location":"reference/streamdeck_ui/gui/#findchildren_1","text":"def findChildren ( ... ) findChildren(self, arg__1: type, arg__2: PySide2.QtCore.QRegExp) -> typing.Iterable findChildren(self, arg__1: type, arg__2: PySide2.QtCore.QRegularExpression) -> typing.Iterable findChildren(self, arg__1: type, arg__2: str = '') -> typing.Iterable","title":"findChildren"},{"location":"reference/streamdeck_ui/gui/#focusinevent_1","text":"def focusInEvent ( self , event : PySide2 . QtGui . QFocusEvent ) -> None focusInEvent(self, event: PySide2.QtGui.QFocusEvent) -> None","title":"focusInEvent"},{"location":"reference/streamdeck_ui/gui/#focusnextchild_1","text":"def focusNextChild ( self ) -> bool focusNextChild(self) -> bool","title":"focusNextChild"},{"location":"reference/streamdeck_ui/gui/#focusnextprevchild_1","text":"def focusNextPrevChild ( self , next : bool ) -> bool focusNextPrevChild(self, next: bool) -> bool","title":"focusNextPrevChild"},{"location":"reference/streamdeck_ui/gui/#focusoutevent_1","text":"def focusOutEvent ( self , event : PySide2 . QtGui . QFocusEvent ) -> None focusOutEvent(self, event: PySide2.QtGui.QFocusEvent) -> None","title":"focusOutEvent"},{"location":"reference/streamdeck_ui/gui/#focuspolicy_1","text":"def focusPolicy ( self ) -> PySide2 . QtCore . Qt . FocusPolicy focusPolicy(self) -> PySide2.QtCore.Qt.FocusPolicy","title":"focusPolicy"},{"location":"reference/streamdeck_ui/gui/#focuspreviouschild_1","text":"def focusPreviousChild ( self ) -> bool focusPreviousChild(self) -> bool","title":"focusPreviousChild"},{"location":"reference/streamdeck_ui/gui/#focusproxy_1","text":"def focusProxy ( self ) -> PySide2 . QtWidgets . QWidget focusProxy(self) -> PySide2.QtWidgets.QWidget","title":"focusProxy"},{"location":"reference/streamdeck_ui/gui/#focuswidget_1","text":"def focusWidget ( self ) -> PySide2 . QtWidgets . QWidget focusWidget(self) -> PySide2.QtWidgets.QWidget","title":"focusWidget"},{"location":"reference/streamdeck_ui/gui/#font_1","text":"def font ( self ) -> PySide2 . QtGui . QFont font(self) -> PySide2.QtGui.QFont","title":"font"},{"location":"reference/streamdeck_ui/gui/#fontinfo_1","text":"def fontInfo ( self ) -> PySide2 . QtGui . QFontInfo fontInfo(self) -> PySide2.QtGui.QFontInfo","title":"fontInfo"},{"location":"reference/streamdeck_ui/gui/#fontmetrics_1","text":"def fontMetrics ( self ) -> PySide2 . QtGui . QFontMetrics fontMetrics(self) -> PySide2.QtGui.QFontMetrics","title":"fontMetrics"},{"location":"reference/streamdeck_ui/gui/#foregroundrole_1","text":"def foregroundRole ( self ) -> PySide2 . QtGui . QPalette . ColorRole foregroundRole(self) -> PySide2.QtGui.QPalette.ColorRole","title":"foregroundRole"},{"location":"reference/streamdeck_ui/gui/#framegeometry_1","text":"def frameGeometry ( self ) -> PySide2 . QtCore . QRect frameGeometry(self) -> PySide2.QtCore.QRect","title":"frameGeometry"},{"location":"reference/streamdeck_ui/gui/#framesize_1","text":"def frameSize ( self ) -> PySide2 . QtCore . QSize frameSize(self) -> PySide2.QtCore.QSize","title":"frameSize"},{"location":"reference/streamdeck_ui/gui/#geometry_1","text":"def geometry ( self ) -> PySide2 . QtCore . QRect geometry(self) -> PySide2.QtCore.QRect","title":"geometry"},{"location":"reference/streamdeck_ui/gui/#getcontentsmargins_1","text":"def getContentsMargins ( self ) -> typing . Tuple [ int , int , int , int ] getContentsMargins(self) -> typing.Tuple[int, int, int, int]","title":"getContentsMargins"},{"location":"reference/streamdeck_ui/gui/#grab_1","text":"def grab ( self , rectangle : PySide2 . QtCore . QRect = PySide2 . QtCore . QRect ( 0 , 0 , - 1 , - 1 ) ) -> PySide2 . QtGui . QPixmap grab(self, rectangle: PySide2.QtCore.QRect = PySide2.QtCore.QRect(0, 0, -1, -1)) -> PySide2.QtGui.QPixmap","title":"grab"},{"location":"reference/streamdeck_ui/gui/#grabgesture_1","text":"def grabGesture ( self , type : PySide2 . QtCore . Qt . GestureType , flags : PySide2 . QtCore . Qt . GestureFlags = Default ( Qt . GestureFlags ) ) -> None grabGesture(self, type: PySide2.QtCore.Qt.GestureType, flags: PySide2.QtCore.Qt.GestureFlags = Default(Qt.GestureFlags)) -> None","title":"grabGesture"},{"location":"reference/streamdeck_ui/gui/#grabkeyboard_1","text":"def grabKeyboard ( self ) -> None grabKeyboard(self) -> None","title":"grabKeyboard"},{"location":"reference/streamdeck_ui/gui/#grabmouse_1","text":"def grabMouse ( ... ) grabMouse(self) -> None grabMouse(self, arg__1: PySide2.QtGui.QCursor) -> None","title":"grabMouse"},{"location":"reference/streamdeck_ui/gui/#grabshortcut_1","text":"def grabShortcut ( self , key : PySide2 . QtGui . QKeySequence , context : PySide2 . QtCore . Qt . ShortcutContext = PySide2 . QtCore . Qt . ShortcutContext . WindowShortcut ) -> int grabShortcut(self, key: PySide2.QtGui.QKeySequence, context: PySide2.QtCore.Qt.ShortcutContext = PySide2.QtCore.Qt.ShortcutContext.WindowShortcut) -> int","title":"grabShortcut"},{"location":"reference/streamdeck_ui/gui/#graphicseffect_1","text":"def graphicsEffect ( self ) -> PySide2 . QtWidgets . QGraphicsEffect graphicsEffect(self) -> PySide2.QtWidgets.QGraphicsEffect","title":"graphicsEffect"},{"location":"reference/streamdeck_ui/gui/#graphicsproxywidget_1","text":"def graphicsProxyWidget ( self ) -> PySide2 . QtWidgets . QGraphicsProxyWidget graphicsProxyWidget(self) -> PySide2.QtWidgets.QGraphicsProxyWidget","title":"graphicsProxyWidget"},{"location":"reference/streamdeck_ui/gui/#hasfocus_1","text":"def hasFocus ( self ) -> bool hasFocus(self) -> bool","title":"hasFocus"},{"location":"reference/streamdeck_ui/gui/#hasheightforwidth_1","text":"def hasHeightForWidth ( self ) -> bool hasHeightForWidth(self) -> bool","title":"hasHeightForWidth"},{"location":"reference/streamdeck_ui/gui/#hasmousetracking_1","text":"def hasMouseTracking ( self ) -> bool hasMouseTracking(self) -> bool","title":"hasMouseTracking"},{"location":"reference/streamdeck_ui/gui/#hastablettracking_1","text":"def hasTabletTracking ( self ) -> bool hasTabletTracking(self) -> bool","title":"hasTabletTracking"},{"location":"reference/streamdeck_ui/gui/#height_1","text":"def height ( self ) -> int height(self) -> int","title":"height"},{"location":"reference/streamdeck_ui/gui/#heightforwidth_1","text":"def heightForWidth ( self , arg__1 : int ) -> int heightForWidth(self, arg__1: int) -> int","title":"heightForWidth"},{"location":"reference/streamdeck_ui/gui/#heightmm_1","text":"def heightMM ( self ) -> int heightMM(self) -> int","title":"heightMM"},{"location":"reference/streamdeck_ui/gui/#hide_1","text":"def hide ( self ) -> None hide(self) -> None","title":"hide"},{"location":"reference/streamdeck_ui/gui/#hideevent_1","text":"def hideEvent ( self , event : PySide2 . QtGui . QHideEvent ) -> None hideEvent(self, event: PySide2.QtGui.QHideEvent) -> None","title":"hideEvent"},{"location":"reference/streamdeck_ui/gui/#iconsize_1","text":"def iconSize ( self ) -> PySide2 . QtCore . QSize iconSize(self) -> PySide2.QtCore.QSize","title":"iconSize"},{"location":"reference/streamdeck_ui/gui/#iconsizechanged","text":"def iconSizeChanged ( ... )","title":"iconSizeChanged"},{"location":"reference/streamdeck_ui/gui/#inherits_1","text":"def inherits ( self , classname : bytes ) -> bool inherits(self, classname: bytes) -> bool","title":"inherits"},{"location":"reference/streamdeck_ui/gui/#initpainter_1","text":"def initPainter ( self , painter : PySide2 . QtGui . QPainter ) -> None initPainter(self, painter: PySide2.QtGui.QPainter) -> None","title":"initPainter"},{"location":"reference/streamdeck_ui/gui/#inputmethodevent_1","text":"def inputMethodEvent ( self , event : PySide2 . QtGui . QInputMethodEvent ) -> None inputMethodEvent(self, event: PySide2.QtGui.QInputMethodEvent) -> None","title":"inputMethodEvent"},{"location":"reference/streamdeck_ui/gui/#inputmethodhints_1","text":"def inputMethodHints ( self ) -> PySide2 . QtCore . Qt . InputMethodHints inputMethodHints(self) -> PySide2.QtCore.Qt.InputMethodHints","title":"inputMethodHints"},{"location":"reference/streamdeck_ui/gui/#inputmethodquery_1","text":"def inputMethodQuery ( self , arg__1 : PySide2 . QtCore . Qt . InputMethodQuery ) -> typing . Any inputMethodQuery(self, arg__1: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any","title":"inputMethodQuery"},{"location":"reference/streamdeck_ui/gui/#insertaction_1","text":"def insertAction ( self , before : PySide2 . QtWidgets . QAction , action : PySide2 . QtWidgets . QAction ) -> None insertAction(self, before: PySide2.QtWidgets.QAction, action: PySide2.QtWidgets.QAction) -> None","title":"insertAction"},{"location":"reference/streamdeck_ui/gui/#insertactions_1","text":"def insertActions ( self , before : PySide2 . QtWidgets . QAction , actions : typing . Sequence [ PySide2 . QtWidgets . QAction ] ) -> None insertActions(self, before: PySide2.QtWidgets.QAction, actions: typing.Sequence[PySide2.QtWidgets.QAction]) -> None","title":"insertActions"},{"location":"reference/streamdeck_ui/gui/#inserttoolbar","text":"def insertToolBar ( self , before : PySide2 . QtWidgets . QToolBar , toolbar : PySide2 . QtWidgets . QToolBar ) -> None insertToolBar(self, before: PySide2.QtWidgets.QToolBar, toolbar: PySide2.QtWidgets.QToolBar) -> None","title":"insertToolBar"},{"location":"reference/streamdeck_ui/gui/#inserttoolbarbreak","text":"def insertToolBarBreak ( self , before : PySide2 . QtWidgets . QToolBar ) -> None insertToolBarBreak(self, before: PySide2.QtWidgets.QToolBar) -> None","title":"insertToolBarBreak"},{"location":"reference/streamdeck_ui/gui/#installeventfilter_1","text":"def installEventFilter ( self , filterObj : PySide2 . QtCore . QObject ) -> None installEventFilter(self, filterObj: PySide2.QtCore.QObject) -> None","title":"installEventFilter"},{"location":"reference/streamdeck_ui/gui/#internalwinid_1","text":"def internalWinId ( self ) -> int internalWinId(self) -> int","title":"internalWinId"},{"location":"reference/streamdeck_ui/gui/#isactivewindow_1","text":"def isActiveWindow ( self ) -> bool isActiveWindow(self) -> bool","title":"isActiveWindow"},{"location":"reference/streamdeck_ui/gui/#isancestorof_1","text":"def isAncestorOf ( self , child : PySide2 . QtWidgets . QWidget ) -> bool isAncestorOf(self, child: PySide2.QtWidgets.QWidget) -> bool","title":"isAncestorOf"},{"location":"reference/streamdeck_ui/gui/#isanimated","text":"def isAnimated ( self ) -> bool isAnimated(self) -> bool","title":"isAnimated"},{"location":"reference/streamdeck_ui/gui/#isdocknestingenabled","text":"def isDockNestingEnabled ( self ) -> bool isDockNestingEnabled(self) -> bool","title":"isDockNestingEnabled"},{"location":"reference/streamdeck_ui/gui/#isenabled_1","text":"def isEnabled ( self ) -> bool isEnabled(self) -> bool","title":"isEnabled"},{"location":"reference/streamdeck_ui/gui/#isenabledto_1","text":"def isEnabledTo ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> bool isEnabledTo(self, arg__1: PySide2.QtWidgets.QWidget) -> bool","title":"isEnabledTo"},{"location":"reference/streamdeck_ui/gui/#isenabledtotlw_1","text":"def isEnabledToTLW ( self ) -> bool isEnabledToTLW(self) -> bool","title":"isEnabledToTLW"},{"location":"reference/streamdeck_ui/gui/#isfullscreen_1","text":"def isFullScreen ( self ) -> bool isFullScreen(self) -> bool","title":"isFullScreen"},{"location":"reference/streamdeck_ui/gui/#ishidden_1","text":"def isHidden ( self ) -> bool isHidden(self) -> bool","title":"isHidden"},{"location":"reference/streamdeck_ui/gui/#islefttoright_1","text":"def isLeftToRight ( self ) -> bool isLeftToRight(self) -> bool","title":"isLeftToRight"},{"location":"reference/streamdeck_ui/gui/#ismaximized_1","text":"def isMaximized ( self ) -> bool isMaximized(self) -> bool","title":"isMaximized"},{"location":"reference/streamdeck_ui/gui/#isminimized_1","text":"def isMinimized ( self ) -> bool isMinimized(self) -> bool","title":"isMinimized"},{"location":"reference/streamdeck_ui/gui/#ismodal_1","text":"def isModal ( self ) -> bool isModal(self) -> bool","title":"isModal"},{"location":"reference/streamdeck_ui/gui/#isrighttoleft_1","text":"def isRightToLeft ( self ) -> bool isRightToLeft(self) -> bool","title":"isRightToLeft"},{"location":"reference/streamdeck_ui/gui/#isseparator","text":"def isSeparator ( self , pos : PySide2 . QtCore . QPoint ) -> bool isSeparator(self, pos: PySide2.QtCore.QPoint) -> bool","title":"isSeparator"},{"location":"reference/streamdeck_ui/gui/#issignalconnected_1","text":"def isSignalConnected ( self , signal : PySide2 . QtCore . QMetaMethod ) -> bool isSignalConnected(self, signal: PySide2.QtCore.QMetaMethod) -> bool","title":"isSignalConnected"},{"location":"reference/streamdeck_ui/gui/#istoplevel_1","text":"def isTopLevel ( self ) -> bool isTopLevel(self) -> bool","title":"isTopLevel"},{"location":"reference/streamdeck_ui/gui/#isvisible_1","text":"def isVisible ( self ) -> bool isVisible(self) -> bool","title":"isVisible"},{"location":"reference/streamdeck_ui/gui/#isvisibleto_1","text":"def isVisibleTo ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> bool isVisibleTo(self, arg__1: PySide2.QtWidgets.QWidget) -> bool","title":"isVisibleTo"},{"location":"reference/streamdeck_ui/gui/#iswidgettype_1","text":"def isWidgetType ( self ) -> bool isWidgetType(self) -> bool","title":"isWidgetType"},{"location":"reference/streamdeck_ui/gui/#iswindow_1","text":"def isWindow ( self ) -> bool isWindow(self) -> bool","title":"isWindow"},{"location":"reference/streamdeck_ui/gui/#iswindowmodified_1","text":"def isWindowModified ( self ) -> bool isWindowModified(self) -> bool","title":"isWindowModified"},{"location":"reference/streamdeck_ui/gui/#iswindowtype_1","text":"def isWindowType ( self ) -> bool isWindowType(self) -> bool","title":"isWindowType"},{"location":"reference/streamdeck_ui/gui/#keypressevent_1","text":"def keyPressEvent ( self , event : PySide2 . QtGui . QKeyEvent ) -> None keyPressEvent(self, event: PySide2.QtGui.QKeyEvent) -> None","title":"keyPressEvent"},{"location":"reference/streamdeck_ui/gui/#keyreleaseevent_1","text":"def keyReleaseEvent ( self , event : PySide2 . QtGui . QKeyEvent ) -> None keyReleaseEvent(self, event: PySide2.QtGui.QKeyEvent) -> None","title":"keyReleaseEvent"},{"location":"reference/streamdeck_ui/gui/#killtimer_1","text":"def killTimer ( self , id : int ) -> None killTimer(self, id: int) -> None","title":"killTimer"},{"location":"reference/streamdeck_ui/gui/#layout_1","text":"def layout ( self ) -> PySide2 . QtWidgets . QLayout layout(self) -> PySide2.QtWidgets.QLayout","title":"layout"},{"location":"reference/streamdeck_ui/gui/#layoutdirection_1","text":"def layoutDirection ( self ) -> PySide2 . QtCore . Qt . LayoutDirection layoutDirection(self) -> PySide2.QtCore.Qt.LayoutDirection","title":"layoutDirection"},{"location":"reference/streamdeck_ui/gui/#leaveevent_1","text":"def leaveEvent ( self , event : PySide2 . QtCore . QEvent ) -> None leaveEvent(self, event: PySide2.QtCore.QEvent) -> None","title":"leaveEvent"},{"location":"reference/streamdeck_ui/gui/#locale_1","text":"def locale ( self ) -> PySide2 . QtCore . QLocale locale(self) -> PySide2.QtCore.QLocale","title":"locale"},{"location":"reference/streamdeck_ui/gui/#logicaldpix_1","text":"def logicalDpiX ( self ) -> int logicalDpiX(self) -> int","title":"logicalDpiX"},{"location":"reference/streamdeck_ui/gui/#logicaldpiy_1","text":"def logicalDpiY ( self ) -> int logicalDpiY(self) -> int","title":"logicalDpiY"},{"location":"reference/streamdeck_ui/gui/#lower_1","text":"def lower ( self ) -> None lower(self) -> None","title":"lower"},{"location":"reference/streamdeck_ui/gui/#mapfrom_1","text":"def mapFrom ( self , arg__1 : PySide2 . QtWidgets . QWidget , arg__2 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapFrom(self, arg__1: PySide2.QtWidgets.QWidget, arg__2: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint","title":"mapFrom"},{"location":"reference/streamdeck_ui/gui/#mapfromglobal_1","text":"def mapFromGlobal ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapFromGlobal(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint","title":"mapFromGlobal"},{"location":"reference/streamdeck_ui/gui/#mapfromparent_1","text":"def mapFromParent ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapFromParent(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint","title":"mapFromParent"},{"location":"reference/streamdeck_ui/gui/#mapto_1","text":"def mapTo ( self , arg__1 : PySide2 . QtWidgets . QWidget , arg__2 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapTo(self, arg__1: PySide2.QtWidgets.QWidget, arg__2: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint","title":"mapTo"},{"location":"reference/streamdeck_ui/gui/#maptoglobal_1","text":"def mapToGlobal ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapToGlobal(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint","title":"mapToGlobal"},{"location":"reference/streamdeck_ui/gui/#maptoparent_1","text":"def mapToParent ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapToParent(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint","title":"mapToParent"},{"location":"reference/streamdeck_ui/gui/#mask_1","text":"def mask ( self ) -> PySide2 . QtGui . QRegion mask(self) -> PySide2.QtGui.QRegion","title":"mask"},{"location":"reference/streamdeck_ui/gui/#maximumheight_1","text":"def maximumHeight ( self ) -> int maximumHeight(self) -> int","title":"maximumHeight"},{"location":"reference/streamdeck_ui/gui/#maximumsize_1","text":"def maximumSize ( self ) -> PySide2 . QtCore . QSize maximumSize(self) -> PySide2.QtCore.QSize","title":"maximumSize"},{"location":"reference/streamdeck_ui/gui/#maximumwidth_1","text":"def maximumWidth ( self ) -> int maximumWidth(self) -> int","title":"maximumWidth"},{"location":"reference/streamdeck_ui/gui/#menubar","text":"def menuBar ( self ) -> PySide2 . QtWidgets . QMenuBar menuBar(self) -> PySide2.QtWidgets.QMenuBar","title":"menuBar"},{"location":"reference/streamdeck_ui/gui/#menuwidget","text":"def menuWidget ( self ) -> PySide2 . QtWidgets . QWidget menuWidget(self) -> PySide2.QtWidgets.QWidget","title":"menuWidget"},{"location":"reference/streamdeck_ui/gui/#metaobject_1","text":"def metaObject ( self ) -> PySide2 . QtCore . QMetaObject metaObject(self) -> PySide2.QtCore.QMetaObject","title":"metaObject"},{"location":"reference/streamdeck_ui/gui/#metric_1","text":"def metric ( self , arg__1 : PySide2 . QtGui . QPaintDevice . PaintDeviceMetric ) -> int metric(self, arg__1: PySide2.QtGui.QPaintDevice.PaintDeviceMetric) -> int","title":"metric"},{"location":"reference/streamdeck_ui/gui/#minimumheight_1","text":"def minimumHeight ( self ) -> int minimumHeight(self) -> int","title":"minimumHeight"},{"location":"reference/streamdeck_ui/gui/#minimumsize_1","text":"def minimumSize ( self ) -> PySide2 . QtCore . QSize minimumSize(self) -> PySide2.QtCore.QSize","title":"minimumSize"},{"location":"reference/streamdeck_ui/gui/#minimumsizehint_1","text":"def minimumSizeHint ( self ) -> PySide2 . QtCore . QSize minimumSizeHint(self) -> PySide2.QtCore.QSize","title":"minimumSizeHint"},{"location":"reference/streamdeck_ui/gui/#minimumwidth_1","text":"def minimumWidth ( self ) -> int minimumWidth(self) -> int","title":"minimumWidth"},{"location":"reference/streamdeck_ui/gui/#mousedoubleclickevent_1","text":"def mouseDoubleClickEvent ( self , event : PySide2 . QtGui . QMouseEvent ) -> None mouseDoubleClickEvent(self, event: PySide2.QtGui.QMouseEvent) -> None","title":"mouseDoubleClickEvent"},{"location":"reference/streamdeck_ui/gui/#mousemoveevent_1","text":"def mouseMoveEvent ( self , event : PySide2 . QtGui . QMouseEvent ) -> None mouseMoveEvent(self, event: PySide2.QtGui.QMouseEvent) -> None","title":"mouseMoveEvent"},{"location":"reference/streamdeck_ui/gui/#mousepressevent_1","text":"def mousePressEvent ( self , event : PySide2 . QtGui . QMouseEvent ) -> None mousePressEvent(self, event: PySide2.QtGui.QMouseEvent) -> None","title":"mousePressEvent"},{"location":"reference/streamdeck_ui/gui/#mousereleaseevent_1","text":"def mouseReleaseEvent ( self , event : PySide2 . QtGui . QMouseEvent ) -> None mouseReleaseEvent(self, event: PySide2.QtGui.QMouseEvent) -> None","title":"mouseReleaseEvent"},{"location":"reference/streamdeck_ui/gui/#move_1","text":"def move ( ... ) move(self, arg__1: PySide2.QtCore.QPoint) -> None move(self, x: int, y: int) -> None","title":"move"},{"location":"reference/streamdeck_ui/gui/#moveevent_1","text":"def moveEvent ( self , event : PySide2 . QtGui . QMoveEvent ) -> None moveEvent(self, event: PySide2.QtGui.QMoveEvent) -> None","title":"moveEvent"},{"location":"reference/streamdeck_ui/gui/#movetothread_1","text":"def moveToThread ( self , thread : PySide2 . QtCore . QThread ) -> None moveToThread(self, thread: PySide2.QtCore.QThread) -> None","title":"moveToThread"},{"location":"reference/streamdeck_ui/gui/#nativeevent_1","text":"def nativeEvent ( self , eventType : PySide2 . QtCore . QByteArray , message : int ) -> typing . Tuple [ bool , int ] nativeEvent(self, eventType: PySide2.QtCore.QByteArray, message: int) -> typing.Tuple[bool, int]","title":"nativeEvent"},{"location":"reference/streamdeck_ui/gui/#nativeparentwidget_1","text":"def nativeParentWidget ( self ) -> PySide2 . QtWidgets . QWidget nativeParentWidget(self) -> PySide2.QtWidgets.QWidget","title":"nativeParentWidget"},{"location":"reference/streamdeck_ui/gui/#nextinfocuschain_1","text":"def nextInFocusChain ( self ) -> PySide2 . QtWidgets . QWidget nextInFocusChain(self) -> PySide2.QtWidgets.QWidget","title":"nextInFocusChain"},{"location":"reference/streamdeck_ui/gui/#normalgeometry_1","text":"def normalGeometry ( self ) -> PySide2 . QtCore . QRect normalGeometry(self) -> PySide2.QtCore.QRect","title":"normalGeometry"},{"location":"reference/streamdeck_ui/gui/#objectname_1","text":"def objectName ( self ) -> str objectName(self) -> str","title":"objectName"},{"location":"reference/streamdeck_ui/gui/#objectnamechanged_1","text":"def objectNameChanged ( ... )","title":"objectNameChanged"},{"location":"reference/streamdeck_ui/gui/#overridewindowflags_1","text":"def overrideWindowFlags ( self , type : PySide2 . QtCore . Qt . WindowFlags ) -> None overrideWindowFlags(self, type: PySide2.QtCore.Qt.WindowFlags) -> None","title":"overrideWindowFlags"},{"location":"reference/streamdeck_ui/gui/#overridewindowstate_1","text":"def overrideWindowState ( self , state : PySide2 . QtCore . Qt . WindowStates ) -> None overrideWindowState(self, state: PySide2.QtCore.Qt.WindowStates) -> None","title":"overrideWindowState"},{"location":"reference/streamdeck_ui/gui/#paintengine_1","text":"def paintEngine ( self ) -> PySide2 . QtGui . QPaintEngine paintEngine(self) -> PySide2.QtGui.QPaintEngine","title":"paintEngine"},{"location":"reference/streamdeck_ui/gui/#paintevent_1","text":"def paintEvent ( self , event : PySide2 . QtGui . QPaintEvent ) -> None paintEvent(self, event: PySide2.QtGui.QPaintEvent) -> None","title":"paintEvent"},{"location":"reference/streamdeck_ui/gui/#paintingactive_1","text":"def paintingActive ( self ) -> bool paintingActive(self) -> bool","title":"paintingActive"},{"location":"reference/streamdeck_ui/gui/#palette_1","text":"def palette ( self ) -> PySide2 . QtGui . QPalette palette(self) -> PySide2.QtGui.QPalette","title":"palette"},{"location":"reference/streamdeck_ui/gui/#parent_1","text":"def parent ( self ) -> PySide2 . QtCore . QObject parent(self) -> PySide2.QtCore.QObject","title":"parent"},{"location":"reference/streamdeck_ui/gui/#parentwidget_1","text":"def parentWidget ( self ) -> PySide2 . QtWidgets . QWidget parentWidget(self) -> PySide2.QtWidgets.QWidget","title":"parentWidget"},{"location":"reference/streamdeck_ui/gui/#physicaldpix_1","text":"def physicalDpiX ( self ) -> int physicalDpiX(self) -> int","title":"physicalDpiX"},{"location":"reference/streamdeck_ui/gui/#physicaldpiy_1","text":"def physicalDpiY ( self ) -> int physicalDpiY(self) -> int","title":"physicalDpiY"},{"location":"reference/streamdeck_ui/gui/#pos_1","text":"def pos ( self ) -> PySide2 . QtCore . QPoint pos(self) -> PySide2.QtCore.QPoint","title":"pos"},{"location":"reference/streamdeck_ui/gui/#previousinfocuschain_1","text":"def previousInFocusChain ( self ) -> PySide2 . QtWidgets . QWidget previousInFocusChain(self) -> PySide2.QtWidgets.QWidget","title":"previousInFocusChain"},{"location":"reference/streamdeck_ui/gui/#property_1","text":"def property ( self , name : bytes ) -> typing . Any property(self, name: bytes) -> typing.Any","title":"property"},{"location":"reference/streamdeck_ui/gui/#raise__1","text":"def raise_ ( self ) -> None raise_(self) -> None","title":"raise_"},{"location":"reference/streamdeck_ui/gui/#receivers_1","text":"def receivers ( self , signal : bytes ) -> int receivers(self, signal: bytes) -> int","title":"receivers"},{"location":"reference/streamdeck_ui/gui/#rect_1","text":"def rect ( self ) -> PySide2 . QtCore . QRect rect(self) -> PySide2.QtCore.QRect","title":"rect"},{"location":"reference/streamdeck_ui/gui/#redirected_1","text":"def redirected ( self , offset : PySide2 . QtCore . QPoint ) -> PySide2 . QtGui . QPaintDevice redirected(self, offset: PySide2.QtCore.QPoint) -> PySide2.QtGui.QPaintDevice","title":"redirected"},{"location":"reference/streamdeck_ui/gui/#releasekeyboard_1","text":"def releaseKeyboard ( self ) -> None releaseKeyboard(self) -> None","title":"releaseKeyboard"},{"location":"reference/streamdeck_ui/gui/#releasemouse_1","text":"def releaseMouse ( self ) -> None releaseMouse(self) -> None","title":"releaseMouse"},{"location":"reference/streamdeck_ui/gui/#releaseshortcut_1","text":"def releaseShortcut ( self , id : int ) -> None releaseShortcut(self, id: int) -> None","title":"releaseShortcut"},{"location":"reference/streamdeck_ui/gui/#removeaction_1","text":"def removeAction ( self , action : PySide2 . QtWidgets . QAction ) -> None removeAction(self, action: PySide2.QtWidgets.QAction) -> None","title":"removeAction"},{"location":"reference/streamdeck_ui/gui/#removedockwidget","text":"def removeDockWidget ( self , dockwidget : PySide2 . QtWidgets . QDockWidget ) -> None removeDockWidget(self, dockwidget: PySide2.QtWidgets.QDockWidget) -> None","title":"removeDockWidget"},{"location":"reference/streamdeck_ui/gui/#removeeventfilter_1","text":"def removeEventFilter ( self , obj : PySide2 . QtCore . QObject ) -> None removeEventFilter(self, obj: PySide2.QtCore.QObject) -> None","title":"removeEventFilter"},{"location":"reference/streamdeck_ui/gui/#removetoolbar","text":"def removeToolBar ( self , toolbar : PySide2 . QtWidgets . QToolBar ) -> None removeToolBar(self, toolbar: PySide2.QtWidgets.QToolBar) -> None","title":"removeToolBar"},{"location":"reference/streamdeck_ui/gui/#removetoolbarbreak","text":"def removeToolBarBreak ( self , before : PySide2 . QtWidgets . QToolBar ) -> None removeToolBarBreak(self, before: PySide2.QtWidgets.QToolBar) -> None","title":"removeToolBarBreak"},{"location":"reference/streamdeck_ui/gui/#render_1","text":"def render ( ... ) render(self, painter: PySide2.QtGui.QPainter, targetOffset: PySide2.QtCore.QPoint, sourceRegion: PySide2.QtGui.QRegion = Default(QRegion), renderFlags: PySide2.QtWidgets.QWidget.RenderFlags = Instance(QWidget.RenderFlags(QWidget.DrawWindowBackground | QWidget.DrawChildren))) -> None render(self, target: PySide2.QtGui.QPaintDevice, targetOffset: PySide2.QtCore.QPoint = Default(QPoint), sourceRegion: PySide2.QtGui.QRegion = Default(QRegion), renderFlags: PySide2.QtWidgets.QWidget.RenderFlags = Instance(QWidget.RenderFlags(QWidget.DrawWindowBackground | QWidget.DrawChildren))) -> None","title":"render"},{"location":"reference/streamdeck_ui/gui/#repaint_1","text":"def repaint ( ... ) repaint(self) -> None repaint(self, arg__1: PySide2.QtCore.QRect) -> None repaint(self, arg__1: PySide2.QtGui.QRegion) -> None repaint(self, x: int, y: int, w: int, h: int) -> None","title":"repaint"},{"location":"reference/streamdeck_ui/gui/#resize_1","text":"def resize ( ... ) resize(self, arg__1: PySide2.QtCore.QSize) -> None resize(self, w: int, h: int) -> None","title":"resize"},{"location":"reference/streamdeck_ui/gui/#resizedocks","text":"def resizeDocks ( self , docks : typing . Sequence [ PySide2 . QtWidgets . QDockWidget ], sizes : typing . Sequence [ int ], orientation : PySide2 . QtCore . Qt . Orientation ) -> None resizeDocks(self, docks: typing.Sequence[PySide2.QtWidgets.QDockWidget], sizes: typing.Sequence[int], orientation: PySide2.QtCore.Qt.Orientation) -> None","title":"resizeDocks"},{"location":"reference/streamdeck_ui/gui/#resizeevent_1","text":"def resizeEvent ( self , event : PySide2 . QtGui . QResizeEvent ) -> None resizeEvent(self, event: PySide2.QtGui.QResizeEvent) -> None","title":"resizeEvent"},{"location":"reference/streamdeck_ui/gui/#restoredockwidget","text":"def restoreDockWidget ( self , dockwidget : PySide2 . QtWidgets . QDockWidget ) -> bool restoreDockWidget(self, dockwidget: PySide2.QtWidgets.QDockWidget) -> bool","title":"restoreDockWidget"},{"location":"reference/streamdeck_ui/gui/#restoregeometry_1","text":"def restoreGeometry ( self , geometry : PySide2 . QtCore . QByteArray ) -> bool restoreGeometry(self, geometry: PySide2.QtCore.QByteArray) -> bool","title":"restoreGeometry"},{"location":"reference/streamdeck_ui/gui/#restorestate","text":"def restoreState ( self , state : PySide2 . QtCore . QByteArray , version : int = 0 ) -> bool restoreState(self, state: PySide2.QtCore.QByteArray, version: int = 0) -> bool","title":"restoreState"},{"location":"reference/streamdeck_ui/gui/#savegeometry_1","text":"def saveGeometry ( self ) -> PySide2 . QtCore . QByteArray saveGeometry(self) -> PySide2.QtCore.QByteArray","title":"saveGeometry"},{"location":"reference/streamdeck_ui/gui/#savestate","text":"def saveState ( self , version : int = 0 ) -> PySide2 . QtCore . QByteArray saveState(self, version: int = 0) -> PySide2.QtCore.QByteArray","title":"saveState"},{"location":"reference/streamdeck_ui/gui/#screen_1","text":"def screen ( self ) -> PySide2 . QtGui . QScreen screen(self) -> PySide2.QtGui.QScreen","title":"screen"},{"location":"reference/streamdeck_ui/gui/#scroll_1","text":"def scroll ( ... ) scroll(self, dx: int, dy: int) -> None scroll(self, dx: int, dy: int, arg__3: PySide2.QtCore.QRect) -> None","title":"scroll"},{"location":"reference/streamdeck_ui/gui/#sender_1","text":"def sender ( self ) -> PySide2 . QtCore . QObject sender(self) -> PySide2.QtCore.QObject","title":"sender"},{"location":"reference/streamdeck_ui/gui/#sendersignalindex_1","text":"def senderSignalIndex ( self ) -> int senderSignalIndex(self) -> int","title":"senderSignalIndex"},{"location":"reference/streamdeck_ui/gui/#setacceptdrops_1","text":"def setAcceptDrops ( self , on : bool ) -> None setAcceptDrops(self, on: bool) -> None","title":"setAcceptDrops"},{"location":"reference/streamdeck_ui/gui/#setaccessibledescription_1","text":"def setAccessibleDescription ( self , description : str ) -> None setAccessibleDescription(self, description: str) -> None","title":"setAccessibleDescription"},{"location":"reference/streamdeck_ui/gui/#setaccessiblename_1","text":"def setAccessibleName ( self , name : str ) -> None setAccessibleName(self, name: str) -> None","title":"setAccessibleName"},{"location":"reference/streamdeck_ui/gui/#setanimated","text":"def setAnimated ( self , enabled : bool ) -> None setAnimated(self, enabled: bool) -> None","title":"setAnimated"},{"location":"reference/streamdeck_ui/gui/#setattribute_1","text":"def setAttribute ( self , arg__1 : PySide2 . QtCore . Qt . WidgetAttribute , on : bool = True ) -> None setAttribute(self, arg__1: PySide2.QtCore.Qt.WidgetAttribute, on: bool = True) -> None","title":"setAttribute"},{"location":"reference/streamdeck_ui/gui/#setautofillbackground_1","text":"def setAutoFillBackground ( self , enabled : bool ) -> None setAutoFillBackground(self, enabled: bool) -> None","title":"setAutoFillBackground"},{"location":"reference/streamdeck_ui/gui/#setbackgroundrole_1","text":"def setBackgroundRole ( self , arg__1 : PySide2 . QtGui . QPalette . ColorRole ) -> None setBackgroundRole(self, arg__1: PySide2.QtGui.QPalette.ColorRole) -> None","title":"setBackgroundRole"},{"location":"reference/streamdeck_ui/gui/#setbasesize_1","text":"def setBaseSize ( ... ) setBaseSize(self, arg__1: PySide2.QtCore.QSize) -> None setBaseSize(self, basew: int, baseh: int) -> None","title":"setBaseSize"},{"location":"reference/streamdeck_ui/gui/#setcentralwidget","text":"def setCentralWidget ( self , widget : PySide2 . QtWidgets . QWidget ) -> None setCentralWidget(self, widget: PySide2.QtWidgets.QWidget) -> None","title":"setCentralWidget"},{"location":"reference/streamdeck_ui/gui/#setcontentsmargins_1","text":"def setContentsMargins ( ... ) setContentsMargins(self, left: int, top: int, right: int, bottom: int) -> None setContentsMargins(self, margins: PySide2.QtCore.QMargins) -> None","title":"setContentsMargins"},{"location":"reference/streamdeck_ui/gui/#setcontextmenupolicy_1","text":"def setContextMenuPolicy ( self , policy : PySide2 . QtCore . Qt . ContextMenuPolicy ) -> None setContextMenuPolicy(self, policy: PySide2.QtCore.Qt.ContextMenuPolicy) -> None","title":"setContextMenuPolicy"},{"location":"reference/streamdeck_ui/gui/#setcorner","text":"def setCorner ( self , corner : PySide2 . QtCore . Qt . Corner , area : PySide2 . QtCore . Qt . DockWidgetArea ) -> None setCorner(self, corner: PySide2.QtCore.Qt.Corner, area: PySide2.QtCore.Qt.DockWidgetArea) -> None","title":"setCorner"},{"location":"reference/streamdeck_ui/gui/#setcursor_1","text":"def setCursor ( self , arg__1 : PySide2 . QtGui . QCursor ) -> None setCursor(self, arg__1: PySide2.QtGui.QCursor) -> None","title":"setCursor"},{"location":"reference/streamdeck_ui/gui/#setdisabled_1","text":"def setDisabled ( self , arg__1 : bool ) -> None setDisabled(self, arg__1: bool) -> None","title":"setDisabled"},{"location":"reference/streamdeck_ui/gui/#setdocknestingenabled","text":"def setDockNestingEnabled ( self , enabled : bool ) -> None setDockNestingEnabled(self, enabled: bool) -> None","title":"setDockNestingEnabled"},{"location":"reference/streamdeck_ui/gui/#setdockoptions","text":"def setDockOptions ( self , options : PySide2 . QtWidgets . QMainWindow . DockOptions ) -> None setDockOptions(self, options: PySide2.QtWidgets.QMainWindow.DockOptions) -> None","title":"setDockOptions"},{"location":"reference/streamdeck_ui/gui/#setdocumentmode","text":"def setDocumentMode ( self , enabled : bool ) -> None setDocumentMode(self, enabled: bool) -> None","title":"setDocumentMode"},{"location":"reference/streamdeck_ui/gui/#setenabled_1","text":"def setEnabled ( self , arg__1 : bool ) -> None setEnabled(self, arg__1: bool) -> None","title":"setEnabled"},{"location":"reference/streamdeck_ui/gui/#setfixedheight_1","text":"def setFixedHeight ( self , h : int ) -> None setFixedHeight(self, h: int) -> None","title":"setFixedHeight"},{"location":"reference/streamdeck_ui/gui/#setfixedsize_1","text":"def setFixedSize ( ... ) setFixedSize(self, arg__1: PySide2.QtCore.QSize) -> None setFixedSize(self, w: int, h: int) -> None","title":"setFixedSize"},{"location":"reference/streamdeck_ui/gui/#setfixedwidth_1","text":"def setFixedWidth ( self , w : int ) -> None setFixedWidth(self, w: int) -> None","title":"setFixedWidth"},{"location":"reference/streamdeck_ui/gui/#setfocus_1","text":"def setFocus ( ... ) setFocus(self) -> None setFocus(self, reason: PySide2.QtCore.Qt.FocusReason) -> None","title":"setFocus"},{"location":"reference/streamdeck_ui/gui/#setfocuspolicy_1","text":"def setFocusPolicy ( self , policy : PySide2 . QtCore . Qt . FocusPolicy ) -> None setFocusPolicy(self, policy: PySide2.QtCore.Qt.FocusPolicy) -> None","title":"setFocusPolicy"},{"location":"reference/streamdeck_ui/gui/#setfocusproxy_1","text":"def setFocusProxy ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> None setFocusProxy(self, arg__1: PySide2.QtWidgets.QWidget) -> None","title":"setFocusProxy"},{"location":"reference/streamdeck_ui/gui/#setfont_1","text":"def setFont ( self , arg__1 : PySide2 . QtGui . QFont ) -> None setFont(self, arg__1: PySide2.QtGui.QFont) -> None","title":"setFont"},{"location":"reference/streamdeck_ui/gui/#setforegroundrole_1","text":"def setForegroundRole ( self , arg__1 : PySide2 . QtGui . QPalette . ColorRole ) -> None setForegroundRole(self, arg__1: PySide2.QtGui.QPalette.ColorRole) -> None","title":"setForegroundRole"},{"location":"reference/streamdeck_ui/gui/#setgeometry_1","text":"def setGeometry ( ... ) setGeometry(self, arg__1: PySide2.QtCore.QRect) -> None setGeometry(self, x: int, y: int, w: int, h: int) -> None","title":"setGeometry"},{"location":"reference/streamdeck_ui/gui/#setgraphicseffect_1","text":"def setGraphicsEffect ( self , effect : PySide2 . QtWidgets . QGraphicsEffect ) -> None setGraphicsEffect(self, effect: PySide2.QtWidgets.QGraphicsEffect) -> None","title":"setGraphicsEffect"},{"location":"reference/streamdeck_ui/gui/#sethidden_1","text":"def setHidden ( self , hidden : bool ) -> None setHidden(self, hidden: bool) -> None","title":"setHidden"},{"location":"reference/streamdeck_ui/gui/#seticonsize_1","text":"def setIconSize ( self , iconSize : PySide2 . QtCore . QSize ) -> None setIconSize(self, iconSize: PySide2.QtCore.QSize) -> None","title":"setIconSize"},{"location":"reference/streamdeck_ui/gui/#setinputmethodhints_1","text":"def setInputMethodHints ( self , hints : PySide2 . QtCore . Qt . InputMethodHints ) -> None setInputMethodHints(self, hints: PySide2.QtCore.Qt.InputMethodHints) -> None","title":"setInputMethodHints"},{"location":"reference/streamdeck_ui/gui/#setlayout_1","text":"def setLayout ( self , arg__1 : PySide2 . QtWidgets . QLayout ) -> None setLayout(self, arg__1: PySide2.QtWidgets.QLayout) -> None","title":"setLayout"},{"location":"reference/streamdeck_ui/gui/#setlayoutdirection_1","text":"def setLayoutDirection ( self , direction : PySide2 . QtCore . Qt . LayoutDirection ) -> None setLayoutDirection(self, direction: PySide2.QtCore.Qt.LayoutDirection) -> None","title":"setLayoutDirection"},{"location":"reference/streamdeck_ui/gui/#setlocale_1","text":"def setLocale ( self , locale : PySide2 . QtCore . QLocale ) -> None setLocale(self, locale: PySide2.QtCore.QLocale) -> None","title":"setLocale"},{"location":"reference/streamdeck_ui/gui/#setmask_1","text":"def setMask ( ... ) setMask(self, arg__1: PySide2.QtGui.QBitmap) -> None setMask(self, arg__1: PySide2.QtGui.QRegion) -> None","title":"setMask"},{"location":"reference/streamdeck_ui/gui/#setmaximumheight_1","text":"def setMaximumHeight ( self , maxh : int ) -> None setMaximumHeight(self, maxh: int) -> None","title":"setMaximumHeight"},{"location":"reference/streamdeck_ui/gui/#setmaximumsize_1","text":"def setMaximumSize ( ... ) setMaximumSize(self, arg__1: PySide2.QtCore.QSize) -> None setMaximumSize(self, maxw: int, maxh: int) -> None","title":"setMaximumSize"},{"location":"reference/streamdeck_ui/gui/#setmaximumwidth_1","text":"def setMaximumWidth ( self , maxw : int ) -> None setMaximumWidth(self, maxw: int) -> None","title":"setMaximumWidth"},{"location":"reference/streamdeck_ui/gui/#setmenubar","text":"def setMenuBar ( self , menubar : PySide2 . QtWidgets . QMenuBar ) -> None setMenuBar(self, menubar: PySide2.QtWidgets.QMenuBar) -> None","title":"setMenuBar"},{"location":"reference/streamdeck_ui/gui/#setmenuwidget","text":"def setMenuWidget ( self , menubar : PySide2 . QtWidgets . QWidget ) -> None setMenuWidget(self, menubar: PySide2.QtWidgets.QWidget) -> None","title":"setMenuWidget"},{"location":"reference/streamdeck_ui/gui/#setminimumheight_1","text":"def setMinimumHeight ( self , minh : int ) -> None setMinimumHeight(self, minh: int) -> None","title":"setMinimumHeight"},{"location":"reference/streamdeck_ui/gui/#setminimumsize_1","text":"def setMinimumSize ( ... ) setMinimumSize(self, arg__1: PySide2.QtCore.QSize) -> None setMinimumSize(self, minw: int, minh: int) -> None","title":"setMinimumSize"},{"location":"reference/streamdeck_ui/gui/#setminimumwidth_1","text":"def setMinimumWidth ( self , minw : int ) -> None setMinimumWidth(self, minw: int) -> None","title":"setMinimumWidth"},{"location":"reference/streamdeck_ui/gui/#setmousetracking_1","text":"def setMouseTracking ( self , enable : bool ) -> None setMouseTracking(self, enable: bool) -> None","title":"setMouseTracking"},{"location":"reference/streamdeck_ui/gui/#setobjectname_1","text":"def setObjectName ( self , name : str ) -> None setObjectName(self, name: str) -> None","title":"setObjectName"},{"location":"reference/streamdeck_ui/gui/#setpalette_1","text":"def setPalette ( self , arg__1 : PySide2 . QtGui . QPalette ) -> None setPalette(self, arg__1: PySide2.QtGui.QPalette) -> None","title":"setPalette"},{"location":"reference/streamdeck_ui/gui/#setparent_1","text":"def setParent ( ... ) setParent(self, parent: PySide2.QtCore.QObject) -> None setParent(self, parent: PySide2.QtWidgets.QWidget) -> None setParent(self, parent: PySide2.QtWidgets.QWidget, f: PySide2.QtCore.Qt.WindowFlags) -> None","title":"setParent"},{"location":"reference/streamdeck_ui/gui/#setproperty_1","text":"def setProperty ( self , name : bytes , value : typing . Any ) -> bool setProperty(self, name: bytes, value: typing.Any) -> bool","title":"setProperty"},{"location":"reference/streamdeck_ui/gui/#setshortcutautorepeat_1","text":"def setShortcutAutoRepeat ( self , id : int , enable : bool = True ) -> None setShortcutAutoRepeat(self, id: int, enable: bool = True) -> None","title":"setShortcutAutoRepeat"},{"location":"reference/streamdeck_ui/gui/#setshortcutenabled_1","text":"def setShortcutEnabled ( self , id : int , enable : bool = True ) -> None setShortcutEnabled(self, id: int, enable: bool = True) -> None","title":"setShortcutEnabled"},{"location":"reference/streamdeck_ui/gui/#setsizeincrement_1","text":"def setSizeIncrement ( ... ) setSizeIncrement(self, arg__1: PySide2.QtCore.QSize) -> None setSizeIncrement(self, w: int, h: int) -> None","title":"setSizeIncrement"},{"location":"reference/streamdeck_ui/gui/#setsizepolicy_1","text":"def setSizePolicy ( ... ) setSizePolicy(self, arg__1: PySide2.QtWidgets.QSizePolicy) -> None setSizePolicy(self, horizontal: PySide2.QtWidgets.QSizePolicy.Policy, vertical: PySide2.QtWidgets.QSizePolicy.Policy) -> None","title":"setSizePolicy"},{"location":"reference/streamdeck_ui/gui/#setstatusbar","text":"def setStatusBar ( self , statusbar : PySide2 . QtWidgets . QStatusBar ) -> None setStatusBar(self, statusbar: PySide2.QtWidgets.QStatusBar) -> None","title":"setStatusBar"},{"location":"reference/streamdeck_ui/gui/#setstatustip_1","text":"def setStatusTip ( self , arg__1 : str ) -> None setStatusTip(self, arg__1: str) -> None","title":"setStatusTip"},{"location":"reference/streamdeck_ui/gui/#setstyle_1","text":"def setStyle ( self , arg__1 : PySide2 . QtWidgets . QStyle ) -> None setStyle(self, arg__1: PySide2.QtWidgets.QStyle) -> None","title":"setStyle"},{"location":"reference/streamdeck_ui/gui/#setstylesheet_1","text":"def setStyleSheet ( self , styleSheet : str ) -> None setStyleSheet(self, styleSheet: str) -> None","title":"setStyleSheet"},{"location":"reference/streamdeck_ui/gui/#settabposition","text":"def setTabPosition ( self , areas : PySide2 . QtCore . Qt . DockWidgetAreas , tabPosition : PySide2 . QtWidgets . QTabWidget . TabPosition ) -> None setTabPosition(self, areas: PySide2.QtCore.Qt.DockWidgetAreas, tabPosition: PySide2.QtWidgets.QTabWidget.TabPosition) -> None","title":"setTabPosition"},{"location":"reference/streamdeck_ui/gui/#settabshape","text":"def setTabShape ( self , tabShape : PySide2 . QtWidgets . QTabWidget . TabShape ) -> None setTabShape(self, tabShape: PySide2.QtWidgets.QTabWidget.TabShape) -> None","title":"setTabShape"},{"location":"reference/streamdeck_ui/gui/#settablettracking_1","text":"def setTabletTracking ( self , enable : bool ) -> None setTabletTracking(self, enable: bool) -> None","title":"setTabletTracking"},{"location":"reference/streamdeck_ui/gui/#settoolbuttonstyle_1","text":"def setToolButtonStyle ( self , toolButtonStyle : PySide2 . QtCore . Qt . ToolButtonStyle ) -> None setToolButtonStyle(self, toolButtonStyle: PySide2.QtCore.Qt.ToolButtonStyle) -> None","title":"setToolButtonStyle"},{"location":"reference/streamdeck_ui/gui/#settooltip_1","text":"def setToolTip ( self , arg__1 : str ) -> None setToolTip(self, arg__1: str) -> None","title":"setToolTip"},{"location":"reference/streamdeck_ui/gui/#settooltipduration_1","text":"def setToolTipDuration ( self , msec : int ) -> None setToolTipDuration(self, msec: int) -> None","title":"setToolTipDuration"},{"location":"reference/streamdeck_ui/gui/#setunifiedtitleandtoolbaronmac","text":"def setUnifiedTitleAndToolBarOnMac ( self , set : bool ) -> None setUnifiedTitleAndToolBarOnMac(self, set: bool) -> None","title":"setUnifiedTitleAndToolBarOnMac"},{"location":"reference/streamdeck_ui/gui/#setupdatesenabled_1","text":"def setUpdatesEnabled ( self , enable : bool ) -> None setUpdatesEnabled(self, enable: bool) -> None","title":"setUpdatesEnabled"},{"location":"reference/streamdeck_ui/gui/#setvisible_1","text":"def setVisible ( self , visible : bool ) -> None setVisible(self, visible: bool) -> None","title":"setVisible"},{"location":"reference/streamdeck_ui/gui/#setwhatsthis_1","text":"def setWhatsThis ( self , arg__1 : str ) -> None setWhatsThis(self, arg__1: str) -> None","title":"setWhatsThis"},{"location":"reference/streamdeck_ui/gui/#setwindowfilepath_1","text":"def setWindowFilePath ( self , filePath : str ) -> None setWindowFilePath(self, filePath: str) -> None","title":"setWindowFilePath"},{"location":"reference/streamdeck_ui/gui/#setwindowflag_1","text":"def setWindowFlag ( self , arg__1 : PySide2 . QtCore . Qt . WindowType , on : bool = True ) -> None setWindowFlag(self, arg__1: PySide2.QtCore.Qt.WindowType, on: bool = True) -> None","title":"setWindowFlag"},{"location":"reference/streamdeck_ui/gui/#setwindowflags_1","text":"def setWindowFlags ( self , type : PySide2 . QtCore . Qt . WindowFlags ) -> None setWindowFlags(self, type: PySide2.QtCore.Qt.WindowFlags) -> None","title":"setWindowFlags"},{"location":"reference/streamdeck_ui/gui/#setwindowicon_1","text":"def setWindowIcon ( self , icon : PySide2 . QtGui . QIcon ) -> None setWindowIcon(self, icon: PySide2.QtGui.QIcon) -> None","title":"setWindowIcon"},{"location":"reference/streamdeck_ui/gui/#setwindowicontext_1","text":"def setWindowIconText ( self , arg__1 : str ) -> None setWindowIconText(self, arg__1: str) -> None","title":"setWindowIconText"},{"location":"reference/streamdeck_ui/gui/#setwindowmodality_1","text":"def setWindowModality ( self , windowModality : PySide2 . QtCore . Qt . WindowModality ) -> None setWindowModality(self, windowModality: PySide2.QtCore.Qt.WindowModality) -> None","title":"setWindowModality"},{"location":"reference/streamdeck_ui/gui/#setwindowmodified_1","text":"def setWindowModified ( self , arg__1 : bool ) -> None setWindowModified(self, arg__1: bool) -> None","title":"setWindowModified"},{"location":"reference/streamdeck_ui/gui/#setwindowopacity_1","text":"def setWindowOpacity ( self , level : float ) -> None setWindowOpacity(self, level: float) -> None","title":"setWindowOpacity"},{"location":"reference/streamdeck_ui/gui/#setwindowrole_1","text":"def setWindowRole ( self , arg__1 : str ) -> None setWindowRole(self, arg__1: str) -> None","title":"setWindowRole"},{"location":"reference/streamdeck_ui/gui/#setwindowstate_1","text":"def setWindowState ( self , state : PySide2 . QtCore . Qt . WindowStates ) -> None setWindowState(self, state: PySide2.QtCore.Qt.WindowStates) -> None","title":"setWindowState"},{"location":"reference/streamdeck_ui/gui/#setwindowtitle_1","text":"def setWindowTitle ( self , arg__1 : str ) -> None setWindowTitle(self, arg__1: str) -> None","title":"setWindowTitle"},{"location":"reference/streamdeck_ui/gui/#sharedpainter_1","text":"def sharedPainter ( self ) -> PySide2 . QtGui . QPainter sharedPainter(self) -> PySide2.QtGui.QPainter","title":"sharedPainter"},{"location":"reference/streamdeck_ui/gui/#show_1","text":"def show ( self ) -> None show(self) -> None","title":"show"},{"location":"reference/streamdeck_ui/gui/#showevent_1","text":"def showEvent ( self , event : PySide2 . QtGui . QShowEvent ) -> None showEvent(self, event: PySide2.QtGui.QShowEvent) -> None","title":"showEvent"},{"location":"reference/streamdeck_ui/gui/#showfullscreen_1","text":"def showFullScreen ( self ) -> None showFullScreen(self) -> None","title":"showFullScreen"},{"location":"reference/streamdeck_ui/gui/#showmaximized_1","text":"def showMaximized ( self ) -> None showMaximized(self) -> None","title":"showMaximized"},{"location":"reference/streamdeck_ui/gui/#showminimized_1","text":"def showMinimized ( self ) -> None showMinimized(self) -> None","title":"showMinimized"},{"location":"reference/streamdeck_ui/gui/#shownormal_1","text":"def showNormal ( self ) -> None showNormal(self) -> None","title":"showNormal"},{"location":"reference/streamdeck_ui/gui/#signalsblocked_1","text":"def signalsBlocked ( self ) -> bool signalsBlocked(self) -> bool","title":"signalsBlocked"},{"location":"reference/streamdeck_ui/gui/#size_1","text":"def size ( self ) -> PySide2 . QtCore . QSize size(self) -> PySide2.QtCore.QSize","title":"size"},{"location":"reference/streamdeck_ui/gui/#sizehint_1","text":"def sizeHint ( self ) -> PySide2 . QtCore . QSize sizeHint(self) -> PySide2.QtCore.QSize","title":"sizeHint"},{"location":"reference/streamdeck_ui/gui/#sizeincrement_1","text":"def sizeIncrement ( self ) -> PySide2 . QtCore . QSize sizeIncrement(self) -> PySide2.QtCore.QSize","title":"sizeIncrement"},{"location":"reference/streamdeck_ui/gui/#sizepolicy_1","text":"def sizePolicy ( self ) -> PySide2 . QtWidgets . QSizePolicy sizePolicy(self) -> PySide2.QtWidgets.QSizePolicy","title":"sizePolicy"},{"location":"reference/streamdeck_ui/gui/#splitdockwidget","text":"def splitDockWidget ( self , after : PySide2 . QtWidgets . QDockWidget , dockwidget : PySide2 . QtWidgets . QDockWidget , orientation : PySide2 . QtCore . Qt . Orientation ) -> None splitDockWidget(self, after: PySide2.QtWidgets.QDockWidget, dockwidget: PySide2.QtWidgets.QDockWidget, orientation: PySide2.QtCore.Qt.Orientation) -> None","title":"splitDockWidget"},{"location":"reference/streamdeck_ui/gui/#stackunder_1","text":"def stackUnder ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> None stackUnder(self, arg__1: PySide2.QtWidgets.QWidget) -> None","title":"stackUnder"},{"location":"reference/streamdeck_ui/gui/#starttimer_1","text":"def startTimer ( self , interval : int , timerType : PySide2 . QtCore . Qt . TimerType = PySide2 . QtCore . Qt . TimerType . CoarseTimer ) -> int startTimer(self, interval: int, timerType: PySide2.QtCore.Qt.TimerType = PySide2.QtCore.Qt.TimerType.CoarseTimer) -> int","title":"startTimer"},{"location":"reference/streamdeck_ui/gui/#statusbar","text":"def statusBar ( self ) -> PySide2 . QtWidgets . QStatusBar statusBar(self) -> PySide2.QtWidgets.QStatusBar","title":"statusBar"},{"location":"reference/streamdeck_ui/gui/#statustip_1","text":"def statusTip ( self ) -> str statusTip(self) -> str","title":"statusTip"},{"location":"reference/streamdeck_ui/gui/#style_1","text":"def style ( self ) -> PySide2 . QtWidgets . QStyle style(self) -> PySide2.QtWidgets.QStyle","title":"style"},{"location":"reference/streamdeck_ui/gui/#stylesheet_1","text":"def styleSheet ( self ) -> str styleSheet(self) -> str","title":"styleSheet"},{"location":"reference/streamdeck_ui/gui/#systray_clicked","text":"def systray_clicked ( self , _status = None ) -> None View Source def systray_clicked ( self , _status = None ) -> None : self . hide () if self . window_shown : self . window_shown = False return self . show () self . activateWindow () getattr ( self , \"raise\" )() # noqa : B009 - Can 't call as self.raise() due to syntax error. self.window_shown = True","title":"systray_clicked"},{"location":"reference/streamdeck_ui/gui/#tabposition","text":"def tabPosition ( self , area : PySide2 . QtCore . Qt . DockWidgetArea ) -> PySide2 . QtWidgets . QTabWidget . TabPosition tabPosition(self, area: PySide2.QtCore.Qt.DockWidgetArea) -> PySide2.QtWidgets.QTabWidget.TabPosition","title":"tabPosition"},{"location":"reference/streamdeck_ui/gui/#tabshape","text":"def tabShape ( self ) -> PySide2 . QtWidgets . QTabWidget . TabShape tabShape(self) -> PySide2.QtWidgets.QTabWidget.TabShape","title":"tabShape"},{"location":"reference/streamdeck_ui/gui/#tabifieddockwidgetactivated","text":"def tabifiedDockWidgetActivated ( ... )","title":"tabifiedDockWidgetActivated"},{"location":"reference/streamdeck_ui/gui/#tabifieddockwidgets","text":"def tabifiedDockWidgets ( self , dockwidget : PySide2 . QtWidgets . QDockWidget ) -> typing . List [ PySide2 . QtWidgets . QDockWidget ] tabifiedDockWidgets(self, dockwidget: PySide2.QtWidgets.QDockWidget) -> typing.List[PySide2.QtWidgets.QDockWidget]","title":"tabifiedDockWidgets"},{"location":"reference/streamdeck_ui/gui/#tabifydockwidget","text":"def tabifyDockWidget ( self , first : PySide2 . QtWidgets . QDockWidget , second : PySide2 . QtWidgets . QDockWidget ) -> None tabifyDockWidget(self, first: PySide2.QtWidgets.QDockWidget, second: PySide2.QtWidgets.QDockWidget) -> None","title":"tabifyDockWidget"},{"location":"reference/streamdeck_ui/gui/#tabletevent_1","text":"def tabletEvent ( self , event : PySide2 . QtGui . QTabletEvent ) -> None tabletEvent(self, event: PySide2.QtGui.QTabletEvent) -> None","title":"tabletEvent"},{"location":"reference/streamdeck_ui/gui/#takecentralwidget","text":"def takeCentralWidget ( self ) -> PySide2 . QtWidgets . QWidget takeCentralWidget(self) -> PySide2.QtWidgets.QWidget","title":"takeCentralWidget"},{"location":"reference/streamdeck_ui/gui/#testattribute_1","text":"def testAttribute ( self , arg__1 : PySide2 . QtCore . Qt . WidgetAttribute ) -> bool testAttribute(self, arg__1: PySide2.QtCore.Qt.WidgetAttribute) -> bool","title":"testAttribute"},{"location":"reference/streamdeck_ui/gui/#thread_1","text":"def thread ( self ) -> PySide2 . QtCore . QThread thread(self) -> PySide2.QtCore.QThread","title":"thread"},{"location":"reference/streamdeck_ui/gui/#timerevent_1","text":"def timerEvent ( self , event : PySide2 . QtCore . QTimerEvent ) -> None timerEvent(self, event: PySide2.QtCore.QTimerEvent) -> None","title":"timerEvent"},{"location":"reference/streamdeck_ui/gui/#toolbararea","text":"def toolBarArea ( self , toolbar : PySide2 . QtWidgets . QToolBar ) -> PySide2 . QtCore . Qt . ToolBarArea toolBarArea(self, toolbar: PySide2.QtWidgets.QToolBar) -> PySide2.QtCore.Qt.ToolBarArea","title":"toolBarArea"},{"location":"reference/streamdeck_ui/gui/#toolbarbreak","text":"def toolBarBreak ( self , toolbar : PySide2 . QtWidgets . QToolBar ) -> bool toolBarBreak(self, toolbar: PySide2.QtWidgets.QToolBar) -> bool","title":"toolBarBreak"},{"location":"reference/streamdeck_ui/gui/#toolbuttonstyle_1","text":"def toolButtonStyle ( self ) -> PySide2 . QtCore . Qt . ToolButtonStyle toolButtonStyle(self) -> PySide2.QtCore.Qt.ToolButtonStyle","title":"toolButtonStyle"},{"location":"reference/streamdeck_ui/gui/#toolbuttonstylechanged","text":"def toolButtonStyleChanged ( ... )","title":"toolButtonStyleChanged"},{"location":"reference/streamdeck_ui/gui/#tooltip_1","text":"def toolTip ( self ) -> str toolTip(self) -> str","title":"toolTip"},{"location":"reference/streamdeck_ui/gui/#tooltipduration_1","text":"def toolTipDuration ( self ) -> int toolTipDuration(self) -> int","title":"toolTipDuration"},{"location":"reference/streamdeck_ui/gui/#toplevelwidget_1","text":"def topLevelWidget ( self ) -> PySide2 . QtWidgets . QWidget topLevelWidget(self) -> PySide2.QtWidgets.QWidget","title":"topLevelWidget"},{"location":"reference/streamdeck_ui/gui/#tr_1","text":"def tr ( self , arg__1 : bytes , arg__2 : bytes = b '' , arg__3 : int = - 1 ) -> str tr(self, arg__1: bytes, arg__2: bytes = b'', arg__3: int = -1) -> str","title":"tr"},{"location":"reference/streamdeck_ui/gui/#undermouse_1","text":"def underMouse ( self ) -> bool underMouse(self) -> bool","title":"underMouse"},{"location":"reference/streamdeck_ui/gui/#ungrabgesture_1","text":"def ungrabGesture ( self , type : PySide2 . QtCore . Qt . GestureType ) -> None ungrabGesture(self, type: PySide2.QtCore.Qt.GestureType) -> None","title":"ungrabGesture"},{"location":"reference/streamdeck_ui/gui/#unifiedtitleandtoolbaronmac","text":"def unifiedTitleAndToolBarOnMac ( self ) -> bool unifiedTitleAndToolBarOnMac(self) -> bool","title":"unifiedTitleAndToolBarOnMac"},{"location":"reference/streamdeck_ui/gui/#unsetcursor_1","text":"def unsetCursor ( self ) -> None unsetCursor(self) -> None","title":"unsetCursor"},{"location":"reference/streamdeck_ui/gui/#unsetlayoutdirection_1","text":"def unsetLayoutDirection ( self ) -> None unsetLayoutDirection(self) -> None","title":"unsetLayoutDirection"},{"location":"reference/streamdeck_ui/gui/#unsetlocale_1","text":"def unsetLocale ( self ) -> None unsetLocale(self) -> None","title":"unsetLocale"},{"location":"reference/streamdeck_ui/gui/#update_1","text":"def update ( ... ) update(self) -> None update(self, arg__1: PySide2.QtCore.QRect) -> None update(self, arg__1: PySide2.QtGui.QRegion) -> None update(self, x: int, y: int, w: int, h: int) -> None","title":"update"},{"location":"reference/streamdeck_ui/gui/#updategeometry_1","text":"def updateGeometry ( self ) -> None updateGeometry(self) -> None","title":"updateGeometry"},{"location":"reference/streamdeck_ui/gui/#updatemicrofocus_1","text":"def updateMicroFocus ( self ) -> None updateMicroFocus(self) -> None","title":"updateMicroFocus"},{"location":"reference/streamdeck_ui/gui/#updatesenabled_1","text":"def updatesEnabled ( self ) -> bool updatesEnabled(self) -> bool","title":"updatesEnabled"},{"location":"reference/streamdeck_ui/gui/#visibleregion_1","text":"def visibleRegion ( self ) -> PySide2 . QtGui . QRegion visibleRegion(self) -> PySide2.QtGui.QRegion","title":"visibleRegion"},{"location":"reference/streamdeck_ui/gui/#whatsthis_1","text":"def whatsThis ( self ) -> str whatsThis(self) -> str","title":"whatsThis"},{"location":"reference/streamdeck_ui/gui/#wheelevent_1","text":"def wheelEvent ( self , event : PySide2 . QtGui . QWheelEvent ) -> None wheelEvent(self, event: PySide2.QtGui.QWheelEvent) -> None","title":"wheelEvent"},{"location":"reference/streamdeck_ui/gui/#width_1","text":"def width ( self ) -> int width(self) -> int","title":"width"},{"location":"reference/streamdeck_ui/gui/#widthmm_1","text":"def widthMM ( self ) -> int widthMM(self) -> int","title":"widthMM"},{"location":"reference/streamdeck_ui/gui/#winid_1","text":"def winId ( self ) -> int winId(self) -> int","title":"winId"},{"location":"reference/streamdeck_ui/gui/#window_1","text":"def window ( self ) -> PySide2 . QtWidgets . QWidget window(self) -> PySide2.QtWidgets.QWidget","title":"window"},{"location":"reference/streamdeck_ui/gui/#windowfilepath_1","text":"def windowFilePath ( self ) -> str windowFilePath(self) -> str","title":"windowFilePath"},{"location":"reference/streamdeck_ui/gui/#windowflags_1","text":"def windowFlags ( self ) -> PySide2 . QtCore . Qt . WindowFlags windowFlags(self) -> PySide2.QtCore.Qt.WindowFlags","title":"windowFlags"},{"location":"reference/streamdeck_ui/gui/#windowhandle_1","text":"def windowHandle ( self ) -> PySide2 . QtGui . QWindow windowHandle(self) -> PySide2.QtGui.QWindow","title":"windowHandle"},{"location":"reference/streamdeck_ui/gui/#windowicon_1","text":"def windowIcon ( self ) -> PySide2 . QtGui . QIcon windowIcon(self) -> PySide2.QtGui.QIcon","title":"windowIcon"},{"location":"reference/streamdeck_ui/gui/#windowiconchanged_1","text":"def windowIconChanged ( ... )","title":"windowIconChanged"},{"location":"reference/streamdeck_ui/gui/#windowicontext_1","text":"def windowIconText ( self ) -> str windowIconText(self) -> str","title":"windowIconText"},{"location":"reference/streamdeck_ui/gui/#windowicontextchanged_1","text":"def windowIconTextChanged ( ... )","title":"windowIconTextChanged"},{"location":"reference/streamdeck_ui/gui/#windowmodality_1","text":"def windowModality ( self ) -> PySide2 . QtCore . Qt . WindowModality windowModality(self) -> PySide2.QtCore.Qt.WindowModality","title":"windowModality"},{"location":"reference/streamdeck_ui/gui/#windowopacity_1","text":"def windowOpacity ( self ) -> float windowOpacity(self) -> float","title":"windowOpacity"},{"location":"reference/streamdeck_ui/gui/#windowrole_1","text":"def windowRole ( self ) -> str windowRole(self) -> str","title":"windowRole"},{"location":"reference/streamdeck_ui/gui/#windowstate_1","text":"def windowState ( self ) -> PySide2 . QtCore . Qt . WindowStates windowState(self) -> PySide2.QtCore.Qt.WindowStates","title":"windowState"},{"location":"reference/streamdeck_ui/gui/#windowtitle_1","text":"def windowTitle ( self ) -> str windowTitle(self) -> str","title":"windowTitle"},{"location":"reference/streamdeck_ui/gui/#windowtitlechanged_1","text":"def windowTitleChanged ( ... )","title":"windowTitleChanged"},{"location":"reference/streamdeck_ui/gui/#windowtype_1","text":"def windowType ( self ) -> PySide2 . QtCore . Qt . WindowType windowType(self) -> PySide2.QtCore.Qt.WindowType","title":"windowType"},{"location":"reference/streamdeck_ui/gui/#x_1","text":"def x ( self ) -> int x(self) -> int","title":"x"},{"location":"reference/streamdeck_ui/gui/#y_1","text":"def y ( self ) -> int y(self) -> int","title":"y"},{"location":"reference/streamdeck_ui/resources_rc/","text":"Module streamdeck_ui.resources_rc None None View Source # Resource object code (Python 3) # Created by: object code # Created by: The Resource Compiler for Qt version 5.15.2 # WARNING! All changes made in this file will be lost! from PySide2 import QtCore qt_resource_data = b \" \\ \\ x00 \\ x00 \\ x02 \\ \\ x89 \\ PNG \\ x0d \\ x0a \\ x1a \\ x0a \\ x00 \\ x00 \\ x00 \\ x0dIHDR \\ x00 \\ \\ x00 \\ x00 \\ x10 \\ x00 \\ x00 \\ x00 \\ x10 \\ x08 \\ x06 \\ x00 \\ x00 \\ x00 \\ x1f \\ xf3 \\ xffa \\ \\ x00 \\ x00 \\ x00 \\ x19tEXtSoftware \\ \\ x00Adobe ImageRead \\ yq \\ xc9e < \\ x00 \\ x00 \\ x01 \\ xc2IDATx \\ xda \\ xa4 \\ S = O \\ x02A \\ x10 } + ` \\ x821 \\ x12z54 \\ x1a \\ \\ x8c \\ xe5 \\ x1a \\ xa9 \\ xfcHl \\ xb0 \\ x91 \\ x82 \\ x18cB , h \\ xb0 \\ \\ xb0 \\ x14 \\ xd0P \\ xde_0 \\ xb1 \\ xa6 \\ xf1 / \\ x10Il , \\ \\ x95P \\ x18 \\ x8c \\ x09T \\ x04BC \\ x84 ( \\ x16 \\ xc2 \\ x9d \\ xe7 \\ xcc \\ \\ xde \\ x9e \\ x1e \\ xa2 \\ x15 \\ x97 \\ xcc \\ xcd \\ xee \\ xbcyo \\ xe7f \\ xf6 \\ x84 \\ m \\ xdb \\ x98 \\ xe5 \\ x99 \\ xc3 \\ x8c \\ x8f \\ x9f_ \\ xd7B @ \\ x90 \\ xf7 \\ x01 \\ qr \\ x06Y \\ xd1 \\ x02 \\ xca \\ xa6 ' \\xe9 7 \\xc6 u \\x9f R \\xf5\\ \\ xde \\ x0a \\ xe2 \\ x04 \\ x18 \\ xc7 \\ x85 \\ x82 \\ xb4 \\ x9c \\ xc4 \\ xf8o \\ xec ( \\ x9b \\ \\ x9d \\ xc2 \\ x94 \\ x00 \\ x05A \\ xa7 \\ x19 ' \\xf9\\xbc\\xac\\xd7\\xeb H \\xe6\\ r \\ xd2 \\ xfcI \\ x8c \\ xf3 \\ xfa \\ x9d \\ x96 \\ xcdf \\ x13 ; \\ xa9 \\ x94 \\ \\ xc2 , - \\ xb8 \\ x89 % ! \\ xd4 ) T \\ x96 \\ x91 \\ xc8dd \\ \\ xadVC4 \\ x1a \\ xc5M \\ xa9Te \\ x96H \\ xc8n \\ xb7 \\ \\ x8bP ( \\ x84 \\ xc7J \\ xa5J \\ xd9E \\ x0a \\ x97 \\ xcf \\ x88 \\ xfb - \\ ` ; U ( \\ x91 \\ xfddR6 \\ x1b \\ x0dE \\ x18 \\ x0e \\ x87 \\ xe8 \\ \\ xb4 \\ xdb \\ x08 \\ x06 \\ x83xk \\ xb5 \\ x14 \\ x99zR \\ xe6 #\\xa7\\x04\\ \\ xc6 \\ xce \\ xe7 ( \\ x91 \\ x95 \\ xb55 \\ xf9 \\ xd2 \\ xeb \\ xa92 } > \\ x1f \\ ^ { = E \\ xa6f \\ x96 \\ x03 \\ x5c \\ xba \\ x16PS \\ xe8 \\ xe8 \\ xc0 \\ \\ xbc \\ xee8 \\ xaf \\ xc7 \\ x83 \\ x01 \\ x16 \\ xdcNY \\ x96 \\ x12 \\ xd7Ub \\ \\ xa4 \\ xd7S \\ xf7 \\ xc0 \\ xd6 \\ x0d [ \\ x0f \\ x87e \\ xd04 \\ xb1H1 \\ \\ xd78 \\ xc6 \\ x98 = 9 \\ x9d \\ xc91 \\ xd2 ) F \\ x8c \\ x12 ] R \\ \\ xad \\ xdf \\ xaf \\ xb2 \\ xb9 { \\ xc6 \\ xc6 \\ x7f \\ x8d \\ xd1t \\ xbe \\ xdf8 \\ xf4 \\ \\ x90o \\ x89H \\ xf1 \\ x22 \\ xdb \\ xadG \\ xe4P \\ x8b \\ x98 \\ xdfeS \\ #V\\xc9\\x9f\\x90j\\x0exx\\x0e\\x87m\\xf6\\xbc\\x8fP\\ < \\ xf2 \\ x0f \\ xb6 \\ xaa \\ xb9j \\ x0aB \\ x88e \\ xda / l \\ x01 \\ xbb \\ \\ x9b \\ xc0 \\ xf9 \\ x13py \\ x0f \\ xdcQ \\ xec \\ x83 \\ xec \\ x93 \\ xfb \\ xbb \\ x0d \\ \\ xecm \\ x00 \\ x17u \\ xe0 \\ xea \\ xc1 \\ xc1 \\ xde \\ x89 \\ xdbv \\ x05 \\ x96 ( \\ \\ x10 \\ xd0 \\ x83 \\ xf0 \\ x5cN \\ xe5m \\ xe7WP \\ x03 \\ xf2k \\ x9c \\ x87 \\ 2 \\ x22 \\ xee \\ xab \\ x98 \\ xf5w \\ xfe \\ x12 ` \\ x00 #\\xdc\\xd0\\x13\\x04\\ a8 > \\ x00 \\ x00 \\ x00 \\ x00IEND \\ xaeB ` \\ x82 \\ \" qt_resource_name = b \" \\ \\ x00 \\ x05 \\ \\ x00o \\ xa6S \\ \\ x00i \\ \\ x00c \\ x00o \\ x00n \\ x00s \\ \\ x00 \\ x09 \\ \\ x06 \\ xa6 \\ x82g \\ \\ x00c \\ \\ x00r \\ x00o \\ x00s \\ x00s \\ x00 . \\ x00p \\ x00n \\ x00g \\ \" qt_resource_struct = b \" \\ \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x02 \\ x00 \\ x00 \\ x00 \\ x01 \\ x00 \\ x00 \\ x00 \\ x01 \\ \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x02 \\ x00 \\ x00 \\ x00 \\ x01 \\ x00 \\ x00 \\ x00 \\ x02 \\ \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x02 \\ x00 \\ x00 \\ x00 \\ x01 \\ x00 \\ x00 \\ x00 \\ x03 \\ \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ \\ x00 \\ x00 \\ x00 \\ x10 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x01 \\ x00 \\ x00 \\ x00 \\ x00 \\ \\ x00 \\ x00 \\ x01x \\ x90 \\ x9e \\ x16 \\ xdd \\ \" def qInitResources (): QtCore . qRegisterResourceData ( 0x03 , qt_resource_struct , qt_resource_name , qt_resource_data ) def qCleanupResources (): QtCore . qUnregisterResourceData ( 0x03 , qt_resource_struct , qt_resource_name , qt_resource_data ) qInitResources () Variables qt_resource_data qt_resource_name qt_resource_struct Functions qCleanupResources def qCleanupResources ( ) View Source def qCleanupResources () : QtCore . qUnregisterResourceData ( 0 x03 , qt_resource_struct , qt_resource_name , qt_resource_data ) qInitResources def qInitResources ( ) View Source def qInitResources(): QtCore.qRegisterResourceData(0x03, qt_resource_struct, qt_resource_name, qt_resource_data)","title":"Resources Rc"},{"location":"reference/streamdeck_ui/resources_rc/#module-streamdeck_uiresources_rc","text":"None None View Source # Resource object code (Python 3) # Created by: object code # Created by: The Resource Compiler for Qt version 5.15.2 # WARNING! All changes made in this file will be lost! from PySide2 import QtCore qt_resource_data = b \" \\ \\ x00 \\ x00 \\ x02 \\ \\ x89 \\ PNG \\ x0d \\ x0a \\ x1a \\ x0a \\ x00 \\ x00 \\ x00 \\ x0dIHDR \\ x00 \\ \\ x00 \\ x00 \\ x10 \\ x00 \\ x00 \\ x00 \\ x10 \\ x08 \\ x06 \\ x00 \\ x00 \\ x00 \\ x1f \\ xf3 \\ xffa \\ \\ x00 \\ x00 \\ x00 \\ x19tEXtSoftware \\ \\ x00Adobe ImageRead \\ yq \\ xc9e < \\ x00 \\ x00 \\ x01 \\ xc2IDATx \\ xda \\ xa4 \\ S = O \\ x02A \\ x10 } + ` \\ x821 \\ x12z54 \\ x1a \\ \\ x8c \\ xe5 \\ x1a \\ xa9 \\ xfcHl \\ xb0 \\ x91 \\ x82 \\ x18cB , h \\ xb0 \\ \\ xb0 \\ x14 \\ xd0P \\ xde_0 \\ xb1 \\ xa6 \\ xf1 / \\ x10Il , \\ \\ x95P \\ x18 \\ x8c \\ x09T \\ x04BC \\ x84 ( \\ x16 \\ xc2 \\ x9d \\ xe7 \\ xcc \\ \\ xde \\ x9e \\ x1e \\ xa2 \\ x15 \\ x97 \\ xcc \\ xcd \\ xee \\ xbcyo \\ xe7f \\ xf6 \\ x84 \\ m \\ xdb \\ x98 \\ xe5 \\ x99 \\ xc3 \\ x8c \\ x8f \\ x9f_ \\ xd7B @ \\ x90 \\ xf7 \\ x01 \\ qr \\ x06Y \\ xd1 \\ x02 \\ xca \\ xa6 ' \\xe9 7 \\xc6 u \\x9f R \\xf5\\ \\ xde \\ x0a \\ xe2 \\ x04 \\ x18 \\ xc7 \\ x85 \\ x82 \\ xb4 \\ x9c \\ xc4 \\ xf8o \\ xec ( \\ x9b \\ \\ x9d \\ xc2 \\ x94 \\ x00 \\ x05A \\ xa7 \\ x19 ' \\xf9\\xbc\\xac\\xd7\\xeb H \\xe6\\ r \\ xd2 \\ xfcI \\ x8c \\ xf3 \\ xfa \\ x9d \\ x96 \\ xcdf \\ x13 ; \\ xa9 \\ x94 \\ \\ xc2 , - \\ xb8 \\ x89 % ! \\ xd4 ) T \\ x96 \\ x91 \\ xc8dd \\ \\ xadVC4 \\ x1a \\ xc5M \\ xa9Te \\ x96H \\ xc8n \\ xb7 \\ \\ x8bP ( \\ x84 \\ xc7J \\ xa5J \\ xd9E \\ x0a \\ x97 \\ xcf \\ x88 \\ xfb - \\ ` ; U ( \\ x91 \\ xfddR6 \\ x1b \\ x0dE \\ x18 \\ x0e \\ x87 \\ xe8 \\ \\ xb4 \\ xdb \\ x08 \\ x06 \\ x83xk \\ xb5 \\ x14 \\ x99zR \\ xe6 #\\xa7\\x04\\ \\ xc6 \\ xce \\ xe7 ( \\ x91 \\ x95 \\ xb55 \\ xf9 \\ xd2 \\ xeb \\ xa92 } > \\ x1f \\ ^ { = E \\ xa6f \\ x96 \\ x03 \\ x5c \\ xba \\ x16PS \\ xe8 \\ xe8 \\ xc0 \\ \\ xbc \\ xee8 \\ xaf \\ xc7 \\ x83 \\ x01 \\ x16 \\ xdcNY \\ x96 \\ x12 \\ xd7Ub \\ \\ xa4 \\ xd7S \\ xf7 \\ xc0 \\ xd6 \\ x0d [ \\ x0f \\ x87e \\ xd04 \\ xb1H1 \\ \\ xd78 \\ xc6 \\ x98 = 9 \\ x9d \\ xc91 \\ xd2 ) F \\ x8c \\ x12 ] R \\ \\ xad \\ xdf \\ xaf \\ xb2 \\ xb9 { \\ xc6 \\ xc6 \\ x7f \\ x8d \\ xd1t \\ xbe \\ xdf8 \\ xf4 \\ \\ x90o \\ x89H \\ xf1 \\ x22 \\ xdb \\ xadG \\ xe4P \\ x8b \\ x98 \\ xdfeS \\ #V\\xc9\\x9f\\x90j\\x0exx\\x0e\\x87m\\xf6\\xbc\\x8fP\\ < \\ xf2 \\ x0f \\ xb6 \\ xaa \\ xb9j \\ x0aB \\ x88e \\ xda / l \\ x01 \\ xbb \\ \\ x9b \\ xc0 \\ xf9 \\ x13py \\ x0f \\ xdcQ \\ xec \\ x83 \\ xec \\ x93 \\ xfb \\ xbb \\ x0d \\ \\ xecm \\ x00 \\ x17u \\ xe0 \\ xea \\ xc1 \\ xc1 \\ xde \\ x89 \\ xdbv \\ x05 \\ x96 ( \\ \\ x10 \\ xd0 \\ x83 \\ xf0 \\ x5cN \\ xe5m \\ xe7WP \\ x03 \\ xf2k \\ x9c \\ x87 \\ 2 \\ x22 \\ xee \\ xab \\ x98 \\ xf5w \\ xfe \\ x12 ` \\ x00 #\\xdc\\xd0\\x13\\x04\\ a8 > \\ x00 \\ x00 \\ x00 \\ x00IEND \\ xaeB ` \\ x82 \\ \" qt_resource_name = b \" \\ \\ x00 \\ x05 \\ \\ x00o \\ xa6S \\ \\ x00i \\ \\ x00c \\ x00o \\ x00n \\ x00s \\ \\ x00 \\ x09 \\ \\ x06 \\ xa6 \\ x82g \\ \\ x00c \\ \\ x00r \\ x00o \\ x00s \\ x00s \\ x00 . \\ x00p \\ x00n \\ x00g \\ \" qt_resource_struct = b \" \\ \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x02 \\ x00 \\ x00 \\ x00 \\ x01 \\ x00 \\ x00 \\ x00 \\ x01 \\ \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x02 \\ x00 \\ x00 \\ x00 \\ x01 \\ x00 \\ x00 \\ x00 \\ x02 \\ \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x02 \\ x00 \\ x00 \\ x00 \\ x01 \\ x00 \\ x00 \\ x00 \\ x03 \\ \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ \\ x00 \\ x00 \\ x00 \\ x10 \\ x00 \\ x00 \\ x00 \\ x00 \\ x00 \\ x01 \\ x00 \\ x00 \\ x00 \\ x00 \\ \\ x00 \\ x00 \\ x01x \\ x90 \\ x9e \\ x16 \\ xdd \\ \" def qInitResources (): QtCore . qRegisterResourceData ( 0x03 , qt_resource_struct , qt_resource_name , qt_resource_data ) def qCleanupResources (): QtCore . qUnregisterResourceData ( 0x03 , qt_resource_struct , qt_resource_name , qt_resource_data ) qInitResources ()","title":"Module streamdeck_ui.resources_rc"},{"location":"reference/streamdeck_ui/resources_rc/#variables","text":"qt_resource_data qt_resource_name qt_resource_struct","title":"Variables"},{"location":"reference/streamdeck_ui/resources_rc/#functions","text":"","title":"Functions"},{"location":"reference/streamdeck_ui/resources_rc/#qcleanupresources","text":"def qCleanupResources ( ) View Source def qCleanupResources () : QtCore . qUnregisterResourceData ( 0 x03 , qt_resource_struct , qt_resource_name , qt_resource_data )","title":"qCleanupResources"},{"location":"reference/streamdeck_ui/resources_rc/#qinitresources","text":"def qInitResources ( ) View Source def qInitResources(): QtCore.qRegisterResourceData(0x03, qt_resource_struct, qt_resource_name, qt_resource_data)","title":"qInitResources"},{"location":"reference/streamdeck_ui/ui_main/","text":"Module streamdeck_ui.ui_main None None View Source # -*- coding: utf-8 -*- ################################################################################ ## Form generated from reading UI file 'main.ui' ## ## Created by: Qt User Interface Compiler version 5.15.2 ## ## WARNING! All changes made in this file will be lost when recompiling UI file! ################################################################################ from PySide2.QtCore import * # type: ignore from PySide2.QtGui import * # type: ignore from PySide2.QtWidgets import * # type: ignore from . import resources_rc class Ui_MainWindow ( object ): def setupUi ( self , MainWindow ): if not MainWindow . objectName (): MainWindow . setObjectName ( u \"MainWindow\" ) MainWindow . resize ( 844 , 625 ) self . actionImport = QAction ( MainWindow ) self . actionImport . setObjectName ( u \"actionImport\" ) self . actionExport = QAction ( MainWindow ) self . actionExport . setObjectName ( u \"actionExport\" ) self . actionExit = QAction ( MainWindow ) self . actionExit . setObjectName ( u \"actionExit\" ) self . centralwidget = QWidget ( MainWindow ) self . centralwidget . setObjectName ( u \"centralwidget\" ) self . verticalLayout_2 = QVBoxLayout ( self . centralwidget ) self . verticalLayout_2 . setObjectName ( u \"verticalLayout_2\" ) self . verticalLayout = QVBoxLayout () self . verticalLayout . setObjectName ( u \"verticalLayout\" ) self . horizontalLayout_3 = QHBoxLayout () self . horizontalLayout_3 . setObjectName ( u \"horizontalLayout_3\" ) self . device_list = QComboBox ( self . centralwidget ) self . device_list . setObjectName ( u \"device_list\" ) self . device_list . setMinimumSize ( QSize ( 400 , 0 )) self . horizontalLayout_3 . addWidget ( self . device_list ) self . horizontalSpacer = QSpacerItem ( 40 , 20 , QSizePolicy . Expanding , QSizePolicy . Minimum ) self . horizontalLayout_3 . addItem ( self . horizontalSpacer ) self . label_4 = QLabel ( self . centralwidget ) self . label_4 . setObjectName ( u \"label_4\" ) sizePolicy = QSizePolicy ( QSizePolicy . Fixed , QSizePolicy . Preferred ) sizePolicy . setHorizontalStretch ( 0 ) sizePolicy . setVerticalStretch ( 0 ) sizePolicy . setHeightForWidth ( self . label_4 . sizePolicy () . hasHeightForWidth ()) self . label_4 . setSizePolicy ( sizePolicy ) self . horizontalLayout_3 . addWidget ( self . label_4 ) self . brightness = QSlider ( self . centralwidget ) self . brightness . setObjectName ( u \"brightness\" ) sizePolicy1 = QSizePolicy ( QSizePolicy . Minimum , QSizePolicy . Fixed ) sizePolicy1 . setHorizontalStretch ( 0 ) sizePolicy1 . setVerticalStretch ( 0 ) sizePolicy1 . setHeightForWidth ( self . brightness . sizePolicy () . hasHeightForWidth ()) self . brightness . setSizePolicy ( sizePolicy1 ) self . brightness . setMinimumSize ( QSize ( 200 , 0 )) self . brightness . setOrientation ( Qt . Horizontal ) self . horizontalLayout_3 . addWidget ( self . brightness ) self . verticalLayout . addLayout ( self . horizontalLayout_3 ) self . horizontalLayout = QHBoxLayout () self . horizontalLayout . setSpacing ( 6 ) self . horizontalLayout . setObjectName ( u \"horizontalLayout\" ) self . horizontalLayout . setSizeConstraint ( QLayout . SetDefaultConstraint ) self . horizontalLayout . setContentsMargins ( - 1 , 20 , - 1 , - 1 ) self . pages = QTabWidget ( self . centralwidget ) self . pages . setObjectName ( u \"pages\" ) sizePolicy2 = QSizePolicy ( QSizePolicy . Preferred , QSizePolicy . Preferred ) sizePolicy2 . setHorizontalStretch ( 0 ) sizePolicy2 . setVerticalStretch ( 0 ) sizePolicy2 . setHeightForWidth ( self . pages . sizePolicy () . hasHeightForWidth ()) self . pages . setSizePolicy ( sizePolicy2 ) self . pages . setAutoFillBackground ( False ) self . pages . setStyleSheet ( u \"b\" ) self . page_1 = QWidget () self . page_1 . setObjectName ( u \"page_1\" ) self . gridLayout_2 = QGridLayout ( self . page_1 ) self . gridLayout_2 . setObjectName ( u \"gridLayout_2\" ) self . pages . addTab ( self . page_1 , \"\" ) self . page_2 = QWidget () self . page_2 . setObjectName ( u \"page_2\" ) self . gridLayout_3 = QGridLayout ( self . page_2 ) self . gridLayout_3 . setObjectName ( u \"gridLayout_3\" ) self . pages . addTab ( self . page_2 , \"\" ) self . page_3 = QWidget () self . page_3 . setObjectName ( u \"page_3\" ) self . gridLayout_11 = QGridLayout ( self . page_3 ) self . gridLayout_11 . setObjectName ( u \"gridLayout_11\" ) self . pages . addTab ( self . page_3 , \"\" ) self . page_4 = QWidget () self . page_4 . setObjectName ( u \"page_4\" ) self . gridLayout_10 = QGridLayout ( self . page_4 ) self . gridLayout_10 . setObjectName ( u \"gridLayout_10\" ) self . pages . addTab ( self . page_4 , \"\" ) self . page_5 = QWidget () self . page_5 . setObjectName ( u \"page_5\" ) self . gridLayout_9 = QGridLayout ( self . page_5 ) self . gridLayout_9 . setObjectName ( u \"gridLayout_9\" ) self . pages . addTab ( self . page_5 , \"\" ) self . page_6 = QWidget () self . page_6 . setObjectName ( u \"page_6\" ) self . gridLayout_8 = QGridLayout ( self . page_6 ) self . gridLayout_8 . setObjectName ( u \"gridLayout_8\" ) self . pages . addTab ( self . page_6 , \"\" ) self . page_7 = QWidget () self . page_7 . setObjectName ( u \"page_7\" ) self . gridLayout_7 = QGridLayout ( self . page_7 ) self . gridLayout_7 . setObjectName ( u \"gridLayout_7\" ) self . pages . addTab ( self . page_7 , \"\" ) self . page_8 = QWidget () self . page_8 . setObjectName ( u \"page_8\" ) self . gridLayout_6 = QGridLayout ( self . page_8 ) self . gridLayout_6 . setObjectName ( u \"gridLayout_6\" ) self . pages . addTab ( self . page_8 , \"\" ) self . page_9 = QWidget () self . page_9 . setObjectName ( u \"page_9\" ) self . gridLayout_5 = QGridLayout ( self . page_9 ) self . gridLayout_5 . setObjectName ( u \"gridLayout_5\" ) self . pages . addTab ( self . page_9 , \"\" ) self . tab_10 = QWidget () self . tab_10 . setObjectName ( u \"tab_10\" ) self . gridLayout_4 = QGridLayout ( self . tab_10 ) self . gridLayout_4 . setObjectName ( u \"gridLayout_4\" ) self . pages . addTab ( self . tab_10 , \"\" ) self . horizontalLayout . addWidget ( self . pages ) self . groupBox = QGroupBox ( self . centralwidget ) self . groupBox . setObjectName ( u \"groupBox\" ) self . groupBox . setMinimumSize ( QSize ( 250 , 0 )) self . verticalLayout_3 = QVBoxLayout ( self . groupBox ) self . verticalLayout_3 . setObjectName ( u \"verticalLayout_3\" ) self . formLayout = QFormLayout () self . formLayout . setObjectName ( u \"formLayout\" ) self . label = QLabel ( self . groupBox ) self . label . setObjectName ( u \"label\" ) self . formLayout . setWidget ( 0 , QFormLayout . LabelRole , self . label ) self . horizontalLayout_2 = QHBoxLayout () self . horizontalLayout_2 . setSpacing ( 6 ) self . horizontalLayout_2 . setObjectName ( u \"horizontalLayout_2\" ) self . imageButton = QPushButton ( self . groupBox ) self . imageButton . setObjectName ( u \"imageButton\" ) self . horizontalLayout_2 . addWidget ( self . imageButton ) self . removeButton = QPushButton ( self . groupBox ) self . removeButton . setObjectName ( u \"removeButton\" ) sizePolicy3 = QSizePolicy ( QSizePolicy . Minimum , QSizePolicy . Minimum ) sizePolicy3 . setHorizontalStretch ( 0 ) sizePolicy3 . setVerticalStretch ( 0 ) sizePolicy3 . setHeightForWidth ( self . removeButton . sizePolicy () . hasHeightForWidth ()) self . removeButton . setSizePolicy ( sizePolicy3 ) self . removeButton . setMaximumSize ( QSize ( 30 , 16777215 )) icon = QIcon () icon . addFile ( u \":/icons/icons/cross.png\" , QSize (), QIcon . Normal , QIcon . Off ) self . removeButton . setIcon ( icon ) self . horizontalLayout_2 . addWidget ( self . removeButton ) self . formLayout . setLayout ( 0 , QFormLayout . FieldRole , self . horizontalLayout_2 ) self . label_2 = QLabel ( self . groupBox ) self . label_2 . setObjectName ( u \"label_2\" ) self . formLayout . setWidget ( 1 , QFormLayout . LabelRole , self . label_2 ) self . text = QLineEdit ( self . groupBox ) self . text . setObjectName ( u \"text\" ) self . formLayout . setWidget ( 1 , QFormLayout . FieldRole , self . text ) self . label_3 = QLabel ( self . groupBox ) self . label_3 . setObjectName ( u \"label_3\" ) self . formLayout . setWidget ( 2 , QFormLayout . LabelRole , self . label_3 ) self . command = QLineEdit ( self . groupBox ) self . command . setObjectName ( u \"command\" ) self . formLayout . setWidget ( 2 , QFormLayout . FieldRole , self . command ) self . label_5 = QLabel ( self . groupBox ) self . label_5 . setObjectName ( u \"label_5\" ) self . formLayout . setWidget ( 3 , QFormLayout . LabelRole , self . label_5 ) self . keys = QLineEdit ( self . groupBox ) self . keys . setObjectName ( u \"keys\" ) self . formLayout . setWidget ( 3 , QFormLayout . FieldRole , self . keys ) self . label_8 = QLabel ( self . groupBox ) self . label_8 . setObjectName ( u \"label_8\" ) self . formLayout . setWidget ( 4 , QFormLayout . LabelRole , self . label_8 ) self . switch_page = QSpinBox ( self . groupBox ) self . switch_page . setObjectName ( u \"switch_page\" ) self . switch_page . setMinimum ( 0 ) self . switch_page . setMaximum ( 10 ) self . switch_page . setValue ( 0 ) self . formLayout . setWidget ( 4 , QFormLayout . FieldRole , self . switch_page ) self . label_7 = QLabel ( self . groupBox ) self . label_7 . setObjectName ( u \"label_7\" ) self . formLayout . setWidget ( 5 , QFormLayout . LabelRole , self . label_7 ) self . change_brightness = QSpinBox ( self . groupBox ) self . change_brightness . setObjectName ( u \"change_brightness\" ) self . change_brightness . setMinimum ( - 99 ) self . formLayout . setWidget ( 5 , QFormLayout . FieldRole , self . change_brightness ) self . label_6 = QLabel ( self . groupBox ) self . label_6 . setObjectName ( u \"label_6\" ) self . formLayout . setWidget ( 6 , QFormLayout . LabelRole , self . label_6 ) self . write = QPlainTextEdit ( self . groupBox ) self . write . setObjectName ( u \"write\" ) self . formLayout . setWidget ( 6 , QFormLayout . FieldRole , self . write ) self . verticalLayout_3 . addLayout ( self . formLayout ) self . horizontalLayout . addWidget ( self . groupBox ) self . horizontalLayout . setStretch ( 0 , 2 ) self . horizontalLayout . setStretch ( 1 , 1 ) self . verticalLayout . addLayout ( self . horizontalLayout ) self . verticalLayout_2 . addLayout ( self . verticalLayout ) MainWindow . setCentralWidget ( self . centralwidget ) self . menubar = QMenuBar ( MainWindow ) self . menubar . setObjectName ( u \"menubar\" ) self . menubar . setGeometry ( QRect ( 0 , 0 , 844 , 22 )) self . menuFile = QMenu ( self . menubar ) self . menuFile . setObjectName ( u \"menuFile\" ) MainWindow . setMenuBar ( self . menubar ) self . statusbar = QStatusBar ( MainWindow ) self . statusbar . setObjectName ( u \"statusbar\" ) MainWindow . setStatusBar ( self . statusbar ) self . menubar . addAction ( self . menuFile . menuAction ()) self . menuFile . addAction ( self . actionImport ) self . menuFile . addAction ( self . actionExport ) self . menuFile . addSeparator () self . menuFile . addAction ( self . actionExit ) self . retranslateUi ( MainWindow ) self . pages . setCurrentIndex ( 0 ) QMetaObject . connectSlotsByName ( MainWindow ) # setupUi def retranslateUi ( self , MainWindow ): MainWindow . setWindowTitle ( QCoreApplication . translate ( \"MainWindow\" , u \"Stream Deck UI\" , None )) self . actionImport . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Import\" , None )) self . actionExport . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Export\" , None )) self . actionExit . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Exit\" , None )) self . label_4 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Brightness:\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_1 ), QCoreApplication . translate ( \"MainWindow\" , u \"Page 1\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_2 ), QCoreApplication . translate ( \"MainWindow\" , u \"2\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_3 ), QCoreApplication . translate ( \"MainWindow\" , u \"3\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_4 ), QCoreApplication . translate ( \"MainWindow\" , u \"4\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_5 ), QCoreApplication . translate ( \"MainWindow\" , u \"5\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_6 ), QCoreApplication . translate ( \"MainWindow\" , u \"6\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_7 ), QCoreApplication . translate ( \"MainWindow\" , u \"7\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_8 ), QCoreApplication . translate ( \"MainWindow\" , u \"8\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_9 ), QCoreApplication . translate ( \"MainWindow\" , u \"9\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . tab_10 ), QCoreApplication . translate ( \"MainWindow\" , u \"10\" , None )) self . groupBox . setTitle ( QCoreApplication . translate ( \"MainWindow\" , u \"Configure Button\" , None )) self . label . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Image:\" , None )) self . imageButton . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Image...\" , None )) #if QT_CONFIG(tooltip) self . removeButton . setToolTip ( QCoreApplication . translate ( \"MainWindow\" , u \"Remove the image from the button\" , None )) #endif // QT_CONFIG(tooltip) self . removeButton . setText ( \"\" ) self . label_2 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Text:\" , None )) self . label_3 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Command:\" , None )) self . label_5 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Press Keys:\" , None )) self . label_8 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Switch Page:\" , None )) self . label_7 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Brightness +/-:\" , None )) self . label_6 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Write Text:\" , None )) self . menuFile . setTitle ( QCoreApplication . translate ( \"MainWindow\" , u \"File\" , None )) # retranslateUi Classes Ui_MainWindow class Ui_MainWindow ( / , * args , ** kwargs ) View Source class Ui_MainWindow ( object ): def setupUi ( self , MainWindow ): if not MainWindow . objectName (): MainWindow . setObjectName ( u \"MainWindow\" ) MainWindow . resize ( 844 , 625 ) self . actionImport = QAction ( MainWindow ) self . actionImport . setObjectName ( u \"actionImport\" ) self . actionExport = QAction ( MainWindow ) self . actionExport . setObjectName ( u \"actionExport\" ) self . actionExit = QAction ( MainWindow ) self . actionExit . setObjectName ( u \"actionExit\" ) self . centralwidget = QWidget ( MainWindow ) self . centralwidget . setObjectName ( u \"centralwidget\" ) self . verticalLayout_2 = QVBoxLayout ( self . centralwidget ) self . verticalLayout_2 . setObjectName ( u \"verticalLayout_2\" ) self . verticalLayout = QVBoxLayout () self . verticalLayout . setObjectName ( u \"verticalLayout\" ) self . horizontalLayout_3 = QHBoxLayout () self . horizontalLayout_3 . setObjectName ( u \"horizontalLayout_3\" ) self . device_list = QComboBox ( self . centralwidget ) self . device_list . setObjectName ( u \"device_list\" ) self . device_list . setMinimumSize ( QSize ( 400 , 0 )) self . horizontalLayout_3 . addWidget ( self . device_list ) self . horizontalSpacer = QSpacerItem ( 40 , 20 , QSizePolicy . Expanding , QSizePolicy . Minimum ) self . horizontalLayout_3 . addItem ( self . horizontalSpacer ) self . label_4 = QLabel ( self . centralwidget ) self . label_4 . setObjectName ( u \"label_4\" ) sizePolicy = QSizePolicy ( QSizePolicy . Fixed , QSizePolicy . Preferred ) sizePolicy . setHorizontalStretch ( 0 ) sizePolicy . setVerticalStretch ( 0 ) sizePolicy . setHeightForWidth ( self . label_4 . sizePolicy () . hasHeightForWidth ()) self . label_4 . setSizePolicy ( sizePolicy ) self . horizontalLayout_3 . addWidget ( self . label_4 ) self . brightness = QSlider ( self . centralwidget ) self . brightness . setObjectName ( u \"brightness\" ) sizePolicy1 = QSizePolicy ( QSizePolicy . Minimum , QSizePolicy . Fixed ) sizePolicy1 . setHorizontalStretch ( 0 ) sizePolicy1 . setVerticalStretch ( 0 ) sizePolicy1 . setHeightForWidth ( self . brightness . sizePolicy () . hasHeightForWidth ()) self . brightness . setSizePolicy ( sizePolicy1 ) self . brightness . setMinimumSize ( QSize ( 200 , 0 )) self . brightness . setOrientation ( Qt . Horizontal ) self . horizontalLayout_3 . addWidget ( self . brightness ) self . verticalLayout . addLayout ( self . horizontalLayout_3 ) self . horizontalLayout = QHBoxLayout () self . horizontalLayout . setSpacing ( 6 ) self . horizontalLayout . setObjectName ( u \"horizontalLayout\" ) self . horizontalLayout . setSizeConstraint ( QLayout . SetDefaultConstraint ) self . horizontalLayout . setContentsMargins ( - 1 , 20 , - 1 , - 1 ) self . pages = QTabWidget ( self . centralwidget ) self . pages . setObjectName ( u \"pages\" ) sizePolicy2 = QSizePolicy ( QSizePolicy . Preferred , QSizePolicy . Preferred ) sizePolicy2 . setHorizontalStretch ( 0 ) sizePolicy2 . setVerticalStretch ( 0 ) sizePolicy2 . setHeightForWidth ( self . pages . sizePolicy () . hasHeightForWidth ()) self . pages . setSizePolicy ( sizePolicy2 ) self . pages . setAutoFillBackground ( False ) self . pages . setStyleSheet ( u \"b\" ) self . page_1 = QWidget () self . page_1 . setObjectName ( u \"page_1\" ) self . gridLayout_2 = QGridLayout ( self . page_1 ) self . gridLayout_2 . setObjectName ( u \"gridLayout_2\" ) self . pages . addTab ( self . page_1 , \"\" ) self . page_2 = QWidget () self . page_2 . setObjectName ( u \"page_2\" ) self . gridLayout_3 = QGridLayout ( self . page_2 ) self . gridLayout_3 . setObjectName ( u \"gridLayout_3\" ) self . pages . addTab ( self . page_2 , \"\" ) self . page_3 = QWidget () self . page_3 . setObjectName ( u \"page_3\" ) self . gridLayout_11 = QGridLayout ( self . page_3 ) self . gridLayout_11 . setObjectName ( u \"gridLayout_11\" ) self . pages . addTab ( self . page_3 , \"\" ) self . page_4 = QWidget () self . page_4 . setObjectName ( u \"page_4\" ) self . gridLayout_10 = QGridLayout ( self . page_4 ) self . gridLayout_10 . setObjectName ( u \"gridLayout_10\" ) self . pages . addTab ( self . page_4 , \"\" ) self . page_5 = QWidget () self . page_5 . setObjectName ( u \"page_5\" ) self . gridLayout_9 = QGridLayout ( self . page_5 ) self . gridLayout_9 . setObjectName ( u \"gridLayout_9\" ) self . pages . addTab ( self . page_5 , \"\" ) self . page_6 = QWidget () self . page_6 . setObjectName ( u \"page_6\" ) self . gridLayout_8 = QGridLayout ( self . page_6 ) self . gridLayout_8 . setObjectName ( u \"gridLayout_8\" ) self . pages . addTab ( self . page_6 , \"\" ) self . page_7 = QWidget () self . page_7 . setObjectName ( u \"page_7\" ) self . gridLayout_7 = QGridLayout ( self . page_7 ) self . gridLayout_7 . setObjectName ( u \"gridLayout_7\" ) self . pages . addTab ( self . page_7 , \"\" ) self . page_8 = QWidget () self . page_8 . setObjectName ( u \"page_8\" ) self . gridLayout_6 = QGridLayout ( self . page_8 ) self . gridLayout_6 . setObjectName ( u \"gridLayout_6\" ) self . pages . addTab ( self . page_8 , \"\" ) self . page_9 = QWidget () self . page_9 . setObjectName ( u \"page_9\" ) self . gridLayout_5 = QGridLayout ( self . page_9 ) self . gridLayout_5 . setObjectName ( u \"gridLayout_5\" ) self . pages . addTab ( self . page_9 , \"\" ) self . tab_10 = QWidget () self . tab_10 . setObjectName ( u \"tab_10\" ) self . gridLayout_4 = QGridLayout ( self . tab_10 ) self . gridLayout_4 . setObjectName ( u \"gridLayout_4\" ) self . pages . addTab ( self . tab_10 , \"\" ) self . horizontalLayout . addWidget ( self . pages ) self . groupBox = QGroupBox ( self . centralwidget ) self . groupBox . setObjectName ( u \"groupBox\" ) self . groupBox . setMinimumSize ( QSize ( 250 , 0 )) self . verticalLayout_3 = QVBoxLayout ( self . groupBox ) self . verticalLayout_3 . setObjectName ( u \"verticalLayout_3\" ) self . formLayout = QFormLayout () self . formLayout . setObjectName ( u \"formLayout\" ) self . label = QLabel ( self . groupBox ) self . label . setObjectName ( u \"label\" ) self . formLayout . setWidget ( 0 , QFormLayout . LabelRole , self . label ) self . horizontalLayout_2 = QHBoxLayout () self . horizontalLayout_2 . setSpacing ( 6 ) self . horizontalLayout_2 . setObjectName ( u \"horizontalLayout_2\" ) self . imageButton = QPushButton ( self . groupBox ) self . imageButton . setObjectName ( u \"imageButton\" ) self . horizontalLayout_2 . addWidget ( self . imageButton ) self . removeButton = QPushButton ( self . groupBox ) self . removeButton . setObjectName ( u \"removeButton\" ) sizePolicy3 = QSizePolicy ( QSizePolicy . Minimum , QSizePolicy . Minimum ) sizePolicy3 . setHorizontalStretch ( 0 ) sizePolicy3 . setVerticalStretch ( 0 ) sizePolicy3 . setHeightForWidth ( self . removeButton . sizePolicy () . hasHeightForWidth ()) self . removeButton . setSizePolicy ( sizePolicy3 ) self . removeButton . setMaximumSize ( QSize ( 30 , 16777215 )) icon = QIcon () icon . addFile ( u \":/icons/icons/cross.png\" , QSize (), QIcon . Normal , QIcon . Off ) self . removeButton . setIcon ( icon ) self . horizontalLayout_2 . addWidget ( self . removeButton ) self . formLayout . setLayout ( 0 , QFormLayout . FieldRole , self . horizontalLayout_2 ) self . label_2 = QLabel ( self . groupBox ) self . label_2 . setObjectName ( u \"label_2\" ) self . formLayout . setWidget ( 1 , QFormLayout . LabelRole , self . label_2 ) self . text = QLineEdit ( self . groupBox ) self . text . setObjectName ( u \"text\" ) self . formLayout . setWidget ( 1 , QFormLayout . FieldRole , self . text ) self . label_3 = QLabel ( self . groupBox ) self . label_3 . setObjectName ( u \"label_3\" ) self . formLayout . setWidget ( 2 , QFormLayout . LabelRole , self . label_3 ) self . command = QLineEdit ( self . groupBox ) self . command . setObjectName ( u \"command\" ) self . formLayout . setWidget ( 2 , QFormLayout . FieldRole , self . command ) self . label_5 = QLabel ( self . groupBox ) self . label_5 . setObjectName ( u \"label_5\" ) self . formLayout . setWidget ( 3 , QFormLayout . LabelRole , self . label_5 ) self . keys = QLineEdit ( self . groupBox ) self . keys . setObjectName ( u \"keys\" ) self . formLayout . setWidget ( 3 , QFormLayout . FieldRole , self . keys ) self . label_8 = QLabel ( self . groupBox ) self . label_8 . setObjectName ( u \"label_8\" ) self . formLayout . setWidget ( 4 , QFormLayout . LabelRole , self . label_8 ) self . switch_page = QSpinBox ( self . groupBox ) self . switch_page . setObjectName ( u \"switch_page\" ) self . switch_page . setMinimum ( 0 ) self . switch_page . setMaximum ( 10 ) self . switch_page . setValue ( 0 ) self . formLayout . setWidget ( 4 , QFormLayout . FieldRole , self . switch_page ) self . label_7 = QLabel ( self . groupBox ) self . label_7 . setObjectName ( u \"label_7\" ) self . formLayout . setWidget ( 5 , QFormLayout . LabelRole , self . label_7 ) self . change_brightness = QSpinBox ( self . groupBox ) self . change_brightness . setObjectName ( u \"change_brightness\" ) self . change_brightness . setMinimum ( - 99 ) self . formLayout . setWidget ( 5 , QFormLayout . FieldRole , self . change_brightness ) self . label_6 = QLabel ( self . groupBox ) self . label_6 . setObjectName ( u \"label_6\" ) self . formLayout . setWidget ( 6 , QFormLayout . LabelRole , self . label_6 ) self . write = QPlainTextEdit ( self . groupBox ) self . write . setObjectName ( u \"write\" ) self . formLayout . setWidget ( 6 , QFormLayout . FieldRole , self . write ) self . verticalLayout_3 . addLayout ( self . formLayout ) self . horizontalLayout . addWidget ( self . groupBox ) self . horizontalLayout . setStretch ( 0 , 2 ) self . horizontalLayout . setStretch ( 1 , 1 ) self . verticalLayout . addLayout ( self . horizontalLayout ) self . verticalLayout_2 . addLayout ( self . verticalLayout ) MainWindow . setCentralWidget ( self . centralwidget ) self . menubar = QMenuBar ( MainWindow ) self . menubar . setObjectName ( u \"menubar\" ) self . menubar . setGeometry ( QRect ( 0 , 0 , 844 , 22 )) self . menuFile = QMenu ( self . menubar ) self . menuFile . setObjectName ( u \"menuFile\" ) MainWindow . setMenuBar ( self . menubar ) self . statusbar = QStatusBar ( MainWindow ) self . statusbar . setObjectName ( u \"statusbar\" ) MainWindow . setStatusBar ( self . statusbar ) self . menubar . addAction ( self . menuFile . menuAction ()) self . menuFile . addAction ( self . actionImport ) self . menuFile . addAction ( self . actionExport ) self . menuFile . addSeparator () self . menuFile . addAction ( self . actionExit ) self . retranslateUi ( MainWindow ) self . pages . setCurrentIndex ( 0 ) QMetaObject . connectSlotsByName ( MainWindow ) # setupUi def retranslateUi ( self , MainWindow ): MainWindow . setWindowTitle ( QCoreApplication . translate ( \"MainWindow\" , u \"Stream Deck UI\" , None )) self . actionImport . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Import\" , None )) self . actionExport . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Export\" , None )) self . actionExit . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Exit\" , None )) self . label_4 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Brightness:\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_1 ), QCoreApplication . translate ( \"MainWindow\" , u \"Page 1\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_2 ), QCoreApplication . translate ( \"MainWindow\" , u \"2\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_3 ), QCoreApplication . translate ( \"MainWindow\" , u \"3\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_4 ), QCoreApplication . translate ( \"MainWindow\" , u \"4\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_5 ), QCoreApplication . translate ( \"MainWindow\" , u \"5\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_6 ), QCoreApplication . translate ( \"MainWindow\" , u \"6\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_7 ), QCoreApplication . translate ( \"MainWindow\" , u \"7\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_8 ), QCoreApplication . translate ( \"MainWindow\" , u \"8\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_9 ), QCoreApplication . translate ( \"MainWindow\" , u \"9\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . tab_10 ), QCoreApplication . translate ( \"MainWindow\" , u \"10\" , None )) self . groupBox . setTitle ( QCoreApplication . translate ( \"MainWindow\" , u \"Configure Button\" , None )) self . label . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Image:\" , None )) self . imageButton . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Image...\" , None )) #if QT_CONFIG(tooltip) self . removeButton . setToolTip ( QCoreApplication . translate ( \"MainWindow\" , u \"Remove the image from the button\" , None )) #endif // QT_CONFIG(tooltip) self . removeButton . setText ( \"\" ) self . label_2 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Text:\" , None )) self . label_3 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Command:\" , None )) self . label_5 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Press Keys:\" , None )) self . label_8 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Switch Page:\" , None )) self . label_7 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Brightness +/-:\" , None )) self . label_6 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Write Text:\" , None )) self . menuFile . setTitle ( QCoreApplication . translate ( \"MainWindow\" , u \"File\" , None )) Methods retranslateUi def retranslateUi ( self , MainWindow ) View Source def retranslateUi ( self , MainWindow ): MainWindow . setWindowTitle ( QCoreApplication . translate ( \"MainWindow\" , u \"Stream Deck UI\" , None )) self . actionImport . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Import\" , None )) self . actionExport . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Export\" , None )) self . actionExit . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Exit\" , None )) self . label_4 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Brightness:\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_1 ), QCoreApplication . translate ( \"MainWindow\" , u \"Page 1\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_2 ), QCoreApplication . translate ( \"MainWindow\" , u \"2\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_3 ), QCoreApplication . translate ( \"MainWindow\" , u \"3\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_4 ), QCoreApplication . translate ( \"MainWindow\" , u \"4\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_5 ), QCoreApplication . translate ( \"MainWindow\" , u \"5\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_6 ), QCoreApplication . translate ( \"MainWindow\" , u \"6\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_7 ), QCoreApplication . translate ( \"MainWindow\" , u \"7\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_8 ), QCoreApplication . translate ( \"MainWindow\" , u \"8\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_9 ), QCoreApplication . translate ( \"MainWindow\" , u \"9\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . tab_10 ), QCoreApplication . translate ( \"MainWindow\" , u \"10\" , None )) self . groupBox . setTitle ( QCoreApplication . translate ( \"MainWindow\" , u \"Configure Button\" , None )) self . label . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Image:\" , None )) self . imageButton . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Image...\" , None )) #if QT_CONFIG(tooltip) self . removeButton . setToolTip ( QCoreApplication . translate ( \"MainWindow\" , u \"Remove the image from the button\" , None )) #endif // QT_CONFIG(tooltip) self . removeButton . setText ( \"\" ) self . label_2 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Text:\" , None )) self . label_3 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Command:\" , None )) self . label_5 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Press Keys:\" , None )) self . label_8 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Switch Page:\" , None )) self . label_7 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Brightness +/-:\" , None )) self . label_6 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Write Text:\" , None )) self . menuFile . setTitle ( QCoreApplication . translate ( \"MainWindow\" , u \"File\" , None )) setupUi def setupUi ( self , MainWindow ) View Source def setupUi ( self , MainWindow ) : if not MainWindow . objectName () : MainWindow . setObjectName ( u \" MainWindow \" ) MainWindow . resize ( 844 , 625 ) self . actionImport = QAction ( MainWindow ) self . actionImport . setObjectName ( u \" actionImport \" ) self . actionExport = QAction ( MainWindow ) self . actionExport . setObjectName ( u \" actionExport \" ) self . actionExit = QAction ( MainWindow ) self . actionExit . setObjectName ( u \" actionExit \" ) self . centralwidget = QWidget ( MainWindow ) self . centralwidget . setObjectName ( u \" centralwidget \" ) self . verticalLayout_2 = QVBoxLayout ( self . centralwidget ) self . verticalLayout_2 . setObjectName ( u \" verticalLayout_2 \" ) self . verticalLayout = QVBoxLayout () self . verticalLayout . setObjectName ( u \" verticalLayout \" ) self . horizontalLayout_3 = QHBoxLayout () self . horizontalLayout_3 . setObjectName ( u \" horizontalLayout_3 \" ) self . device_list = QComboBox ( self . centralwidget ) self . device_list . setObjectName ( u \" device_list \" ) self . device_list . setMinimumSize ( QSize ( 400 , 0 )) self . horizontalLayout_3 . addWidget ( self . device_list ) self . horizontalSpacer = QSpacerItem ( 40 , 20 , QSizePolicy . Expanding , QSizePolicy . Minimum ) self . horizontalLayout_3 . addItem ( self . horizontalSpacer ) self . label_4 = QLabel ( self . centralwidget ) self . label_4 . setObjectName ( u \" label_4 \" ) sizePolicy = QSizePolicy ( QSizePolicy . Fixed , QSizePolicy . Preferred ) sizePolicy . setHorizontalStretch ( 0 ) sizePolicy . setVerticalStretch ( 0 ) sizePolicy . setHeightForWidth ( self . label_4 . sizePolicy () . hasHeightForWidth ()) self . label_4 . setSizePolicy ( sizePolicy ) self . horizontalLayout_3 . addWidget ( self . label_4 ) self . brightness = QSlider ( self . centralwidget ) self . brightness . setObjectName ( u \" brightness \" ) sizePolicy1 = QSizePolicy ( QSizePolicy . Minimum , QSizePolicy . Fixed ) sizePolicy1 . setHorizontalStretch ( 0 ) sizePolicy1 . setVerticalStretch ( 0 ) sizePolicy1 . setHeightForWidth ( self . brightness . sizePolicy () . hasHeightForWidth ()) self . brightness . setSizePolicy ( sizePolicy1 ) self . brightness . setMinimumSize ( QSize ( 200 , 0 )) self . brightness . setOrientation ( Qt . Horizontal ) self . horizontalLayout_3 . addWidget ( self . brightness ) self . verticalLayout . addLayout ( self . horizontalLayout_3 ) self . horizontalLayout = QHBoxLayout () self . horizontalLayout . setSpacing ( 6 ) self . horizontalLayout . setObjectName ( u \" horizontalLayout \" ) self . horizontalLayout . setSizeConstraint ( QLayout . SetDefaultConstraint ) self . horizontalLayout . setContentsMargins ( - 1 , 20 , - 1 , - 1 ) self . pages = QTabWidget ( self . centralwidget ) self . pages . setObjectName ( u \" pages \" ) sizePolicy2 = QSizePolicy ( QSizePolicy . Preferred , QSizePolicy . Preferred ) sizePolicy2 . setHorizontalStretch ( 0 ) sizePolicy2 . setVerticalStretch ( 0 ) sizePolicy2 . setHeightForWidth ( self . pages . sizePolicy () . hasHeightForWidth ()) self . pages . setSizePolicy ( sizePolicy2 ) self . pages . setAutoFillBackground ( False ) self . pages . setStyleSheet ( u \" b \" ) self . page_1 = QWidget () self . page_1 . setObjectName ( u \" page_1 \" ) self . gridLayout_2 = QGridLayout ( self . page_1 ) self . gridLayout_2 . setObjectName ( u \" gridLayout_2 \" ) self . pages . addTab ( self . page_1 , \"\" ) self . page_2 = QWidget () self . page_2 . setObjectName ( u \" page_2 \" ) self . gridLayout_3 = QGridLayout ( self . page_2 ) self . gridLayout_3 . setObjectName ( u \" gridLayout_3 \" ) self . pages . addTab ( self . page_2 , \"\" ) self . page_3 = QWidget () self . page_3 . setObjectName ( u \" page_3 \" ) self . gridLayout_11 = QGridLayout ( self . page_3 ) self . gridLayout_11 . setObjectName ( u \" gridLayout_11 \" ) self . pages . addTab ( self . page_3 , \"\" ) self . page_4 = QWidget () self . page_4 . setObjectName ( u \" page_4 \" ) self . gridLayout_10 = QGridLayout ( self . page_4 ) self . gridLayout_10 . setObjectName ( u \" gridLayout_10 \" ) self . pages . addTab ( self . page_4 , \"\" ) self . page_5 = QWidget () self . page_5 . setObjectName ( u \" page_5 \" ) self . gridLayout_9 = QGridLayout ( self . page_5 ) self . gridLayout_9 . setObjectName ( u \" gridLayout_9 \" ) self . pages . addTab ( self . page_5 , \"\" ) self . page_6 = QWidget () self . page_6 . setObjectName ( u \" page_6 \" ) self . gridLayout_8 = QGridLayout ( self . page_6 ) self . gridLayout_8 . setObjectName ( u \" gridLayout_8 \" ) self . pages . addTab ( self . page_6 , \"\" ) self . page_7 = QWidget () self . page_7 . setObjectName ( u \" page_7 \" ) self . gridLayout_7 = QGridLayout ( self . page_7 ) self . gridLayout_7 . setObjectName ( u \" gridLayout_7 \" ) self . pages . addTab ( self . page_7 , \"\" ) self . page_8 = QWidget () self . page_8 . setObjectName ( u \" page_8 \" ) self . gridLayout_6 = QGridLayout ( self . page_8 ) self . gridLayout_6 . setObjectName ( u \" gridLayout_6 \" ) self . pages . addTab ( self . page_8 , \"\" ) self . page_9 = QWidget () self . page_9 . setObjectName ( u \" page_9 \" ) self . gridLayout_5 = QGridLayout ( self . page_9 ) self . gridLayout_5 . setObjectName ( u \" gridLayout_5 \" ) self . pages . addTab ( self . page_9 , \"\" ) self . tab_10 = QWidget () self . tab_10 . setObjectName ( u \" tab_10 \" ) self . gridLayout_4 = QGridLayout ( self . tab_10 ) self . gridLayout_4 . setObjectName ( u \" gridLayout_4 \" ) self . pages . addTab ( self . tab_10 , \"\" ) self . horizontalLayout . addWidget ( self . pages ) self . groupBox = QGroupBox ( self . centralwidget ) self . groupBox . setObjectName ( u \" groupBox \" ) self . groupBox . setMinimumSize ( QSize ( 250 , 0 )) self . verticalLayout_3 = QVBoxLayout ( self . groupBox ) self . verticalLayout_3 . setObjectName ( u \" verticalLayout_3 \" ) self . formLayout = QFormLayout () self . formLayout . setObjectName ( u \" formLayout \" ) self . label = QLabel ( self . groupBox ) self . label . setObjectName ( u \" label \" ) self . formLayout . setWidget ( 0 , QFormLayout . LabelRole , self . label ) self . horizontalLayout_2 = QHBoxLayout () self . horizontalLayout_2 . setSpacing ( 6 ) self . horizontalLayout_2 . setObjectName ( u \" horizontalLayout_2 \" ) self . imageButton = QPushButton ( self . groupBox ) self . imageButton . setObjectName ( u \" imageButton \" ) self . horizontalLayout_2 . addWidget ( self . imageButton ) self . removeButton = QPushButton ( self . groupBox ) self . removeButton . setObjectName ( u \" removeButton \" ) sizePolicy3 = QSizePolicy ( QSizePolicy . Minimum , QSizePolicy . Minimum ) sizePolicy3 . setHorizontalStretch ( 0 ) sizePolicy3 . setVerticalStretch ( 0 ) sizePolicy3 . setHeightForWidth ( self . removeButton . sizePolicy () . hasHeightForWidth ()) self . removeButton . setSizePolicy ( sizePolicy3 ) self . removeButton . setMaximumSize ( QSize ( 30 , 16777215 )) icon = QIcon () icon . addFile ( u \" :/icons/icons/cross.png \" , QSize () , QIcon . Normal , QIcon . Off ) self . removeButton . setIcon ( icon ) self . horizontalLayout_2 . addWidget ( self . removeButton ) self . formLayout . setLayout ( 0 , QFormLayout . FieldRole , self . horizontalLayout_2 ) self . label_2 = QLabel ( self . groupBox ) self . label_2 . setObjectName ( u \" label_2 \" ) self . formLayout . setWidget ( 1 , QFormLayout . LabelRole , self . label_2 ) self . text = QLineEdit ( self . groupBox ) self . text . setObjectName ( u \" text \" ) self . formLayout . setWidget ( 1 , QFormLayout . FieldRole , self . text ) self . label_3 = QLabel ( self . groupBox ) self . label_3 . setObjectName ( u \" label_3 \" ) self . formLayout . setWidget ( 2 , QFormLayout . LabelRole , self . label_3 ) self . command = QLineEdit ( self . groupBox ) self . command . setObjectName ( u \" command \" ) self . formLayout . setWidget ( 2 , QFormLayout . FieldRole , self . command ) self . label_5 = QLabel ( self . groupBox ) self . label_5 . setObjectName ( u \" label_5 \" ) self . formLayout . setWidget ( 3 , QFormLayout . LabelRole , self . label_5 ) self . keys = QLineEdit ( self . groupBox ) self . keys . setObjectName ( u \" keys \" ) self . formLayout . setWidget ( 3 , QFormLayout . FieldRole , self . keys ) self . label_8 = QLabel ( self . groupBox ) self . label_8 . setObjectName ( u \" label_8 \" ) self . formLayout . setWidget ( 4 , QFormLayout . LabelRole , self . label_8 ) self . switch_page = QSpinBox ( self . groupBox ) self . switch_page . setObjectName ( u \" switch_page \" ) self . switch_page . setMinimum ( 0 ) self . switch_page . setMaximum ( 10 ) self . switch_page . setValue ( 0 ) self . formLayout . setWidget ( 4 , QFormLayout . FieldRole , self . switch_page ) self . label_7 = QLabel ( self . groupBox ) self . label_7 . setObjectName ( u \" label_7 \" ) self . formLayout . setWidget ( 5 , QFormLayout . LabelRole , self . label_7 ) self . change_brightness = QSpinBox ( self . groupBox ) self . change_brightness . setObjectName ( u \" change_brightness \" ) self . change_brightness . setMinimum ( - 99 ) self . formLayout . setWidget ( 5 , QFormLayout . FieldRole , self . change_brightness ) self . label_6 = QLabel ( self . groupBox ) self . label_6 . setObjectName ( u \" label_6 \" ) self . formLayout . setWidget ( 6 , QFormLayout . LabelRole , self . label_6 ) self . write = QPlainTextEdit ( self . groupBox ) self . write . setObjectName ( u \" write \" ) self . formLayout . setWidget ( 6 , QFormLayout . FieldRole , self . write ) self . verticalLayout_3 . addLayout ( self . formLayout ) self . horizontalLayout . addWidget ( self . groupBox ) self . horizontalLayout . setStretch ( 0 , 2 ) self . horizontalLayout . setStretch ( 1 , 1 ) self . verticalLayout . addLayout ( self . horizontalLayout ) self . verticalLayout_2 . addLayout ( self . verticalLayout ) MainWindow . setCentralWidget ( self . centralwidget ) self . menubar = QMenuBar ( MainWindow ) self . menubar . setObjectName ( u \" menubar \" ) self . menubar . setGeometry ( QRect ( 0 , 0 , 844 , 22 )) self . menuFile = QMenu ( self . menubar ) self . menuFile . setObjectName ( u \" menuFile \" ) MainWindow . setMenuBar ( self . menubar ) self . statusbar = QStatusBar ( MainWindow ) self . statusbar . setObjectName ( u \" statusbar \" ) MainWindow . setStatusBar ( self . statusbar ) self . menubar . addAction ( self . menuFile . menuAction ()) self . menuFile . addAction ( self . actionImport ) self . menuFile . addAction ( self . actionExport ) self . menuFile . addSeparator () self . menuFile . addAction ( self . actionExit ) self . retranslateUi ( MainWindow ) self . pages . setCurrentIndex ( 0 ) QMetaObject . connectSlotsByName ( MainWindow )","title":"Ui Main"},{"location":"reference/streamdeck_ui/ui_main/#module-streamdeck_uiui_main","text":"None None View Source # -*- coding: utf-8 -*- ################################################################################ ## Form generated from reading UI file 'main.ui' ## ## Created by: Qt User Interface Compiler version 5.15.2 ## ## WARNING! All changes made in this file will be lost when recompiling UI file! ################################################################################ from PySide2.QtCore import * # type: ignore from PySide2.QtGui import * # type: ignore from PySide2.QtWidgets import * # type: ignore from . import resources_rc class Ui_MainWindow ( object ): def setupUi ( self , MainWindow ): if not MainWindow . objectName (): MainWindow . setObjectName ( u \"MainWindow\" ) MainWindow . resize ( 844 , 625 ) self . actionImport = QAction ( MainWindow ) self . actionImport . setObjectName ( u \"actionImport\" ) self . actionExport = QAction ( MainWindow ) self . actionExport . setObjectName ( u \"actionExport\" ) self . actionExit = QAction ( MainWindow ) self . actionExit . setObjectName ( u \"actionExit\" ) self . centralwidget = QWidget ( MainWindow ) self . centralwidget . setObjectName ( u \"centralwidget\" ) self . verticalLayout_2 = QVBoxLayout ( self . centralwidget ) self . verticalLayout_2 . setObjectName ( u \"verticalLayout_2\" ) self . verticalLayout = QVBoxLayout () self . verticalLayout . setObjectName ( u \"verticalLayout\" ) self . horizontalLayout_3 = QHBoxLayout () self . horizontalLayout_3 . setObjectName ( u \"horizontalLayout_3\" ) self . device_list = QComboBox ( self . centralwidget ) self . device_list . setObjectName ( u \"device_list\" ) self . device_list . setMinimumSize ( QSize ( 400 , 0 )) self . horizontalLayout_3 . addWidget ( self . device_list ) self . horizontalSpacer = QSpacerItem ( 40 , 20 , QSizePolicy . Expanding , QSizePolicy . Minimum ) self . horizontalLayout_3 . addItem ( self . horizontalSpacer ) self . label_4 = QLabel ( self . centralwidget ) self . label_4 . setObjectName ( u \"label_4\" ) sizePolicy = QSizePolicy ( QSizePolicy . Fixed , QSizePolicy . Preferred ) sizePolicy . setHorizontalStretch ( 0 ) sizePolicy . setVerticalStretch ( 0 ) sizePolicy . setHeightForWidth ( self . label_4 . sizePolicy () . hasHeightForWidth ()) self . label_4 . setSizePolicy ( sizePolicy ) self . horizontalLayout_3 . addWidget ( self . label_4 ) self . brightness = QSlider ( self . centralwidget ) self . brightness . setObjectName ( u \"brightness\" ) sizePolicy1 = QSizePolicy ( QSizePolicy . Minimum , QSizePolicy . Fixed ) sizePolicy1 . setHorizontalStretch ( 0 ) sizePolicy1 . setVerticalStretch ( 0 ) sizePolicy1 . setHeightForWidth ( self . brightness . sizePolicy () . hasHeightForWidth ()) self . brightness . setSizePolicy ( sizePolicy1 ) self . brightness . setMinimumSize ( QSize ( 200 , 0 )) self . brightness . setOrientation ( Qt . Horizontal ) self . horizontalLayout_3 . addWidget ( self . brightness ) self . verticalLayout . addLayout ( self . horizontalLayout_3 ) self . horizontalLayout = QHBoxLayout () self . horizontalLayout . setSpacing ( 6 ) self . horizontalLayout . setObjectName ( u \"horizontalLayout\" ) self . horizontalLayout . setSizeConstraint ( QLayout . SetDefaultConstraint ) self . horizontalLayout . setContentsMargins ( - 1 , 20 , - 1 , - 1 ) self . pages = QTabWidget ( self . centralwidget ) self . pages . setObjectName ( u \"pages\" ) sizePolicy2 = QSizePolicy ( QSizePolicy . Preferred , QSizePolicy . Preferred ) sizePolicy2 . setHorizontalStretch ( 0 ) sizePolicy2 . setVerticalStretch ( 0 ) sizePolicy2 . setHeightForWidth ( self . pages . sizePolicy () . hasHeightForWidth ()) self . pages . setSizePolicy ( sizePolicy2 ) self . pages . setAutoFillBackground ( False ) self . pages . setStyleSheet ( u \"b\" ) self . page_1 = QWidget () self . page_1 . setObjectName ( u \"page_1\" ) self . gridLayout_2 = QGridLayout ( self . page_1 ) self . gridLayout_2 . setObjectName ( u \"gridLayout_2\" ) self . pages . addTab ( self . page_1 , \"\" ) self . page_2 = QWidget () self . page_2 . setObjectName ( u \"page_2\" ) self . gridLayout_3 = QGridLayout ( self . page_2 ) self . gridLayout_3 . setObjectName ( u \"gridLayout_3\" ) self . pages . addTab ( self . page_2 , \"\" ) self . page_3 = QWidget () self . page_3 . setObjectName ( u \"page_3\" ) self . gridLayout_11 = QGridLayout ( self . page_3 ) self . gridLayout_11 . setObjectName ( u \"gridLayout_11\" ) self . pages . addTab ( self . page_3 , \"\" ) self . page_4 = QWidget () self . page_4 . setObjectName ( u \"page_4\" ) self . gridLayout_10 = QGridLayout ( self . page_4 ) self . gridLayout_10 . setObjectName ( u \"gridLayout_10\" ) self . pages . addTab ( self . page_4 , \"\" ) self . page_5 = QWidget () self . page_5 . setObjectName ( u \"page_5\" ) self . gridLayout_9 = QGridLayout ( self . page_5 ) self . gridLayout_9 . setObjectName ( u \"gridLayout_9\" ) self . pages . addTab ( self . page_5 , \"\" ) self . page_6 = QWidget () self . page_6 . setObjectName ( u \"page_6\" ) self . gridLayout_8 = QGridLayout ( self . page_6 ) self . gridLayout_8 . setObjectName ( u \"gridLayout_8\" ) self . pages . addTab ( self . page_6 , \"\" ) self . page_7 = QWidget () self . page_7 . setObjectName ( u \"page_7\" ) self . gridLayout_7 = QGridLayout ( self . page_7 ) self . gridLayout_7 . setObjectName ( u \"gridLayout_7\" ) self . pages . addTab ( self . page_7 , \"\" ) self . page_8 = QWidget () self . page_8 . setObjectName ( u \"page_8\" ) self . gridLayout_6 = QGridLayout ( self . page_8 ) self . gridLayout_6 . setObjectName ( u \"gridLayout_6\" ) self . pages . addTab ( self . page_8 , \"\" ) self . page_9 = QWidget () self . page_9 . setObjectName ( u \"page_9\" ) self . gridLayout_5 = QGridLayout ( self . page_9 ) self . gridLayout_5 . setObjectName ( u \"gridLayout_5\" ) self . pages . addTab ( self . page_9 , \"\" ) self . tab_10 = QWidget () self . tab_10 . setObjectName ( u \"tab_10\" ) self . gridLayout_4 = QGridLayout ( self . tab_10 ) self . gridLayout_4 . setObjectName ( u \"gridLayout_4\" ) self . pages . addTab ( self . tab_10 , \"\" ) self . horizontalLayout . addWidget ( self . pages ) self . groupBox = QGroupBox ( self . centralwidget ) self . groupBox . setObjectName ( u \"groupBox\" ) self . groupBox . setMinimumSize ( QSize ( 250 , 0 )) self . verticalLayout_3 = QVBoxLayout ( self . groupBox ) self . verticalLayout_3 . setObjectName ( u \"verticalLayout_3\" ) self . formLayout = QFormLayout () self . formLayout . setObjectName ( u \"formLayout\" ) self . label = QLabel ( self . groupBox ) self . label . setObjectName ( u \"label\" ) self . formLayout . setWidget ( 0 , QFormLayout . LabelRole , self . label ) self . horizontalLayout_2 = QHBoxLayout () self . horizontalLayout_2 . setSpacing ( 6 ) self . horizontalLayout_2 . setObjectName ( u \"horizontalLayout_2\" ) self . imageButton = QPushButton ( self . groupBox ) self . imageButton . setObjectName ( u \"imageButton\" ) self . horizontalLayout_2 . addWidget ( self . imageButton ) self . removeButton = QPushButton ( self . groupBox ) self . removeButton . setObjectName ( u \"removeButton\" ) sizePolicy3 = QSizePolicy ( QSizePolicy . Minimum , QSizePolicy . Minimum ) sizePolicy3 . setHorizontalStretch ( 0 ) sizePolicy3 . setVerticalStretch ( 0 ) sizePolicy3 . setHeightForWidth ( self . removeButton . sizePolicy () . hasHeightForWidth ()) self . removeButton . setSizePolicy ( sizePolicy3 ) self . removeButton . setMaximumSize ( QSize ( 30 , 16777215 )) icon = QIcon () icon . addFile ( u \":/icons/icons/cross.png\" , QSize (), QIcon . Normal , QIcon . Off ) self . removeButton . setIcon ( icon ) self . horizontalLayout_2 . addWidget ( self . removeButton ) self . formLayout . setLayout ( 0 , QFormLayout . FieldRole , self . horizontalLayout_2 ) self . label_2 = QLabel ( self . groupBox ) self . label_2 . setObjectName ( u \"label_2\" ) self . formLayout . setWidget ( 1 , QFormLayout . LabelRole , self . label_2 ) self . text = QLineEdit ( self . groupBox ) self . text . setObjectName ( u \"text\" ) self . formLayout . setWidget ( 1 , QFormLayout . FieldRole , self . text ) self . label_3 = QLabel ( self . groupBox ) self . label_3 . setObjectName ( u \"label_3\" ) self . formLayout . setWidget ( 2 , QFormLayout . LabelRole , self . label_3 ) self . command = QLineEdit ( self . groupBox ) self . command . setObjectName ( u \"command\" ) self . formLayout . setWidget ( 2 , QFormLayout . FieldRole , self . command ) self . label_5 = QLabel ( self . groupBox ) self . label_5 . setObjectName ( u \"label_5\" ) self . formLayout . setWidget ( 3 , QFormLayout . LabelRole , self . label_5 ) self . keys = QLineEdit ( self . groupBox ) self . keys . setObjectName ( u \"keys\" ) self . formLayout . setWidget ( 3 , QFormLayout . FieldRole , self . keys ) self . label_8 = QLabel ( self . groupBox ) self . label_8 . setObjectName ( u \"label_8\" ) self . formLayout . setWidget ( 4 , QFormLayout . LabelRole , self . label_8 ) self . switch_page = QSpinBox ( self . groupBox ) self . switch_page . setObjectName ( u \"switch_page\" ) self . switch_page . setMinimum ( 0 ) self . switch_page . setMaximum ( 10 ) self . switch_page . setValue ( 0 ) self . formLayout . setWidget ( 4 , QFormLayout . FieldRole , self . switch_page ) self . label_7 = QLabel ( self . groupBox ) self . label_7 . setObjectName ( u \"label_7\" ) self . formLayout . setWidget ( 5 , QFormLayout . LabelRole , self . label_7 ) self . change_brightness = QSpinBox ( self . groupBox ) self . change_brightness . setObjectName ( u \"change_brightness\" ) self . change_brightness . setMinimum ( - 99 ) self . formLayout . setWidget ( 5 , QFormLayout . FieldRole , self . change_brightness ) self . label_6 = QLabel ( self . groupBox ) self . label_6 . setObjectName ( u \"label_6\" ) self . formLayout . setWidget ( 6 , QFormLayout . LabelRole , self . label_6 ) self . write = QPlainTextEdit ( self . groupBox ) self . write . setObjectName ( u \"write\" ) self . formLayout . setWidget ( 6 , QFormLayout . FieldRole , self . write ) self . verticalLayout_3 . addLayout ( self . formLayout ) self . horizontalLayout . addWidget ( self . groupBox ) self . horizontalLayout . setStretch ( 0 , 2 ) self . horizontalLayout . setStretch ( 1 , 1 ) self . verticalLayout . addLayout ( self . horizontalLayout ) self . verticalLayout_2 . addLayout ( self . verticalLayout ) MainWindow . setCentralWidget ( self . centralwidget ) self . menubar = QMenuBar ( MainWindow ) self . menubar . setObjectName ( u \"menubar\" ) self . menubar . setGeometry ( QRect ( 0 , 0 , 844 , 22 )) self . menuFile = QMenu ( self . menubar ) self . menuFile . setObjectName ( u \"menuFile\" ) MainWindow . setMenuBar ( self . menubar ) self . statusbar = QStatusBar ( MainWindow ) self . statusbar . setObjectName ( u \"statusbar\" ) MainWindow . setStatusBar ( self . statusbar ) self . menubar . addAction ( self . menuFile . menuAction ()) self . menuFile . addAction ( self . actionImport ) self . menuFile . addAction ( self . actionExport ) self . menuFile . addSeparator () self . menuFile . addAction ( self . actionExit ) self . retranslateUi ( MainWindow ) self . pages . setCurrentIndex ( 0 ) QMetaObject . connectSlotsByName ( MainWindow ) # setupUi def retranslateUi ( self , MainWindow ): MainWindow . setWindowTitle ( QCoreApplication . translate ( \"MainWindow\" , u \"Stream Deck UI\" , None )) self . actionImport . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Import\" , None )) self . actionExport . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Export\" , None )) self . actionExit . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Exit\" , None )) self . label_4 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Brightness:\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_1 ), QCoreApplication . translate ( \"MainWindow\" , u \"Page 1\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_2 ), QCoreApplication . translate ( \"MainWindow\" , u \"2\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_3 ), QCoreApplication . translate ( \"MainWindow\" , u \"3\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_4 ), QCoreApplication . translate ( \"MainWindow\" , u \"4\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_5 ), QCoreApplication . translate ( \"MainWindow\" , u \"5\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_6 ), QCoreApplication . translate ( \"MainWindow\" , u \"6\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_7 ), QCoreApplication . translate ( \"MainWindow\" , u \"7\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_8 ), QCoreApplication . translate ( \"MainWindow\" , u \"8\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_9 ), QCoreApplication . translate ( \"MainWindow\" , u \"9\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . tab_10 ), QCoreApplication . translate ( \"MainWindow\" , u \"10\" , None )) self . groupBox . setTitle ( QCoreApplication . translate ( \"MainWindow\" , u \"Configure Button\" , None )) self . label . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Image:\" , None )) self . imageButton . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Image...\" , None )) #if QT_CONFIG(tooltip) self . removeButton . setToolTip ( QCoreApplication . translate ( \"MainWindow\" , u \"Remove the image from the button\" , None )) #endif // QT_CONFIG(tooltip) self . removeButton . setText ( \"\" ) self . label_2 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Text:\" , None )) self . label_3 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Command:\" , None )) self . label_5 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Press Keys:\" , None )) self . label_8 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Switch Page:\" , None )) self . label_7 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Brightness +/-:\" , None )) self . label_6 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Write Text:\" , None )) self . menuFile . setTitle ( QCoreApplication . translate ( \"MainWindow\" , u \"File\" , None )) # retranslateUi","title":"Module streamdeck_ui.ui_main"},{"location":"reference/streamdeck_ui/ui_main/#classes","text":"","title":"Classes"},{"location":"reference/streamdeck_ui/ui_main/#ui_mainwindow","text":"class Ui_MainWindow ( / , * args , ** kwargs ) View Source class Ui_MainWindow ( object ): def setupUi ( self , MainWindow ): if not MainWindow . objectName (): MainWindow . setObjectName ( u \"MainWindow\" ) MainWindow . resize ( 844 , 625 ) self . actionImport = QAction ( MainWindow ) self . actionImport . setObjectName ( u \"actionImport\" ) self . actionExport = QAction ( MainWindow ) self . actionExport . setObjectName ( u \"actionExport\" ) self . actionExit = QAction ( MainWindow ) self . actionExit . setObjectName ( u \"actionExit\" ) self . centralwidget = QWidget ( MainWindow ) self . centralwidget . setObjectName ( u \"centralwidget\" ) self . verticalLayout_2 = QVBoxLayout ( self . centralwidget ) self . verticalLayout_2 . setObjectName ( u \"verticalLayout_2\" ) self . verticalLayout = QVBoxLayout () self . verticalLayout . setObjectName ( u \"verticalLayout\" ) self . horizontalLayout_3 = QHBoxLayout () self . horizontalLayout_3 . setObjectName ( u \"horizontalLayout_3\" ) self . device_list = QComboBox ( self . centralwidget ) self . device_list . setObjectName ( u \"device_list\" ) self . device_list . setMinimumSize ( QSize ( 400 , 0 )) self . horizontalLayout_3 . addWidget ( self . device_list ) self . horizontalSpacer = QSpacerItem ( 40 , 20 , QSizePolicy . Expanding , QSizePolicy . Minimum ) self . horizontalLayout_3 . addItem ( self . horizontalSpacer ) self . label_4 = QLabel ( self . centralwidget ) self . label_4 . setObjectName ( u \"label_4\" ) sizePolicy = QSizePolicy ( QSizePolicy . Fixed , QSizePolicy . Preferred ) sizePolicy . setHorizontalStretch ( 0 ) sizePolicy . setVerticalStretch ( 0 ) sizePolicy . setHeightForWidth ( self . label_4 . sizePolicy () . hasHeightForWidth ()) self . label_4 . setSizePolicy ( sizePolicy ) self . horizontalLayout_3 . addWidget ( self . label_4 ) self . brightness = QSlider ( self . centralwidget ) self . brightness . setObjectName ( u \"brightness\" ) sizePolicy1 = QSizePolicy ( QSizePolicy . Minimum , QSizePolicy . Fixed ) sizePolicy1 . setHorizontalStretch ( 0 ) sizePolicy1 . setVerticalStretch ( 0 ) sizePolicy1 . setHeightForWidth ( self . brightness . sizePolicy () . hasHeightForWidth ()) self . brightness . setSizePolicy ( sizePolicy1 ) self . brightness . setMinimumSize ( QSize ( 200 , 0 )) self . brightness . setOrientation ( Qt . Horizontal ) self . horizontalLayout_3 . addWidget ( self . brightness ) self . verticalLayout . addLayout ( self . horizontalLayout_3 ) self . horizontalLayout = QHBoxLayout () self . horizontalLayout . setSpacing ( 6 ) self . horizontalLayout . setObjectName ( u \"horizontalLayout\" ) self . horizontalLayout . setSizeConstraint ( QLayout . SetDefaultConstraint ) self . horizontalLayout . setContentsMargins ( - 1 , 20 , - 1 , - 1 ) self . pages = QTabWidget ( self . centralwidget ) self . pages . setObjectName ( u \"pages\" ) sizePolicy2 = QSizePolicy ( QSizePolicy . Preferred , QSizePolicy . Preferred ) sizePolicy2 . setHorizontalStretch ( 0 ) sizePolicy2 . setVerticalStretch ( 0 ) sizePolicy2 . setHeightForWidth ( self . pages . sizePolicy () . hasHeightForWidth ()) self . pages . setSizePolicy ( sizePolicy2 ) self . pages . setAutoFillBackground ( False ) self . pages . setStyleSheet ( u \"b\" ) self . page_1 = QWidget () self . page_1 . setObjectName ( u \"page_1\" ) self . gridLayout_2 = QGridLayout ( self . page_1 ) self . gridLayout_2 . setObjectName ( u \"gridLayout_2\" ) self . pages . addTab ( self . page_1 , \"\" ) self . page_2 = QWidget () self . page_2 . setObjectName ( u \"page_2\" ) self . gridLayout_3 = QGridLayout ( self . page_2 ) self . gridLayout_3 . setObjectName ( u \"gridLayout_3\" ) self . pages . addTab ( self . page_2 , \"\" ) self . page_3 = QWidget () self . page_3 . setObjectName ( u \"page_3\" ) self . gridLayout_11 = QGridLayout ( self . page_3 ) self . gridLayout_11 . setObjectName ( u \"gridLayout_11\" ) self . pages . addTab ( self . page_3 , \"\" ) self . page_4 = QWidget () self . page_4 . setObjectName ( u \"page_4\" ) self . gridLayout_10 = QGridLayout ( self . page_4 ) self . gridLayout_10 . setObjectName ( u \"gridLayout_10\" ) self . pages . addTab ( self . page_4 , \"\" ) self . page_5 = QWidget () self . page_5 . setObjectName ( u \"page_5\" ) self . gridLayout_9 = QGridLayout ( self . page_5 ) self . gridLayout_9 . setObjectName ( u \"gridLayout_9\" ) self . pages . addTab ( self . page_5 , \"\" ) self . page_6 = QWidget () self . page_6 . setObjectName ( u \"page_6\" ) self . gridLayout_8 = QGridLayout ( self . page_6 ) self . gridLayout_8 . setObjectName ( u \"gridLayout_8\" ) self . pages . addTab ( self . page_6 , \"\" ) self . page_7 = QWidget () self . page_7 . setObjectName ( u \"page_7\" ) self . gridLayout_7 = QGridLayout ( self . page_7 ) self . gridLayout_7 . setObjectName ( u \"gridLayout_7\" ) self . pages . addTab ( self . page_7 , \"\" ) self . page_8 = QWidget () self . page_8 . setObjectName ( u \"page_8\" ) self . gridLayout_6 = QGridLayout ( self . page_8 ) self . gridLayout_6 . setObjectName ( u \"gridLayout_6\" ) self . pages . addTab ( self . page_8 , \"\" ) self . page_9 = QWidget () self . page_9 . setObjectName ( u \"page_9\" ) self . gridLayout_5 = QGridLayout ( self . page_9 ) self . gridLayout_5 . setObjectName ( u \"gridLayout_5\" ) self . pages . addTab ( self . page_9 , \"\" ) self . tab_10 = QWidget () self . tab_10 . setObjectName ( u \"tab_10\" ) self . gridLayout_4 = QGridLayout ( self . tab_10 ) self . gridLayout_4 . setObjectName ( u \"gridLayout_4\" ) self . pages . addTab ( self . tab_10 , \"\" ) self . horizontalLayout . addWidget ( self . pages ) self . groupBox = QGroupBox ( self . centralwidget ) self . groupBox . setObjectName ( u \"groupBox\" ) self . groupBox . setMinimumSize ( QSize ( 250 , 0 )) self . verticalLayout_3 = QVBoxLayout ( self . groupBox ) self . verticalLayout_3 . setObjectName ( u \"verticalLayout_3\" ) self . formLayout = QFormLayout () self . formLayout . setObjectName ( u \"formLayout\" ) self . label = QLabel ( self . groupBox ) self . label . setObjectName ( u \"label\" ) self . formLayout . setWidget ( 0 , QFormLayout . LabelRole , self . label ) self . horizontalLayout_2 = QHBoxLayout () self . horizontalLayout_2 . setSpacing ( 6 ) self . horizontalLayout_2 . setObjectName ( u \"horizontalLayout_2\" ) self . imageButton = QPushButton ( self . groupBox ) self . imageButton . setObjectName ( u \"imageButton\" ) self . horizontalLayout_2 . addWidget ( self . imageButton ) self . removeButton = QPushButton ( self . groupBox ) self . removeButton . setObjectName ( u \"removeButton\" ) sizePolicy3 = QSizePolicy ( QSizePolicy . Minimum , QSizePolicy . Minimum ) sizePolicy3 . setHorizontalStretch ( 0 ) sizePolicy3 . setVerticalStretch ( 0 ) sizePolicy3 . setHeightForWidth ( self . removeButton . sizePolicy () . hasHeightForWidth ()) self . removeButton . setSizePolicy ( sizePolicy3 ) self . removeButton . setMaximumSize ( QSize ( 30 , 16777215 )) icon = QIcon () icon . addFile ( u \":/icons/icons/cross.png\" , QSize (), QIcon . Normal , QIcon . Off ) self . removeButton . setIcon ( icon ) self . horizontalLayout_2 . addWidget ( self . removeButton ) self . formLayout . setLayout ( 0 , QFormLayout . FieldRole , self . horizontalLayout_2 ) self . label_2 = QLabel ( self . groupBox ) self . label_2 . setObjectName ( u \"label_2\" ) self . formLayout . setWidget ( 1 , QFormLayout . LabelRole , self . label_2 ) self . text = QLineEdit ( self . groupBox ) self . text . setObjectName ( u \"text\" ) self . formLayout . setWidget ( 1 , QFormLayout . FieldRole , self . text ) self . label_3 = QLabel ( self . groupBox ) self . label_3 . setObjectName ( u \"label_3\" ) self . formLayout . setWidget ( 2 , QFormLayout . LabelRole , self . label_3 ) self . command = QLineEdit ( self . groupBox ) self . command . setObjectName ( u \"command\" ) self . formLayout . setWidget ( 2 , QFormLayout . FieldRole , self . command ) self . label_5 = QLabel ( self . groupBox ) self . label_5 . setObjectName ( u \"label_5\" ) self . formLayout . setWidget ( 3 , QFormLayout . LabelRole , self . label_5 ) self . keys = QLineEdit ( self . groupBox ) self . keys . setObjectName ( u \"keys\" ) self . formLayout . setWidget ( 3 , QFormLayout . FieldRole , self . keys ) self . label_8 = QLabel ( self . groupBox ) self . label_8 . setObjectName ( u \"label_8\" ) self . formLayout . setWidget ( 4 , QFormLayout . LabelRole , self . label_8 ) self . switch_page = QSpinBox ( self . groupBox ) self . switch_page . setObjectName ( u \"switch_page\" ) self . switch_page . setMinimum ( 0 ) self . switch_page . setMaximum ( 10 ) self . switch_page . setValue ( 0 ) self . formLayout . setWidget ( 4 , QFormLayout . FieldRole , self . switch_page ) self . label_7 = QLabel ( self . groupBox ) self . label_7 . setObjectName ( u \"label_7\" ) self . formLayout . setWidget ( 5 , QFormLayout . LabelRole , self . label_7 ) self . change_brightness = QSpinBox ( self . groupBox ) self . change_brightness . setObjectName ( u \"change_brightness\" ) self . change_brightness . setMinimum ( - 99 ) self . formLayout . setWidget ( 5 , QFormLayout . FieldRole , self . change_brightness ) self . label_6 = QLabel ( self . groupBox ) self . label_6 . setObjectName ( u \"label_6\" ) self . formLayout . setWidget ( 6 , QFormLayout . LabelRole , self . label_6 ) self . write = QPlainTextEdit ( self . groupBox ) self . write . setObjectName ( u \"write\" ) self . formLayout . setWidget ( 6 , QFormLayout . FieldRole , self . write ) self . verticalLayout_3 . addLayout ( self . formLayout ) self . horizontalLayout . addWidget ( self . groupBox ) self . horizontalLayout . setStretch ( 0 , 2 ) self . horizontalLayout . setStretch ( 1 , 1 ) self . verticalLayout . addLayout ( self . horizontalLayout ) self . verticalLayout_2 . addLayout ( self . verticalLayout ) MainWindow . setCentralWidget ( self . centralwidget ) self . menubar = QMenuBar ( MainWindow ) self . menubar . setObjectName ( u \"menubar\" ) self . menubar . setGeometry ( QRect ( 0 , 0 , 844 , 22 )) self . menuFile = QMenu ( self . menubar ) self . menuFile . setObjectName ( u \"menuFile\" ) MainWindow . setMenuBar ( self . menubar ) self . statusbar = QStatusBar ( MainWindow ) self . statusbar . setObjectName ( u \"statusbar\" ) MainWindow . setStatusBar ( self . statusbar ) self . menubar . addAction ( self . menuFile . menuAction ()) self . menuFile . addAction ( self . actionImport ) self . menuFile . addAction ( self . actionExport ) self . menuFile . addSeparator () self . menuFile . addAction ( self . actionExit ) self . retranslateUi ( MainWindow ) self . pages . setCurrentIndex ( 0 ) QMetaObject . connectSlotsByName ( MainWindow ) # setupUi def retranslateUi ( self , MainWindow ): MainWindow . setWindowTitle ( QCoreApplication . translate ( \"MainWindow\" , u \"Stream Deck UI\" , None )) self . actionImport . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Import\" , None )) self . actionExport . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Export\" , None )) self . actionExit . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Exit\" , None )) self . label_4 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Brightness:\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_1 ), QCoreApplication . translate ( \"MainWindow\" , u \"Page 1\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_2 ), QCoreApplication . translate ( \"MainWindow\" , u \"2\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_3 ), QCoreApplication . translate ( \"MainWindow\" , u \"3\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_4 ), QCoreApplication . translate ( \"MainWindow\" , u \"4\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_5 ), QCoreApplication . translate ( \"MainWindow\" , u \"5\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_6 ), QCoreApplication . translate ( \"MainWindow\" , u \"6\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_7 ), QCoreApplication . translate ( \"MainWindow\" , u \"7\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_8 ), QCoreApplication . translate ( \"MainWindow\" , u \"8\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_9 ), QCoreApplication . translate ( \"MainWindow\" , u \"9\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . tab_10 ), QCoreApplication . translate ( \"MainWindow\" , u \"10\" , None )) self . groupBox . setTitle ( QCoreApplication . translate ( \"MainWindow\" , u \"Configure Button\" , None )) self . label . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Image:\" , None )) self . imageButton . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Image...\" , None )) #if QT_CONFIG(tooltip) self . removeButton . setToolTip ( QCoreApplication . translate ( \"MainWindow\" , u \"Remove the image from the button\" , None )) #endif // QT_CONFIG(tooltip) self . removeButton . setText ( \"\" ) self . label_2 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Text:\" , None )) self . label_3 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Command:\" , None )) self . label_5 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Press Keys:\" , None )) self . label_8 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Switch Page:\" , None )) self . label_7 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Brightness +/-:\" , None )) self . label_6 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Write Text:\" , None )) self . menuFile . setTitle ( QCoreApplication . translate ( \"MainWindow\" , u \"File\" , None ))","title":"Ui_MainWindow"},{"location":"reference/streamdeck_ui/ui_main/#methods","text":"","title":"Methods"},{"location":"reference/streamdeck_ui/ui_main/#retranslateui","text":"def retranslateUi ( self , MainWindow ) View Source def retranslateUi ( self , MainWindow ): MainWindow . setWindowTitle ( QCoreApplication . translate ( \"MainWindow\" , u \"Stream Deck UI\" , None )) self . actionImport . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Import\" , None )) self . actionExport . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Export\" , None )) self . actionExit . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Exit\" , None )) self . label_4 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Brightness:\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_1 ), QCoreApplication . translate ( \"MainWindow\" , u \"Page 1\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_2 ), QCoreApplication . translate ( \"MainWindow\" , u \"2\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_3 ), QCoreApplication . translate ( \"MainWindow\" , u \"3\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_4 ), QCoreApplication . translate ( \"MainWindow\" , u \"4\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_5 ), QCoreApplication . translate ( \"MainWindow\" , u \"5\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_6 ), QCoreApplication . translate ( \"MainWindow\" , u \"6\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_7 ), QCoreApplication . translate ( \"MainWindow\" , u \"7\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_8 ), QCoreApplication . translate ( \"MainWindow\" , u \"8\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . page_9 ), QCoreApplication . translate ( \"MainWindow\" , u \"9\" , None )) self . pages . setTabText ( self . pages . indexOf ( self . tab_10 ), QCoreApplication . translate ( \"MainWindow\" , u \"10\" , None )) self . groupBox . setTitle ( QCoreApplication . translate ( \"MainWindow\" , u \"Configure Button\" , None )) self . label . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Image:\" , None )) self . imageButton . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Image...\" , None )) #if QT_CONFIG(tooltip) self . removeButton . setToolTip ( QCoreApplication . translate ( \"MainWindow\" , u \"Remove the image from the button\" , None )) #endif // QT_CONFIG(tooltip) self . removeButton . setText ( \"\" ) self . label_2 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Text:\" , None )) self . label_3 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Command:\" , None )) self . label_5 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Press Keys:\" , None )) self . label_8 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Switch Page:\" , None )) self . label_7 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Brightness +/-:\" , None )) self . label_6 . setText ( QCoreApplication . translate ( \"MainWindow\" , u \"Write Text:\" , None )) self . menuFile . setTitle ( QCoreApplication . translate ( \"MainWindow\" , u \"File\" , None ))","title":"retranslateUi"},{"location":"reference/streamdeck_ui/ui_main/#setupui","text":"def setupUi ( self , MainWindow ) View Source def setupUi ( self , MainWindow ) : if not MainWindow . objectName () : MainWindow . setObjectName ( u \" MainWindow \" ) MainWindow . resize ( 844 , 625 ) self . actionImport = QAction ( MainWindow ) self . actionImport . setObjectName ( u \" actionImport \" ) self . actionExport = QAction ( MainWindow ) self . actionExport . setObjectName ( u \" actionExport \" ) self . actionExit = QAction ( MainWindow ) self . actionExit . setObjectName ( u \" actionExit \" ) self . centralwidget = QWidget ( MainWindow ) self . centralwidget . setObjectName ( u \" centralwidget \" ) self . verticalLayout_2 = QVBoxLayout ( self . centralwidget ) self . verticalLayout_2 . setObjectName ( u \" verticalLayout_2 \" ) self . verticalLayout = QVBoxLayout () self . verticalLayout . setObjectName ( u \" verticalLayout \" ) self . horizontalLayout_3 = QHBoxLayout () self . horizontalLayout_3 . setObjectName ( u \" horizontalLayout_3 \" ) self . device_list = QComboBox ( self . centralwidget ) self . device_list . setObjectName ( u \" device_list \" ) self . device_list . setMinimumSize ( QSize ( 400 , 0 )) self . horizontalLayout_3 . addWidget ( self . device_list ) self . horizontalSpacer = QSpacerItem ( 40 , 20 , QSizePolicy . Expanding , QSizePolicy . Minimum ) self . horizontalLayout_3 . addItem ( self . horizontalSpacer ) self . label_4 = QLabel ( self . centralwidget ) self . label_4 . setObjectName ( u \" label_4 \" ) sizePolicy = QSizePolicy ( QSizePolicy . Fixed , QSizePolicy . Preferred ) sizePolicy . setHorizontalStretch ( 0 ) sizePolicy . setVerticalStretch ( 0 ) sizePolicy . setHeightForWidth ( self . label_4 . sizePolicy () . hasHeightForWidth ()) self . label_4 . setSizePolicy ( sizePolicy ) self . horizontalLayout_3 . addWidget ( self . label_4 ) self . brightness = QSlider ( self . centralwidget ) self . brightness . setObjectName ( u \" brightness \" ) sizePolicy1 = QSizePolicy ( QSizePolicy . Minimum , QSizePolicy . Fixed ) sizePolicy1 . setHorizontalStretch ( 0 ) sizePolicy1 . setVerticalStretch ( 0 ) sizePolicy1 . setHeightForWidth ( self . brightness . sizePolicy () . hasHeightForWidth ()) self . brightness . setSizePolicy ( sizePolicy1 ) self . brightness . setMinimumSize ( QSize ( 200 , 0 )) self . brightness . setOrientation ( Qt . Horizontal ) self . horizontalLayout_3 . addWidget ( self . brightness ) self . verticalLayout . addLayout ( self . horizontalLayout_3 ) self . horizontalLayout = QHBoxLayout () self . horizontalLayout . setSpacing ( 6 ) self . horizontalLayout . setObjectName ( u \" horizontalLayout \" ) self . horizontalLayout . setSizeConstraint ( QLayout . SetDefaultConstraint ) self . horizontalLayout . setContentsMargins ( - 1 , 20 , - 1 , - 1 ) self . pages = QTabWidget ( self . centralwidget ) self . pages . setObjectName ( u \" pages \" ) sizePolicy2 = QSizePolicy ( QSizePolicy . Preferred , QSizePolicy . Preferred ) sizePolicy2 . setHorizontalStretch ( 0 ) sizePolicy2 . setVerticalStretch ( 0 ) sizePolicy2 . setHeightForWidth ( self . pages . sizePolicy () . hasHeightForWidth ()) self . pages . setSizePolicy ( sizePolicy2 ) self . pages . setAutoFillBackground ( False ) self . pages . setStyleSheet ( u \" b \" ) self . page_1 = QWidget () self . page_1 . setObjectName ( u \" page_1 \" ) self . gridLayout_2 = QGridLayout ( self . page_1 ) self . gridLayout_2 . setObjectName ( u \" gridLayout_2 \" ) self . pages . addTab ( self . page_1 , \"\" ) self . page_2 = QWidget () self . page_2 . setObjectName ( u \" page_2 \" ) self . gridLayout_3 = QGridLayout ( self . page_2 ) self . gridLayout_3 . setObjectName ( u \" gridLayout_3 \" ) self . pages . addTab ( self . page_2 , \"\" ) self . page_3 = QWidget () self . page_3 . setObjectName ( u \" page_3 \" ) self . gridLayout_11 = QGridLayout ( self . page_3 ) self . gridLayout_11 . setObjectName ( u \" gridLayout_11 \" ) self . pages . addTab ( self . page_3 , \"\" ) self . page_4 = QWidget () self . page_4 . setObjectName ( u \" page_4 \" ) self . gridLayout_10 = QGridLayout ( self . page_4 ) self . gridLayout_10 . setObjectName ( u \" gridLayout_10 \" ) self . pages . addTab ( self . page_4 , \"\" ) self . page_5 = QWidget () self . page_5 . setObjectName ( u \" page_5 \" ) self . gridLayout_9 = QGridLayout ( self . page_5 ) self . gridLayout_9 . setObjectName ( u \" gridLayout_9 \" ) self . pages . addTab ( self . page_5 , \"\" ) self . page_6 = QWidget () self . page_6 . setObjectName ( u \" page_6 \" ) self . gridLayout_8 = QGridLayout ( self . page_6 ) self . gridLayout_8 . setObjectName ( u \" gridLayout_8 \" ) self . pages . addTab ( self . page_6 , \"\" ) self . page_7 = QWidget () self . page_7 . setObjectName ( u \" page_7 \" ) self . gridLayout_7 = QGridLayout ( self . page_7 ) self . gridLayout_7 . setObjectName ( u \" gridLayout_7 \" ) self . pages . addTab ( self . page_7 , \"\" ) self . page_8 = QWidget () self . page_8 . setObjectName ( u \" page_8 \" ) self . gridLayout_6 = QGridLayout ( self . page_8 ) self . gridLayout_6 . setObjectName ( u \" gridLayout_6 \" ) self . pages . addTab ( self . page_8 , \"\" ) self . page_9 = QWidget () self . page_9 . setObjectName ( u \" page_9 \" ) self . gridLayout_5 = QGridLayout ( self . page_9 ) self . gridLayout_5 . setObjectName ( u \" gridLayout_5 \" ) self . pages . addTab ( self . page_9 , \"\" ) self . tab_10 = QWidget () self . tab_10 . setObjectName ( u \" tab_10 \" ) self . gridLayout_4 = QGridLayout ( self . tab_10 ) self . gridLayout_4 . setObjectName ( u \" gridLayout_4 \" ) self . pages . addTab ( self . tab_10 , \"\" ) self . horizontalLayout . addWidget ( self . pages ) self . groupBox = QGroupBox ( self . centralwidget ) self . groupBox . setObjectName ( u \" groupBox \" ) self . groupBox . setMinimumSize ( QSize ( 250 , 0 )) self . verticalLayout_3 = QVBoxLayout ( self . groupBox ) self . verticalLayout_3 . setObjectName ( u \" verticalLayout_3 \" ) self . formLayout = QFormLayout () self . formLayout . setObjectName ( u \" formLayout \" ) self . label = QLabel ( self . groupBox ) self . label . setObjectName ( u \" label \" ) self . formLayout . setWidget ( 0 , QFormLayout . LabelRole , self . label ) self . horizontalLayout_2 = QHBoxLayout () self . horizontalLayout_2 . setSpacing ( 6 ) self . horizontalLayout_2 . setObjectName ( u \" horizontalLayout_2 \" ) self . imageButton = QPushButton ( self . groupBox ) self . imageButton . setObjectName ( u \" imageButton \" ) self . horizontalLayout_2 . addWidget ( self . imageButton ) self . removeButton = QPushButton ( self . groupBox ) self . removeButton . setObjectName ( u \" removeButton \" ) sizePolicy3 = QSizePolicy ( QSizePolicy . Minimum , QSizePolicy . Minimum ) sizePolicy3 . setHorizontalStretch ( 0 ) sizePolicy3 . setVerticalStretch ( 0 ) sizePolicy3 . setHeightForWidth ( self . removeButton . sizePolicy () . hasHeightForWidth ()) self . removeButton . setSizePolicy ( sizePolicy3 ) self . removeButton . setMaximumSize ( QSize ( 30 , 16777215 )) icon = QIcon () icon . addFile ( u \" :/icons/icons/cross.png \" , QSize () , QIcon . Normal , QIcon . Off ) self . removeButton . setIcon ( icon ) self . horizontalLayout_2 . addWidget ( self . removeButton ) self . formLayout . setLayout ( 0 , QFormLayout . FieldRole , self . horizontalLayout_2 ) self . label_2 = QLabel ( self . groupBox ) self . label_2 . setObjectName ( u \" label_2 \" ) self . formLayout . setWidget ( 1 , QFormLayout . LabelRole , self . label_2 ) self . text = QLineEdit ( self . groupBox ) self . text . setObjectName ( u \" text \" ) self . formLayout . setWidget ( 1 , QFormLayout . FieldRole , self . text ) self . label_3 = QLabel ( self . groupBox ) self . label_3 . setObjectName ( u \" label_3 \" ) self . formLayout . setWidget ( 2 , QFormLayout . LabelRole , self . label_3 ) self . command = QLineEdit ( self . groupBox ) self . command . setObjectName ( u \" command \" ) self . formLayout . setWidget ( 2 , QFormLayout . FieldRole , self . command ) self . label_5 = QLabel ( self . groupBox ) self . label_5 . setObjectName ( u \" label_5 \" ) self . formLayout . setWidget ( 3 , QFormLayout . LabelRole , self . label_5 ) self . keys = QLineEdit ( self . groupBox ) self . keys . setObjectName ( u \" keys \" ) self . formLayout . setWidget ( 3 , QFormLayout . FieldRole , self . keys ) self . label_8 = QLabel ( self . groupBox ) self . label_8 . setObjectName ( u \" label_8 \" ) self . formLayout . setWidget ( 4 , QFormLayout . LabelRole , self . label_8 ) self . switch_page = QSpinBox ( self . groupBox ) self . switch_page . setObjectName ( u \" switch_page \" ) self . switch_page . setMinimum ( 0 ) self . switch_page . setMaximum ( 10 ) self . switch_page . setValue ( 0 ) self . formLayout . setWidget ( 4 , QFormLayout . FieldRole , self . switch_page ) self . label_7 = QLabel ( self . groupBox ) self . label_7 . setObjectName ( u \" label_7 \" ) self . formLayout . setWidget ( 5 , QFormLayout . LabelRole , self . label_7 ) self . change_brightness = QSpinBox ( self . groupBox ) self . change_brightness . setObjectName ( u \" change_brightness \" ) self . change_brightness . setMinimum ( - 99 ) self . formLayout . setWidget ( 5 , QFormLayout . FieldRole , self . change_brightness ) self . label_6 = QLabel ( self . groupBox ) self . label_6 . setObjectName ( u \" label_6 \" ) self . formLayout . setWidget ( 6 , QFormLayout . LabelRole , self . label_6 ) self . write = QPlainTextEdit ( self . groupBox ) self . write . setObjectName ( u \" write \" ) self . formLayout . setWidget ( 6 , QFormLayout . FieldRole , self . write ) self . verticalLayout_3 . addLayout ( self . formLayout ) self . horizontalLayout . addWidget ( self . groupBox ) self . horizontalLayout . setStretch ( 0 , 2 ) self . horizontalLayout . setStretch ( 1 , 1 ) self . verticalLayout . addLayout ( self . horizontalLayout ) self . verticalLayout_2 . addLayout ( self . verticalLayout ) MainWindow . setCentralWidget ( self . centralwidget ) self . menubar = QMenuBar ( MainWindow ) self . menubar . setObjectName ( u \" menubar \" ) self . menubar . setGeometry ( QRect ( 0 , 0 , 844 , 22 )) self . menuFile = QMenu ( self . menubar ) self . menuFile . setObjectName ( u \" menuFile \" ) MainWindow . setMenuBar ( self . menubar ) self . statusbar = QStatusBar ( MainWindow ) self . statusbar . setObjectName ( u \" statusbar \" ) MainWindow . setStatusBar ( self . statusbar ) self . menubar . addAction ( self . menuFile . menuAction ()) self . menuFile . addAction ( self . actionImport ) self . menuFile . addAction ( self . actionExport ) self . menuFile . addSeparator () self . menuFile . addAction ( self . actionExit ) self . retranslateUi ( MainWindow ) self . pages . setCurrentIndex ( 0 ) QMetaObject . connectSlotsByName ( MainWindow )","title":"setupUi"}]}