{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Read Latest Documentation - Browse GitHub Code Repository streamdeck_ui A Linux compatible UI for the Elgato Stream Deck. Key Features Linux Compatible : Enables usage of all Stream Deck devices on Linux without needing to code. Multi-device : Enables connecting and configuring multiple Stream Deck devices on one computer. Brightness Control : Supports controlling the brightness from both the configuration UI and buttons on the device itself. Configurable Button Display : Icons + Text, Icon Only, and Text Only configurable per button on the Stream Deck. Multi-Action Support : Run commands, write text and press hotkey combinations at the press of a single button on your Stream Deck. Button Pages : streamdeck_ui supports multiple pages of buttons and dynamically setting up buttons to switch between those pages. Auto Reconnect : Automatically and gracefully reconnects, in the case the device is unplugged and replugged in. Import/Export : Supports saving and restoring Stream Deck configuration. Communication with the Streamdeck is powered by the Python Elgato Stream Deck Library . Linux Quick Start Precooked Scripts There are scripts for setting up streamdeck_ui on Debian/Ubuntu and Fedora . Manual installation To use streamdeck_ui on Linux, you will need first to install some pre-requisite system libraries. The name of those libraries will differ depending on your Operating System. Debian / Ubuntu: sudo apt-get install libhidapi-hidraw0 libudev-dev libusb-1.0-0-dev Fedora: sudo dnf install python3-devel libusb-devel If you're using GNOME shell, you might need to manually install an extension that adds KStatusNotifierItem/AppIndicator Support to make the tray icon show up. To use streamdeck_ui without root permissions, you have to give your user full access to the device. Add your user to the 'plugdev' group: sudo usermod -a -G plugdev ` whoami ` Add the udev rules using your favorite text editor: sudo nano /etc/udev/rules.d/99-streamdeck.rules Paste the following lines: SUBSYSTEM == \"usb\" , ATTRS { idVendor } == \"0fd9\" , ATTRS { idProduct } == \"0060\" , MODE : = \"666\" , GROUP = \"plugdev\" SUBSYSTEM == \"usb\" , ATTRS { idVendor } == \"0fd9\" , ATTRS { idProduct } == \"0063\" , MODE : = \"666\" , GROUP = \"plugdev\" SUBSYSTEM == \"usb\" , ATTRS { idVendor } == \"0fd9\" , ATTRS { idProduct } == \"006c\" , MODE : = \"666\" , GROUP = \"plugdev\" SUBSYSTEM == \"usb\" , ATTRS { idVendor } == \"0fd9\" , ATTRS { idProduct } == \"006d\" , MODE : = \"666\" , GROUP = \"plugdev\" Reload the rules: sudo udevadm control --reload-rules Make sure you unplug and replug your device before continuing. Once complete, you should be able to install streamdeck_ui. Installing the application itself is done via pip: To install the app system-wide, run: pip3 install --user streamdeck_ui You can then launch streamdeck to start configuring your device. streamdeck It's recommended that you include streamdeck in your windowing environment's list of applications to auto-start. Generic Quick Start On other Operating Systems, you'll need to install the required dependencies of the library. After that, use pip to install the app: pip3 install streamdeck_ui --user streamdeck","title":"Home"},{"location":"#key-features","text":"Linux Compatible : Enables usage of all Stream Deck devices on Linux without needing to code. Multi-device : Enables connecting and configuring multiple Stream Deck devices on one computer. Brightness Control : Supports controlling the brightness from both the configuration UI and buttons on the device itself. Configurable Button Display : Icons + Text, Icon Only, and Text Only configurable per button on the Stream Deck. Multi-Action Support : Run commands, write text and press hotkey combinations at the press of a single button on your Stream Deck. Button Pages : streamdeck_ui supports multiple pages of buttons and dynamically setting up buttons to switch between those pages. Auto Reconnect : Automatically and gracefully reconnects, in the case the device is unplugged and replugged in. Import/Export : Supports saving and restoring Stream Deck configuration. Communication with the Streamdeck is powered by the Python Elgato Stream Deck Library .","title":"Key Features"},{"location":"#linux-quick-start","text":"","title":"Linux Quick Start"},{"location":"#precooked-scripts","text":"There are scripts for setting up streamdeck_ui on Debian/Ubuntu and Fedora .","title":"Precooked Scripts"},{"location":"#manual-installation","text":"To use streamdeck_ui on Linux, you will need first to install some pre-requisite system libraries. The name of those libraries will differ depending on your Operating System. Debian / Ubuntu: sudo apt-get install libhidapi-hidraw0 libudev-dev libusb-1.0-0-dev Fedora: sudo dnf install python3-devel libusb-devel If you're using GNOME shell, you might need to manually install an extension that adds KStatusNotifierItem/AppIndicator Support to make the tray icon show up. To use streamdeck_ui without root permissions, you have to give your user full access to the device. Add your user to the 'plugdev' group: sudo usermod -a -G plugdev ` whoami ` Add the udev rules using your favorite text editor: sudo nano /etc/udev/rules.d/99-streamdeck.rules Paste the following lines: SUBSYSTEM == \"usb\" , ATTRS { idVendor } == \"0fd9\" , ATTRS { idProduct } == \"0060\" , MODE : = \"666\" , GROUP = \"plugdev\" SUBSYSTEM == \"usb\" , ATTRS { idVendor } == \"0fd9\" , ATTRS { idProduct } == \"0063\" , MODE : = \"666\" , GROUP = \"plugdev\" SUBSYSTEM == \"usb\" , ATTRS { idVendor } == \"0fd9\" , ATTRS { idProduct } == \"006c\" , MODE : = \"666\" , GROUP = \"plugdev\" SUBSYSTEM == \"usb\" , ATTRS { idVendor } == \"0fd9\" , ATTRS { idProduct } == \"006d\" , MODE : = \"666\" , GROUP = \"plugdev\" Reload the rules: sudo udevadm control --reload-rules Make sure you unplug and replug your device before continuing. Once complete, you should be able to install streamdeck_ui. Installing the application itself is done via pip: To install the app system-wide, run: pip3 install --user streamdeck_ui You can then launch streamdeck to start configuring your device. streamdeck It's recommended that you include streamdeck in your windowing environment's list of applications to auto-start.","title":"Manual installation"},{"location":"#generic-quick-start","text":"On other Operating Systems, you'll need to install the required dependencies of the library. After that, use pip to install the app: pip3 install streamdeck_ui --user streamdeck","title":"Generic Quick Start"},{"location":"CHANGELOG/","text":"Install the latest To install the latest version of streamdeck_ui simply run: pip3 install streamdeck_ui OR poetry add streamdeck_ui OR pipenv install streamdeck_ui Changelog 1.0.2 - November 25th 2019 Updated driver requirement to enable full compatiblity with XL. 1.0.1 - October 8th 2019 Initial API stable release.","title":"Changelog"},{"location":"CHANGELOG/#install-the-latest","text":"To install the latest version of streamdeck_ui simply run: pip3 install streamdeck_ui OR poetry add streamdeck_ui OR pipenv install streamdeck_ui","title":"Install the latest"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#102-november-25th-2019","text":"Updated driver requirement to enable full compatiblity with XL.","title":"1.0.2 - November 25th 2019"},{"location":"CHANGELOG/#101-october-8th-2019","text":"Initial API stable release.","title":"1.0.1 - October 8th 2019"},{"location":"docs/contributing/1.-contributing-guide/","text":"Contributing to streamdeck_ui Looking for a useful open source project to contribute to? Want your contributions to be warmly welcomed and acknowledged? Welcome! You have found the right place. Getting streamdeck_ui set up for local development The first step when contributing to any project is getting it set up on your local machine. streamdeck_ui aims to make this as simple as possible. Account Requirements: A valid GitHub account Base System Requirements: Python3.6+ poetry bash or a bash compatible shell (should be auto-installed on Linux / Mac) Once you have verified that you system matches the base requirements you can start to get the project working by following these steps: Fork the project on GitHub . Clone your fork to your local file system: git clone https://github.com/$GITHUB_ACCOUNT/streamdeck_ui.git `cd streamdeck_ui poetry install Making a contribution Congrats! You're now ready to make a contribution! Use the following as a guide to help you reach a successful pull-request: Check the issues page on GitHub to see if the task you want to complete is listed there. If it's listed there, write a comment letting others know you are working on it. If it's not listed in GitHub issues, go ahead and log a new issue. Then add a comment letting everyone know you have it under control. If you're not sure if it's something that is good for the main streamdeck_ui project and want immediate feedback, you can discuss it here . Create an issue branch for your local work git checkout -b issue/$ISSUE-NUMBER . Do your magic here. Ensure your code matches the HOPE-8 Coding Standard used by the project. Submit a pull request to the main project repository via GitHub. Thanks for the contribution! It will quickly get reviewed, and, once accepted, will result in your name being added to the acknowledgments list :). Thank you! I can not tell you how thankful I am for the hard work done by streamdeck_ui contributors like you . Thank you! ~Timothy Crosley","title":"1. Contributing Guide"},{"location":"docs/contributing/1.-contributing-guide/#contributing-to-streamdeck_ui","text":"Looking for a useful open source project to contribute to? Want your contributions to be warmly welcomed and acknowledged? Welcome! You have found the right place.","title":"Contributing to streamdeck_ui"},{"location":"docs/contributing/1.-contributing-guide/#getting-streamdeck_ui-set-up-for-local-development","text":"The first step when contributing to any project is getting it set up on your local machine. streamdeck_ui aims to make this as simple as possible. Account Requirements: A valid GitHub account Base System Requirements: Python3.6+ poetry bash or a bash compatible shell (should be auto-installed on Linux / Mac) Once you have verified that you system matches the base requirements you can start to get the project working by following these steps: Fork the project on GitHub . Clone your fork to your local file system: git clone https://github.com/$GITHUB_ACCOUNT/streamdeck_ui.git `cd streamdeck_ui poetry install","title":"Getting streamdeck_ui set up for local development"},{"location":"docs/contributing/1.-contributing-guide/#making-a-contribution","text":"Congrats! You're now ready to make a contribution! Use the following as a guide to help you reach a successful pull-request: Check the issues page on GitHub to see if the task you want to complete is listed there. If it's listed there, write a comment letting others know you are working on it. If it's not listed in GitHub issues, go ahead and log a new issue. Then add a comment letting everyone know you have it under control. If you're not sure if it's something that is good for the main streamdeck_ui project and want immediate feedback, you can discuss it here . Create an issue branch for your local work git checkout -b issue/$ISSUE-NUMBER . Do your magic here. Ensure your code matches the HOPE-8 Coding Standard used by the project. Submit a pull request to the main project repository via GitHub. Thanks for the contribution! It will quickly get reviewed, and, once accepted, will result in your name being added to the acknowledgments list :).","title":"Making a contribution"},{"location":"docs/contributing/1.-contributing-guide/#thank-you","text":"I can not tell you how thankful I am for the hard work done by streamdeck_ui contributors like you . Thank you! ~Timothy Crosley","title":"Thank you!"},{"location":"docs/contributing/2.-coding-standard/","text":"HOPE 8 -- Style Guide for Hug Code HOPE: 8 Title: Style Guide for Hug Code Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 19-May-2019 Updated: 17-August-2019 Introduction This document gives coding conventions for the Hug code comprising the Hug core as well as all official interfaces, extensions, and plugins for the framework. Optionally, projects that use Hug are encouraged to follow this HOPE and link to it as a reference. PEP 8 Foundation All guidelines in this document are in addition to those defined in Python's PEP 8 and PEP 257 guidelines. Line Length Too short of lines discourage descriptive variable names where they otherwise make sense. Too long of lines reduce overall readability and make it hard to compare 2 files side by side. There is no perfect number: but for Hug, we've decided to cap the lines at 100 characters. Descriptive Variable names Naming things is hard. Hug has a few strict guidelines on the usage of variable names, which hopefully will reduce some of the guesswork: - No one character variable names. - Except for x, y, and z as coordinates. - It's not okay to override built-in functions. - Except for id . Guido himself thought that shouldn't have been moved to the system module. It's too commonly used, and alternatives feel very artificial. - Avoid Acronyms, Abbreviations, or any other short forms - unless they are almost universally understand. Adding new modules New modules added to the a project that follows the HOPE-8 standard should all live directly within the base PROJECT_NAME/ directory without nesting. If the modules are meant only for internal use within the project, they should be prefixed with a leading underscore. For example, def _internal_function. Modules should contain a docstring at the top that gives a general explanation of the purpose and then restates the project's use of the MIT license. There should be a tests/test_$MODULE_NAME.py file created to correspond to every new module that contains test coverage for the module. Ideally, tests should be 1:1 (one test object per code object, one test method per code method) to the extent cleanly possible. Automated Code Cleaners All code submitted to Hug should be formatted using Black and isort. Black should be run with the line length set to 100, and isort with Black compatible settings in place. Automated Code Linting All code submitted to hug should run through the following tools: Black and isort verification. Flake8 flake8-bugbear Bandit pep8-naming vulture safety","title":"2. Coding Standard"},{"location":"docs/contributing/2.-coding-standard/#hope-8-style-guide-for-hug-code","text":"HOPE: 8 Title: Style Guide for Hug Code Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 19-May-2019 Updated: 17-August-2019","title":"HOPE 8 -- Style Guide for Hug Code"},{"location":"docs/contributing/2.-coding-standard/#introduction","text":"This document gives coding conventions for the Hug code comprising the Hug core as well as all official interfaces, extensions, and plugins for the framework. Optionally, projects that use Hug are encouraged to follow this HOPE and link to it as a reference.","title":"Introduction"},{"location":"docs/contributing/2.-coding-standard/#pep-8-foundation","text":"All guidelines in this document are in addition to those defined in Python's PEP 8 and PEP 257 guidelines.","title":"PEP 8 Foundation"},{"location":"docs/contributing/2.-coding-standard/#line-length","text":"Too short of lines discourage descriptive variable names where they otherwise make sense. Too long of lines reduce overall readability and make it hard to compare 2 files side by side. There is no perfect number: but for Hug, we've decided to cap the lines at 100 characters.","title":"Line Length"},{"location":"docs/contributing/2.-coding-standard/#descriptive-variable-names","text":"Naming things is hard. Hug has a few strict guidelines on the usage of variable names, which hopefully will reduce some of the guesswork: - No one character variable names. - Except for x, y, and z as coordinates. - It's not okay to override built-in functions. - Except for id . Guido himself thought that shouldn't have been moved to the system module. It's too commonly used, and alternatives feel very artificial. - Avoid Acronyms, Abbreviations, or any other short forms - unless they are almost universally understand.","title":"Descriptive Variable names"},{"location":"docs/contributing/2.-coding-standard/#adding-new-modules","text":"New modules added to the a project that follows the HOPE-8 standard should all live directly within the base PROJECT_NAME/ directory without nesting. If the modules are meant only for internal use within the project, they should be prefixed with a leading underscore. For example, def _internal_function. Modules should contain a docstring at the top that gives a general explanation of the purpose and then restates the project's use of the MIT license. There should be a tests/test_$MODULE_NAME.py file created to correspond to every new module that contains test coverage for the module. Ideally, tests should be 1:1 (one test object per code object, one test method per code method) to the extent cleanly possible.","title":"Adding new modules"},{"location":"docs/contributing/2.-coding-standard/#automated-code-cleaners","text":"All code submitted to Hug should be formatted using Black and isort. Black should be run with the line length set to 100, and isort with Black compatible settings in place.","title":"Automated Code Cleaners"},{"location":"docs/contributing/2.-coding-standard/#automated-code-linting","text":"All code submitted to hug should run through the following tools: Black and isort verification. Flake8 flake8-bugbear Bandit pep8-naming vulture safety","title":"Automated Code Linting"},{"location":"docs/contributing/3.-code-of-conduct/","text":"HOPE 11 -- Code of Conduct HOPE: 11 Title: Code of Conduct Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 17-August-2019 Updated: 17-August-2019 Abstract Defines the Code of Conduct for Hug and all related projects. Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting timothy.crosley@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Confidentiality will be maintained with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the [Contributor Covenant][https://www.contributor-covenant.org], version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"3. Code Of Conduct"},{"location":"docs/contributing/3.-code-of-conduct/#hope-11-code-of-conduct","text":"HOPE: 11 Title: Code of Conduct Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 17-August-2019 Updated: 17-August-2019","title":"HOPE 11 -- Code of Conduct"},{"location":"docs/contributing/3.-code-of-conduct/#abstract","text":"Defines the Code of Conduct for Hug and all related projects.","title":"Abstract"},{"location":"docs/contributing/3.-code-of-conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"docs/contributing/3.-code-of-conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"docs/contributing/3.-code-of-conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"docs/contributing/3.-code-of-conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"docs/contributing/3.-code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting timothy.crosley@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Confidentiality will be maintained with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"docs/contributing/3.-code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the [Contributor Covenant][https://www.contributor-covenant.org], version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"docs/contributing/4.-acknowledgements/","text":"Contributors Core Developers Timothy Crosley (@timothycrosley) Notable Bug Reporters - Code Contributors - Documenters @xorbital A sincere thanks to everyone who helps make streamdeck_ui into a great Python3 project! ~Timothy Crosley","title":"4. Acknowledgements"},{"location":"docs/contributing/4.-acknowledgements/#contributors","text":"","title":"Contributors"},{"location":"docs/contributing/4.-acknowledgements/#core-developers","text":"Timothy Crosley (@timothycrosley)","title":"Core Developers"},{"location":"docs/contributing/4.-acknowledgements/#notable-bug-reporters","text":"-","title":"Notable Bug Reporters"},{"location":"docs/contributing/4.-acknowledgements/#code-contributors","text":"-","title":"Code Contributors"},{"location":"docs/contributing/4.-acknowledgements/#documenters","text":"@xorbital A sincere thanks to everyone who helps make streamdeck_ui into a great Python3 project! ~Timothy Crosley","title":"Documenters"},{"location":"reference/streamdeck_ui/","text":"Module streamdeck_ui streamdeck_ui A Linux compatible UI for the Elgato Stream Deck. View Source \"\"\" **streamdeck_ui** A Linux compatible UI for the Elgato Stream Deck . \"\"\" __version__ = \" 1.0.2 \" Sub-modules streamdeck_ui.api streamdeck_ui.config streamdeck_ui.gui streamdeck_ui.ui_main","title":"Index"},{"location":"reference/streamdeck_ui/#module-streamdeck_ui","text":"streamdeck_ui A Linux compatible UI for the Elgato Stream Deck. View Source \"\"\" **streamdeck_ui** A Linux compatible UI for the Elgato Stream Deck . \"\"\" __version__ = \" 1.0.2 \"","title":"Module streamdeck_ui"},{"location":"reference/streamdeck_ui/#sub-modules","text":"streamdeck_ui.api streamdeck_ui.config streamdeck_ui.gui streamdeck_ui.ui_main","title":"Sub-modules"},{"location":"reference/streamdeck_ui/api/","text":"Module streamdeck_ui.api Defines the Python API for interacting with the StreamDeck Configuration UI View Source \"\"\"Defines the Python API for interacting with the StreamDeck Configuration UI\"\"\" import json import os import threading from functools import partial from subprocess import Popen # nosec - Need to allow users to specify arbitrary commands from typing import Dict , List , Tuple , Union from warnings import warn from PIL import Image , ImageDraw , ImageFont from pynput.keyboard import Controller , Key from StreamDeck import DeviceManager , ImageHelpers from StreamDeck.Devices import StreamDeck from StreamDeck.ImageHelpers import PILHelper from streamdeck_ui.config import CONFIG_FILE_VERSION , DEFAULT_FONT , FONTS_PATH , STATE_FILE image_cache : Dict [ str , memoryview ] = {} decks : Dict [ str , StreamDeck . StreamDeck ] = {} state : Dict [ str , Dict [ str , Union [ int , Dict [ int , Dict [ int , Dict [ str , str ]]]]]] = {} def _key_change_callback ( deck_id : str , _deck : StreamDeck . StreamDeck , key : int , state : bool ) -> None : if state : keyboard = Controller () page = get_page ( deck_id ) command = get_button_command ( deck_id , page , key ) if command : Popen ( command . split ( \" \" )) keys = get_button_keys ( deck_id , page , key ) if keys : keys = keys . strip () . replace ( \" \" , \"\" ) for section in keys . split ( \",\" ): for key_name in section . split ( \"+\" ): keyboard . press ( getattr ( Key , key_name . lower (), key_name )) for key_name in section . split ( \"+\" ): keyboard . release ( getattr ( Key , key_name . lower (), key_name )) write = get_button_write ( deck_id , page , key ) if write : keyboard . type ( write ) brightness_change = get_button_change_brightness ( deck_id , page , key ) if brightness_change : change_brightness ( deck_id , brightness_change ) switch_page = get_button_switch_page ( deck_id , page , key ) if switch_page : set_page ( deck_id , switch_page - 1 ) def _save_state (): export_config ( STATE_FILE ) def _open_config ( config_file : str ): global state with open ( config_file ) as state_file : config = json . loads ( state_file . read ()) file_version = config . get ( \"streamdeck_ui_version\" , 0 ) if file_version != CONFIG_FILE_VERSION : raise ValueError ( \"Incompatible version of config file found: \" f \"{file_version} does not match required version \" f \"{CONFIG_FILE_VERSION}.\" ) state = {} for deck_id , deck in config [ \"state\" ] . items (): deck [ \"buttons\" ] = { int ( page_id ): { int ( button_id ): button for button_id , button in buttons . items ()} for page_id , buttons in deck . get ( \"buttons\" , {}) . items () } state [ deck_id ] = deck def import_config ( config_file : str ) -> None : _open_config ( config_file ) render () _save_state () def export_config ( output_file : str ) -> None : with open ( output_file , \"w\" ) as state_file : state_file . write ( json . dumps ( { \"streamdeck_ui_version\" : CONFIG_FILE_VERSION , \"state\" : state }, indent = 4 , separators = ( \",\" , \": \" ), ) ) def open_decks () -> Dict [ str , Dict [ str , Union [ str , Tuple [ int , int ]]]]: \"\"\"Opens and then returns all known stream deck devices\"\"\" for deck in DeviceManager . DeviceManager () . enumerate (): deck . open () deck . reset () deck_id = deck . get_serial_number () decks [ deck_id ] = deck deck . set_key_callback ( partial ( _key_change_callback , deck_id )) return { deck_id : { \"type\" : deck . deck_type (), \"layout\" : deck . key_layout ()} for deck_id , deck in decks . items () } def ensure_decks_connected () -> None : \"\"\"Reconnects to any decks that lost connection. If they did, re-renders them.\"\"\" for deck_serial , deck in decks . copy () . items (): if not deck . connected (): for new_deck in DeviceManager . DeviceManager () . enumerate (): try : new_deck . open () new_deck_serial = new_deck . get_serial_number () except Exception as error : warn ( f \"A {error} error occurred when trying to reconnect to {deck_serial}\" ) new_deck_serial = None if new_deck_serial == deck_serial : deck . close () new_deck . reset () new_deck . set_key_callback ( partial ( _key_change_callback , new_deck_serial )) decks [ new_deck_serial ] = new_deck render () def get_deck ( deck_id : str ) -> Dict [ str , Dict [ str , Union [ str , Tuple [ int , int ]]]]: return { \"type\" : decks [ deck_id ] . deck_type (), \"layout\" : decks [ deck_id ] . key_layout ()} def _button_state ( deck_id : str , page : int , button : int ) -> dict : buttons = state . setdefault ( deck_id , {}) . setdefault ( \"buttons\" , {}) buttons_state = buttons . setdefault ( page , {}) # type: ignore return buttons_state . setdefault ( button , {}) # type: ignore def set_button_text ( deck_id : str , page : int , button : int , text : str ) -> None : \"\"\"Set the text associated with a button\"\"\" _button_state ( deck_id , page , button )[ \"text\" ] = text image_cache . pop ( f \"{deck_id}.{page}.{button}\" , None ) render () _save_state () def get_button_text ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the text set for the specified button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"text\" , \"\" ) def set_button_icon ( deck_id : str , page : int , button : int , icon : str ) -> None : \"\"\"Sets the icon associated with a button\"\"\" _button_state ( deck_id , page , button )[ \"icon\" ] = icon image_cache . pop ( f \"{deck_id}.{page}.{button}\" , None ) render () _save_state () def get_button_icon ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the icon set for a particular button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"icon\" , \"\" ) def set_button_change_brightness ( deck_id : str , page : int , button : int , amount : int ) -> None : \"\"\"Sets the brightness changing associated with a button\"\"\" _button_state ( deck_id , page , button )[ \"brightness_change\" ] = amount render () _save_state () def get_button_change_brightness ( deck_id : str , page : int , button : int ) -> int : \"\"\"Returns the brightness change set for a particular button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"brightness_change\" , 0 ) def set_button_command ( deck_id : str , page : int , button : int , command : str ) -> None : \"\"\"Sets the command associated with the button\"\"\" _button_state ( deck_id , page , button )[ \"command\" ] = command _save_state () def get_button_command ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the command set for the specified button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"command\" , \"\" ) def set_button_switch_page ( deck_id : str , page : int , button : int , switch_page : int ) -> None : \"\"\"Sets the page switch associated with the button\"\"\" _button_state ( deck_id , page , button )[ \"switch_page\" ] = switch_page _save_state () def get_button_switch_page ( deck_id : str , page : int , button : int ) -> int : \"\"\"Returns the page switch set for the specified button. 0 implies no page switch.\"\"\" return _button_state ( deck_id , page , button ) . get ( \"switch_page\" , 0 ) def set_button_keys ( deck_id : str , page : int , button : int , keys : str ) -> None : \"\"\"Sets the keys associated with the button\"\"\" _button_state ( deck_id , page , button )[ \"keys\" ] = keys _save_state () def get_button_keys ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the keys set for the specified button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"keys\" , \"\" ) def set_button_write ( deck_id : str , page : int , button : int , write : str ) -> None : \"\"\"Sets the text meant to be written when button is pressed\"\"\" _button_state ( deck_id , page , button )[ \"write\" ] = write _save_state () def get_button_write ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the text to be produced when the specified button is pressed\"\"\" return _button_state ( deck_id , page , button ) . get ( \"write\" , \"\" ) def set_brightness ( deck_id : str , brightness : int ) -> None : \"\"\"Sets the brightness for every button on the deck\"\"\" decks [ deck_id ] . set_brightness ( brightness ) state . setdefault ( deck_id , {})[ \"brightness\" ] = brightness _save_state () def get_brightness ( deck_id : str ) -> int : \"\"\"Gets the brightness that is set for the specified stream deck\"\"\" return state . get ( deck_id , {}) . get ( \"brightness\" , 100 ) # type: ignore def change_brightness ( deck_id : str , amount : int = 1 ) -> None : \"\"\"Change the brightness of the deck by the specified amount\"\"\" set_brightness ( deck_id , max ( min ( get_brightness ( deck_id ) + amount , 100 ), 0 )) def get_page ( deck_id : str ) -> int : \"\"\"Gets the current page shown on the stream deck\"\"\" return state . get ( deck_id , {}) . get ( \"page\" , 0 ) # type: ignore def set_page ( deck_id : str , page : int ) -> None : \"\"\"Sets the current page shown on the stream deck\"\"\" state . setdefault ( deck_id , {})[ \"page\" ] = page render () _save_state () def render () -> None : \"\"\"renders all decks\"\"\" for deck_id , deck_state in state . items (): deck = decks . get ( deck_id , None ) if not deck : warn ( f \"{deck_id} has settings specified but is not seen. Likely unplugged!\" ) continue page = get_page ( deck_id ) for button_id , button_settings in ( deck_state . get ( \"buttons\" , {}) . get ( page , {}) . items () # type: ignore ): key = f \"{deck_id}.{page}.{button_id}\" if key in image_cache : image = image_cache [ key ] else : image = _render_key_image ( deck , ** button_settings ) image_cache [ key ] = image deck . set_key_image ( button_id , image ) def _render_key_image ( deck , icon : str = \"\" , text : str = \"\" , font : str = DEFAULT_FONT , ** kwargs ): \"\"\"Renders an individual key image\"\"\" image = ImageHelpers . PILHelper . create_image ( deck ) draw = ImageDraw . Draw ( image ) if icon : rgba_icon = Image . open ( icon ) . convert ( \"RGBA\" ) else : rgba_icon = Image . new ( \"RGBA\" , ( 300 , 300 )) icon_width , icon_height = image . width , image . height if text : icon_height -= 20 rgba_icon . thumbnail (( icon_width , icon_height ), Image . LANCZOS ) icon_pos = (( image . width - rgba_icon . width ) // 2 , 0 ) image . paste ( rgba_icon , icon_pos , rgba_icon ) if text : true_font = ImageFont . truetype ( os . path . join ( FONTS_PATH , font ), 14 ) label_w , label_h = draw . textsize ( text , font = true_font ) if icon : label_pos = (( image . width - label_w ) // 2 , image . height - 20 ) else : label_pos = (( image . width - label_w ) // 2 , ( image . height // 2 ) - 7 ) draw . text ( label_pos , text = text , font = true_font , fill = \"white\" ) return ImageHelpers . PILHelper . to_native_format ( deck , image ) if os . path . isfile ( STATE_FILE ): _open_config ( STATE_FILE ) Variables CONFIG_FILE_VERSION DEFAULT_FONT FONTS_PATH STATE_FILE decks image_cache state Functions change_brightness def change_brightness ( deck_id : str , amount : int = 1 ) -> None Change the brightness of the deck by the specified amount View Source def change_brightness ( deck_id : str , amount : int = 1 ) -> None : \"\"\"Change the brightness of the deck by the specified amount\"\"\" set_brightness ( deck_id , max ( min ( get_brightness ( deck_id ) + amount , 100 ), 0 )) ensure_decks_connected def ensure_decks_connected ( ) -> None Reconnects to any decks that lost connection. If they did, re-renders them. View Source def ensure_decks_connected () -> None : \"\"\" Reconnects to any decks that lost connection. If they did, re-renders them. \"\"\" for deck_serial , deck in decks . copy () . items () : if not deck . connected () : for new_deck in DeviceManager . DeviceManager () . enumerate () : try : new_deck . open () new_deck_serial = new_deck . get_serial_number () except Exception as error : warn ( f \" A {error} error occurred when trying to reconnect to {deck_serial} \" ) new_deck_serial = None if new_deck_serial == deck_serial : deck . close () new_deck . reset () new_deck . set_key_callback ( partial ( _key_change_callback , new_deck_serial )) decks [ new_deck_serial ] = new_deck render () export_config def export_config ( output_file : str ) -> None View Source def export_config ( output_file : str ) -> None : with open ( output_file , \"w\" ) as state_file : state_file . write ( json . dumps ( { \"streamdeck_ui_version\" : CONFIG_FILE_VERSION , \"state\" : state } , indent = 4 , separators = ( \",\" , \": \" ), ) ) get_brightness def get_brightness ( deck_id : str ) -> int Gets the brightness that is set for the specified stream deck View Source def get_brightness ( deck_id : str ) -> int : \"\"\" Gets the brightness that is set for the specified stream deck \"\"\" return state . get ( deck_id , {} ) . get ( \" brightness \" , 100 ) # type : ignore get_button_change_brightness def get_button_change_brightness ( deck_id : str , page : int , button : int ) -> int Returns the brightness change set for a particular button View Source def get_button_change_brightness ( deck_id : str , page : int , button : int ) -> int : \"\"\" Returns the brightness change set for a particular button \"\"\" return _button_state ( deck_id , page , button ) . get ( \" brightness_change \" , 0 ) get_button_command def get_button_command ( deck_id : str , page : int , button : int ) -> str Returns the command set for the specified button View Source def get_button_command ( deck_id : str , page : int , button : int ) -> str : \"\"\" Returns the command set for the specified button \"\"\" return _button_state ( deck_id , page , button ) . get ( \" command \" , \"\" ) get_button_icon def get_button_icon ( deck_id : str , page : int , button : int ) -> str Returns the icon set for a particular button View Source def get_button_icon ( deck_id : str , page : int , button : int ) -> str : \"\"\" Returns the icon set for a particular button \"\"\" return _button_state ( deck_id , page , button ) . get ( \" icon \" , \"\" ) get_button_keys def get_button_keys ( deck_id : str , page : int , button : int ) -> str Returns the keys set for the specified button View Source def get_button_keys ( deck_id : str , page : int , button : int ) -> str : \"\"\" Returns the keys set for the specified button \"\"\" return _button_state ( deck_id , page , button ) . get ( \" keys \" , \"\" ) get_button_switch_page def get_button_switch_page ( deck_id : str , page : int , button : int ) -> int Returns the page switch set for the specified button. 0 implies no page switch. View Source def get_button_switch_page ( deck_id : str , page : int , button : int ) -> int : \"\"\" Returns the page switch set for the specified button. 0 implies no page switch. \"\"\" return _button_state ( deck_id , page , button ) . get ( \" switch_page \" , 0 ) get_button_text def get_button_text ( deck_id : str , page : int , button : int ) -> str Returns the text set for the specified button View Source def get_button_text ( deck_id : str , page : int , button : int ) -> str : \"\"\" Returns the text set for the specified button \"\"\" return _button_state ( deck_id , page , button ) . get ( \" text \" , \"\" ) get_button_write def get_button_write ( deck_id : str , page : int , button : int ) -> str Returns the text to be produced when the specified button is pressed View Source def get_button_write ( deck_id : str , page : int , button : int ) -> str : \"\"\" Returns the text to be produced when the specified button is pressed \"\"\" return _button_state ( deck_id , page , button ) . get ( \" write \" , \"\" ) get_deck def get_deck ( deck_id : str ) -> typing . Dict [ str , typing . Dict [ str , typing . Union [ str , typing . Tuple [ int , int ]]]] View Source def get_deck ( deck_id : str ) -> Dict [ str , Dict [ str , Union [ str , Tuple [ int , int ]]]]: return { \" type \" : decks [ deck_id ]. deck_type () , \" layout \" : decks [ deck_id ]. key_layout () } get_page def get_page ( deck_id : str ) -> int Gets the current page shown on the stream deck View Source def get_page ( deck_id : str ) -> int : \"\"\" Gets the current page shown on the stream deck \"\"\" return state . get ( deck_id , {} ) . get ( \" page \" , 0 ) # type : ignore import_config def import_config ( config_file : str ) -> None View Source def import_config ( config_file : str ) -> None : _open_config ( config_file ) render () _save_state () open_decks def open_decks ( ) -> typing . Dict [ str , typing . Dict [ str , typing . Union [ str , typing . Tuple [ int , int ]]]] Opens and then returns all known stream deck devices View Source def open_decks () -> Dict [ str , Dict [ str , Union [ str , Tuple [ int , int ]]]]: \"\"\" Opens and then returns all known stream deck devices \"\"\" for deck in DeviceManager . DeviceManager () . enumerate () : deck . open () deck . reset () deck_id = deck . get_serial_number () decks [ deck_id ] = deck deck . set_key_callback ( partial ( _key_change_callback , deck_id )) return { deck_id : { \" type \" : deck . deck_type () , \" layout \" : deck . key_layout () } for deck_id , deck in decks . items () } render def render ( ) -> None renders all decks View Source def render () -> None : \"\"\" renders all decks \"\"\" for deck_id , deck_state in state . items () : deck = decks . get ( deck_id , None ) if not deck : warn ( f \" {deck_id} has settings specified but is not seen. Likely unplugged! \" ) continue page = get_page ( deck_id ) for button_id , button_settings in ( deck_state . get ( \" buttons \" , {} ) . get ( page , {} ) . items () # type : ignore ) : key = f \" {deck_id}.{page}.{button_id} \" if key in image_cache : image = image_cache [ key ] else : image = _render_key_image ( deck , ** button_settings ) image_cache [ key ] = image deck . set_key_image ( button_id , image ) set_brightness def set_brightness ( deck_id : str , brightness : int ) -> None Sets the brightness for every button on the deck View Source def set_brightness ( deck_id : str , brightness : int ) -> None : \"\"\" Sets the brightness for every button on the deck \"\"\" decks [ deck_id ]. set_brightness ( brightness ) state . setdefault ( deck_id , {} ) [ \" brightness \" ] = brightness _save_state () set_button_change_brightness def set_button_change_brightness ( deck_id : str , page : int , button : int , amount : int ) -> None Sets the brightness changing associated with a button View Source def set_button_change_brightness ( deck_id : str , page : int , button : int , amount : int ) -> None : \"\"\"Sets the brightness changing associated with a button\"\"\" _button_state ( deck_id , page , button )[ \"brightness_change\" ] = amount render () _save_state () set_button_command def set_button_command ( deck_id : str , page : int , button : int , command : str ) -> None Sets the command associated with the button View Source def set_button_command ( deck_id : str , page : int , button : int , command : str ) -> None : \"\"\"Sets the command associated with the button\"\"\" _button_state ( deck_id , page , button )[ \"command\" ] = command _save_state () set_button_icon def set_button_icon ( deck_id : str , page : int , button : int , icon : str ) -> None Sets the icon associated with a button View Source def set_button_icon ( deck_id : str , page : int , button : int , icon : str ) -> None : \"\"\"Sets the icon associated with a button\"\"\" _button_state ( deck_id , page , button )[ \"icon\" ] = icon image_cache . pop ( f \"{deck_id}.{page}.{button}\" , None ) render () _save_state () set_button_keys def set_button_keys ( deck_id : str , page : int , button : int , keys : str ) -> None Sets the keys associated with the button View Source def set_button_keys ( deck_id : str , page : int , button : int , keys : str ) -> None : \"\"\"Sets the keys associated with the button\"\"\" _button_state ( deck_id , page , button )[ \"keys\" ] = keys _save_state () set_button_switch_page def set_button_switch_page ( deck_id : str , page : int , button : int , switch_page : int ) -> None Sets the page switch associated with the button View Source def set_button_switch_page ( deck_id : str , page : int , button : int , switch_page : int ) -> None : \"\"\"Sets the page switch associated with the button\"\"\" _button_state ( deck_id , page , button )[ \"switch_page\" ] = switch_page _save_state () set_button_text def set_button_text ( deck_id : str , page : int , button : int , text : str ) -> None Set the text associated with a button View Source def set_button_text ( deck_id : str , page : int , button : int , text : str ) -> None : \"\"\"Set the text associated with a button\"\"\" _button_state ( deck_id , page , button )[ \"text\" ] = text image_cache . pop ( f \"{deck_id}.{page}.{button}\" , None ) render () _save_state () set_button_write def set_button_write ( deck_id : str , page : int , button : int , write : str ) -> None Sets the text meant to be written when button is pressed View Source def set_button_write ( deck_id : str , page : int , button : int , write : str ) -> None : \"\"\"Sets the text meant to be written when button is pressed\"\"\" _button_state ( deck_id , page , button )[ \"write\" ] = write _save_state () set_page def set_page ( deck_id : str , page : int ) -> None Sets the current page shown on the stream deck View Source def set_page ( deck_id : str , page : int ) -> None : \"\"\"Sets the current page shown on the stream deck\"\"\" state . setdefault ( deck_id , {} )[ \"page\" ] = page render () _save_state ()","title":"API"},{"location":"reference/streamdeck_ui/api/#module-streamdeck_uiapi","text":"Defines the Python API for interacting with the StreamDeck Configuration UI View Source \"\"\"Defines the Python API for interacting with the StreamDeck Configuration UI\"\"\" import json import os import threading from functools import partial from subprocess import Popen # nosec - Need to allow users to specify arbitrary commands from typing import Dict , List , Tuple , Union from warnings import warn from PIL import Image , ImageDraw , ImageFont from pynput.keyboard import Controller , Key from StreamDeck import DeviceManager , ImageHelpers from StreamDeck.Devices import StreamDeck from StreamDeck.ImageHelpers import PILHelper from streamdeck_ui.config import CONFIG_FILE_VERSION , DEFAULT_FONT , FONTS_PATH , STATE_FILE image_cache : Dict [ str , memoryview ] = {} decks : Dict [ str , StreamDeck . StreamDeck ] = {} state : Dict [ str , Dict [ str , Union [ int , Dict [ int , Dict [ int , Dict [ str , str ]]]]]] = {} def _key_change_callback ( deck_id : str , _deck : StreamDeck . StreamDeck , key : int , state : bool ) -> None : if state : keyboard = Controller () page = get_page ( deck_id ) command = get_button_command ( deck_id , page , key ) if command : Popen ( command . split ( \" \" )) keys = get_button_keys ( deck_id , page , key ) if keys : keys = keys . strip () . replace ( \" \" , \"\" ) for section in keys . split ( \",\" ): for key_name in section . split ( \"+\" ): keyboard . press ( getattr ( Key , key_name . lower (), key_name )) for key_name in section . split ( \"+\" ): keyboard . release ( getattr ( Key , key_name . lower (), key_name )) write = get_button_write ( deck_id , page , key ) if write : keyboard . type ( write ) brightness_change = get_button_change_brightness ( deck_id , page , key ) if brightness_change : change_brightness ( deck_id , brightness_change ) switch_page = get_button_switch_page ( deck_id , page , key ) if switch_page : set_page ( deck_id , switch_page - 1 ) def _save_state (): export_config ( STATE_FILE ) def _open_config ( config_file : str ): global state with open ( config_file ) as state_file : config = json . loads ( state_file . read ()) file_version = config . get ( \"streamdeck_ui_version\" , 0 ) if file_version != CONFIG_FILE_VERSION : raise ValueError ( \"Incompatible version of config file found: \" f \"{file_version} does not match required version \" f \"{CONFIG_FILE_VERSION}.\" ) state = {} for deck_id , deck in config [ \"state\" ] . items (): deck [ \"buttons\" ] = { int ( page_id ): { int ( button_id ): button for button_id , button in buttons . items ()} for page_id , buttons in deck . get ( \"buttons\" , {}) . items () } state [ deck_id ] = deck def import_config ( config_file : str ) -> None : _open_config ( config_file ) render () _save_state () def export_config ( output_file : str ) -> None : with open ( output_file , \"w\" ) as state_file : state_file . write ( json . dumps ( { \"streamdeck_ui_version\" : CONFIG_FILE_VERSION , \"state\" : state }, indent = 4 , separators = ( \",\" , \": \" ), ) ) def open_decks () -> Dict [ str , Dict [ str , Union [ str , Tuple [ int , int ]]]]: \"\"\"Opens and then returns all known stream deck devices\"\"\" for deck in DeviceManager . DeviceManager () . enumerate (): deck . open () deck . reset () deck_id = deck . get_serial_number () decks [ deck_id ] = deck deck . set_key_callback ( partial ( _key_change_callback , deck_id )) return { deck_id : { \"type\" : deck . deck_type (), \"layout\" : deck . key_layout ()} for deck_id , deck in decks . items () } def ensure_decks_connected () -> None : \"\"\"Reconnects to any decks that lost connection. If they did, re-renders them.\"\"\" for deck_serial , deck in decks . copy () . items (): if not deck . connected (): for new_deck in DeviceManager . DeviceManager () . enumerate (): try : new_deck . open () new_deck_serial = new_deck . get_serial_number () except Exception as error : warn ( f \"A {error} error occurred when trying to reconnect to {deck_serial}\" ) new_deck_serial = None if new_deck_serial == deck_serial : deck . close () new_deck . reset () new_deck . set_key_callback ( partial ( _key_change_callback , new_deck_serial )) decks [ new_deck_serial ] = new_deck render () def get_deck ( deck_id : str ) -> Dict [ str , Dict [ str , Union [ str , Tuple [ int , int ]]]]: return { \"type\" : decks [ deck_id ] . deck_type (), \"layout\" : decks [ deck_id ] . key_layout ()} def _button_state ( deck_id : str , page : int , button : int ) -> dict : buttons = state . setdefault ( deck_id , {}) . setdefault ( \"buttons\" , {}) buttons_state = buttons . setdefault ( page , {}) # type: ignore return buttons_state . setdefault ( button , {}) # type: ignore def set_button_text ( deck_id : str , page : int , button : int , text : str ) -> None : \"\"\"Set the text associated with a button\"\"\" _button_state ( deck_id , page , button )[ \"text\" ] = text image_cache . pop ( f \"{deck_id}.{page}.{button}\" , None ) render () _save_state () def get_button_text ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the text set for the specified button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"text\" , \"\" ) def set_button_icon ( deck_id : str , page : int , button : int , icon : str ) -> None : \"\"\"Sets the icon associated with a button\"\"\" _button_state ( deck_id , page , button )[ \"icon\" ] = icon image_cache . pop ( f \"{deck_id}.{page}.{button}\" , None ) render () _save_state () def get_button_icon ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the icon set for a particular button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"icon\" , \"\" ) def set_button_change_brightness ( deck_id : str , page : int , button : int , amount : int ) -> None : \"\"\"Sets the brightness changing associated with a button\"\"\" _button_state ( deck_id , page , button )[ \"brightness_change\" ] = amount render () _save_state () def get_button_change_brightness ( deck_id : str , page : int , button : int ) -> int : \"\"\"Returns the brightness change set for a particular button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"brightness_change\" , 0 ) def set_button_command ( deck_id : str , page : int , button : int , command : str ) -> None : \"\"\"Sets the command associated with the button\"\"\" _button_state ( deck_id , page , button )[ \"command\" ] = command _save_state () def get_button_command ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the command set for the specified button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"command\" , \"\" ) def set_button_switch_page ( deck_id : str , page : int , button : int , switch_page : int ) -> None : \"\"\"Sets the page switch associated with the button\"\"\" _button_state ( deck_id , page , button )[ \"switch_page\" ] = switch_page _save_state () def get_button_switch_page ( deck_id : str , page : int , button : int ) -> int : \"\"\"Returns the page switch set for the specified button. 0 implies no page switch.\"\"\" return _button_state ( deck_id , page , button ) . get ( \"switch_page\" , 0 ) def set_button_keys ( deck_id : str , page : int , button : int , keys : str ) -> None : \"\"\"Sets the keys associated with the button\"\"\" _button_state ( deck_id , page , button )[ \"keys\" ] = keys _save_state () def get_button_keys ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the keys set for the specified button\"\"\" return _button_state ( deck_id , page , button ) . get ( \"keys\" , \"\" ) def set_button_write ( deck_id : str , page : int , button : int , write : str ) -> None : \"\"\"Sets the text meant to be written when button is pressed\"\"\" _button_state ( deck_id , page , button )[ \"write\" ] = write _save_state () def get_button_write ( deck_id : str , page : int , button : int ) -> str : \"\"\"Returns the text to be produced when the specified button is pressed\"\"\" return _button_state ( deck_id , page , button ) . get ( \"write\" , \"\" ) def set_brightness ( deck_id : str , brightness : int ) -> None : \"\"\"Sets the brightness for every button on the deck\"\"\" decks [ deck_id ] . set_brightness ( brightness ) state . setdefault ( deck_id , {})[ \"brightness\" ] = brightness _save_state () def get_brightness ( deck_id : str ) -> int : \"\"\"Gets the brightness that is set for the specified stream deck\"\"\" return state . get ( deck_id , {}) . get ( \"brightness\" , 100 ) # type: ignore def change_brightness ( deck_id : str , amount : int = 1 ) -> None : \"\"\"Change the brightness of the deck by the specified amount\"\"\" set_brightness ( deck_id , max ( min ( get_brightness ( deck_id ) + amount , 100 ), 0 )) def get_page ( deck_id : str ) -> int : \"\"\"Gets the current page shown on the stream deck\"\"\" return state . get ( deck_id , {}) . get ( \"page\" , 0 ) # type: ignore def set_page ( deck_id : str , page : int ) -> None : \"\"\"Sets the current page shown on the stream deck\"\"\" state . setdefault ( deck_id , {})[ \"page\" ] = page render () _save_state () def render () -> None : \"\"\"renders all decks\"\"\" for deck_id , deck_state in state . items (): deck = decks . get ( deck_id , None ) if not deck : warn ( f \"{deck_id} has settings specified but is not seen. Likely unplugged!\" ) continue page = get_page ( deck_id ) for button_id , button_settings in ( deck_state . get ( \"buttons\" , {}) . get ( page , {}) . items () # type: ignore ): key = f \"{deck_id}.{page}.{button_id}\" if key in image_cache : image = image_cache [ key ] else : image = _render_key_image ( deck , ** button_settings ) image_cache [ key ] = image deck . set_key_image ( button_id , image ) def _render_key_image ( deck , icon : str = \"\" , text : str = \"\" , font : str = DEFAULT_FONT , ** kwargs ): \"\"\"Renders an individual key image\"\"\" image = ImageHelpers . PILHelper . create_image ( deck ) draw = ImageDraw . Draw ( image ) if icon : rgba_icon = Image . open ( icon ) . convert ( \"RGBA\" ) else : rgba_icon = Image . new ( \"RGBA\" , ( 300 , 300 )) icon_width , icon_height = image . width , image . height if text : icon_height -= 20 rgba_icon . thumbnail (( icon_width , icon_height ), Image . LANCZOS ) icon_pos = (( image . width - rgba_icon . width ) // 2 , 0 ) image . paste ( rgba_icon , icon_pos , rgba_icon ) if text : true_font = ImageFont . truetype ( os . path . join ( FONTS_PATH , font ), 14 ) label_w , label_h = draw . textsize ( text , font = true_font ) if icon : label_pos = (( image . width - label_w ) // 2 , image . height - 20 ) else : label_pos = (( image . width - label_w ) // 2 , ( image . height // 2 ) - 7 ) draw . text ( label_pos , text = text , font = true_font , fill = \"white\" ) return ImageHelpers . PILHelper . to_native_format ( deck , image ) if os . path . isfile ( STATE_FILE ): _open_config ( STATE_FILE )","title":"Module streamdeck_ui.api"},{"location":"reference/streamdeck_ui/api/#variables","text":"CONFIG_FILE_VERSION DEFAULT_FONT FONTS_PATH STATE_FILE decks image_cache state","title":"Variables"},{"location":"reference/streamdeck_ui/api/#functions","text":"","title":"Functions"},{"location":"reference/streamdeck_ui/api/#change_brightness","text":"def change_brightness ( deck_id : str , amount : int = 1 ) -> None Change the brightness of the deck by the specified amount View Source def change_brightness ( deck_id : str , amount : int = 1 ) -> None : \"\"\"Change the brightness of the deck by the specified amount\"\"\" set_brightness ( deck_id , max ( min ( get_brightness ( deck_id ) + amount , 100 ), 0 ))","title":"change_brightness"},{"location":"reference/streamdeck_ui/api/#ensure_decks_connected","text":"def ensure_decks_connected ( ) -> None Reconnects to any decks that lost connection. If they did, re-renders them. View Source def ensure_decks_connected () -> None : \"\"\" Reconnects to any decks that lost connection. If they did, re-renders them. \"\"\" for deck_serial , deck in decks . copy () . items () : if not deck . connected () : for new_deck in DeviceManager . DeviceManager () . enumerate () : try : new_deck . open () new_deck_serial = new_deck . get_serial_number () except Exception as error : warn ( f \" A {error} error occurred when trying to reconnect to {deck_serial} \" ) new_deck_serial = None if new_deck_serial == deck_serial : deck . close () new_deck . reset () new_deck . set_key_callback ( partial ( _key_change_callback , new_deck_serial )) decks [ new_deck_serial ] = new_deck render ()","title":"ensure_decks_connected"},{"location":"reference/streamdeck_ui/api/#export_config","text":"def export_config ( output_file : str ) -> None View Source def export_config ( output_file : str ) -> None : with open ( output_file , \"w\" ) as state_file : state_file . write ( json . dumps ( { \"streamdeck_ui_version\" : CONFIG_FILE_VERSION , \"state\" : state } , indent = 4 , separators = ( \",\" , \": \" ), ) )","title":"export_config"},{"location":"reference/streamdeck_ui/api/#get_brightness","text":"def get_brightness ( deck_id : str ) -> int Gets the brightness that is set for the specified stream deck View Source def get_brightness ( deck_id : str ) -> int : \"\"\" Gets the brightness that is set for the specified stream deck \"\"\" return state . get ( deck_id , {} ) . get ( \" brightness \" , 100 ) # type : ignore","title":"get_brightness"},{"location":"reference/streamdeck_ui/api/#get_button_change_brightness","text":"def get_button_change_brightness ( deck_id : str , page : int , button : int ) -> int Returns the brightness change set for a particular button View Source def get_button_change_brightness ( deck_id : str , page : int , button : int ) -> int : \"\"\" Returns the brightness change set for a particular button \"\"\" return _button_state ( deck_id , page , button ) . get ( \" brightness_change \" , 0 )","title":"get_button_change_brightness"},{"location":"reference/streamdeck_ui/api/#get_button_command","text":"def get_button_command ( deck_id : str , page : int , button : int ) -> str Returns the command set for the specified button View Source def get_button_command ( deck_id : str , page : int , button : int ) -> str : \"\"\" Returns the command set for the specified button \"\"\" return _button_state ( deck_id , page , button ) . get ( \" command \" , \"\" )","title":"get_button_command"},{"location":"reference/streamdeck_ui/api/#get_button_icon","text":"def get_button_icon ( deck_id : str , page : int , button : int ) -> str Returns the icon set for a particular button View Source def get_button_icon ( deck_id : str , page : int , button : int ) -> str : \"\"\" Returns the icon set for a particular button \"\"\" return _button_state ( deck_id , page , button ) . get ( \" icon \" , \"\" )","title":"get_button_icon"},{"location":"reference/streamdeck_ui/api/#get_button_keys","text":"def get_button_keys ( deck_id : str , page : int , button : int ) -> str Returns the keys set for the specified button View Source def get_button_keys ( deck_id : str , page : int , button : int ) -> str : \"\"\" Returns the keys set for the specified button \"\"\" return _button_state ( deck_id , page , button ) . get ( \" keys \" , \"\" )","title":"get_button_keys"},{"location":"reference/streamdeck_ui/api/#get_button_switch_page","text":"def get_button_switch_page ( deck_id : str , page : int , button : int ) -> int Returns the page switch set for the specified button. 0 implies no page switch. View Source def get_button_switch_page ( deck_id : str , page : int , button : int ) -> int : \"\"\" Returns the page switch set for the specified button. 0 implies no page switch. \"\"\" return _button_state ( deck_id , page , button ) . get ( \" switch_page \" , 0 )","title":"get_button_switch_page"},{"location":"reference/streamdeck_ui/api/#get_button_text","text":"def get_button_text ( deck_id : str , page : int , button : int ) -> str Returns the text set for the specified button View Source def get_button_text ( deck_id : str , page : int , button : int ) -> str : \"\"\" Returns the text set for the specified button \"\"\" return _button_state ( deck_id , page , button ) . get ( \" text \" , \"\" )","title":"get_button_text"},{"location":"reference/streamdeck_ui/api/#get_button_write","text":"def get_button_write ( deck_id : str , page : int , button : int ) -> str Returns the text to be produced when the specified button is pressed View Source def get_button_write ( deck_id : str , page : int , button : int ) -> str : \"\"\" Returns the text to be produced when the specified button is pressed \"\"\" return _button_state ( deck_id , page , button ) . get ( \" write \" , \"\" )","title":"get_button_write"},{"location":"reference/streamdeck_ui/api/#get_deck","text":"def get_deck ( deck_id : str ) -> typing . Dict [ str , typing . Dict [ str , typing . Union [ str , typing . Tuple [ int , int ]]]] View Source def get_deck ( deck_id : str ) -> Dict [ str , Dict [ str , Union [ str , Tuple [ int , int ]]]]: return { \" type \" : decks [ deck_id ]. deck_type () , \" layout \" : decks [ deck_id ]. key_layout () }","title":"get_deck"},{"location":"reference/streamdeck_ui/api/#get_page","text":"def get_page ( deck_id : str ) -> int Gets the current page shown on the stream deck View Source def get_page ( deck_id : str ) -> int : \"\"\" Gets the current page shown on the stream deck \"\"\" return state . get ( deck_id , {} ) . get ( \" page \" , 0 ) # type : ignore","title":"get_page"},{"location":"reference/streamdeck_ui/api/#import_config","text":"def import_config ( config_file : str ) -> None View Source def import_config ( config_file : str ) -> None : _open_config ( config_file ) render () _save_state ()","title":"import_config"},{"location":"reference/streamdeck_ui/api/#open_decks","text":"def open_decks ( ) -> typing . Dict [ str , typing . Dict [ str , typing . Union [ str , typing . Tuple [ int , int ]]]] Opens and then returns all known stream deck devices View Source def open_decks () -> Dict [ str , Dict [ str , Union [ str , Tuple [ int , int ]]]]: \"\"\" Opens and then returns all known stream deck devices \"\"\" for deck in DeviceManager . DeviceManager () . enumerate () : deck . open () deck . reset () deck_id = deck . get_serial_number () decks [ deck_id ] = deck deck . set_key_callback ( partial ( _key_change_callback , deck_id )) return { deck_id : { \" type \" : deck . deck_type () , \" layout \" : deck . key_layout () } for deck_id , deck in decks . items () }","title":"open_decks"},{"location":"reference/streamdeck_ui/api/#render","text":"def render ( ) -> None renders all decks View Source def render () -> None : \"\"\" renders all decks \"\"\" for deck_id , deck_state in state . items () : deck = decks . get ( deck_id , None ) if not deck : warn ( f \" {deck_id} has settings specified but is not seen. Likely unplugged! \" ) continue page = get_page ( deck_id ) for button_id , button_settings in ( deck_state . get ( \" buttons \" , {} ) . get ( page , {} ) . items () # type : ignore ) : key = f \" {deck_id}.{page}.{button_id} \" if key in image_cache : image = image_cache [ key ] else : image = _render_key_image ( deck , ** button_settings ) image_cache [ key ] = image deck . set_key_image ( button_id , image )","title":"render"},{"location":"reference/streamdeck_ui/api/#set_brightness","text":"def set_brightness ( deck_id : str , brightness : int ) -> None Sets the brightness for every button on the deck View Source def set_brightness ( deck_id : str , brightness : int ) -> None : \"\"\" Sets the brightness for every button on the deck \"\"\" decks [ deck_id ]. set_brightness ( brightness ) state . setdefault ( deck_id , {} ) [ \" brightness \" ] = brightness _save_state ()","title":"set_brightness"},{"location":"reference/streamdeck_ui/api/#set_button_change_brightness","text":"def set_button_change_brightness ( deck_id : str , page : int , button : int , amount : int ) -> None Sets the brightness changing associated with a button View Source def set_button_change_brightness ( deck_id : str , page : int , button : int , amount : int ) -> None : \"\"\"Sets the brightness changing associated with a button\"\"\" _button_state ( deck_id , page , button )[ \"brightness_change\" ] = amount render () _save_state ()","title":"set_button_change_brightness"},{"location":"reference/streamdeck_ui/api/#set_button_command","text":"def set_button_command ( deck_id : str , page : int , button : int , command : str ) -> None Sets the command associated with the button View Source def set_button_command ( deck_id : str , page : int , button : int , command : str ) -> None : \"\"\"Sets the command associated with the button\"\"\" _button_state ( deck_id , page , button )[ \"command\" ] = command _save_state ()","title":"set_button_command"},{"location":"reference/streamdeck_ui/api/#set_button_icon","text":"def set_button_icon ( deck_id : str , page : int , button : int , icon : str ) -> None Sets the icon associated with a button View Source def set_button_icon ( deck_id : str , page : int , button : int , icon : str ) -> None : \"\"\"Sets the icon associated with a button\"\"\" _button_state ( deck_id , page , button )[ \"icon\" ] = icon image_cache . pop ( f \"{deck_id}.{page}.{button}\" , None ) render () _save_state ()","title":"set_button_icon"},{"location":"reference/streamdeck_ui/api/#set_button_keys","text":"def set_button_keys ( deck_id : str , page : int , button : int , keys : str ) -> None Sets the keys associated with the button View Source def set_button_keys ( deck_id : str , page : int , button : int , keys : str ) -> None : \"\"\"Sets the keys associated with the button\"\"\" _button_state ( deck_id , page , button )[ \"keys\" ] = keys _save_state ()","title":"set_button_keys"},{"location":"reference/streamdeck_ui/api/#set_button_switch_page","text":"def set_button_switch_page ( deck_id : str , page : int , button : int , switch_page : int ) -> None Sets the page switch associated with the button View Source def set_button_switch_page ( deck_id : str , page : int , button : int , switch_page : int ) -> None : \"\"\"Sets the page switch associated with the button\"\"\" _button_state ( deck_id , page , button )[ \"switch_page\" ] = switch_page _save_state ()","title":"set_button_switch_page"},{"location":"reference/streamdeck_ui/api/#set_button_text","text":"def set_button_text ( deck_id : str , page : int , button : int , text : str ) -> None Set the text associated with a button View Source def set_button_text ( deck_id : str , page : int , button : int , text : str ) -> None : \"\"\"Set the text associated with a button\"\"\" _button_state ( deck_id , page , button )[ \"text\" ] = text image_cache . pop ( f \"{deck_id}.{page}.{button}\" , None ) render () _save_state ()","title":"set_button_text"},{"location":"reference/streamdeck_ui/api/#set_button_write","text":"def set_button_write ( deck_id : str , page : int , button : int , write : str ) -> None Sets the text meant to be written when button is pressed View Source def set_button_write ( deck_id : str , page : int , button : int , write : str ) -> None : \"\"\"Sets the text meant to be written when button is pressed\"\"\" _button_state ( deck_id , page , button )[ \"write\" ] = write _save_state ()","title":"set_button_write"},{"location":"reference/streamdeck_ui/api/#set_page","text":"def set_page ( deck_id : str , page : int ) -> None Sets the current page shown on the stream deck View Source def set_page ( deck_id : str , page : int ) -> None : \"\"\"Sets the current page shown on the stream deck\"\"\" state . setdefault ( deck_id , {} )[ \"page\" ] = page render () _save_state ()","title":"set_page"},{"location":"reference/streamdeck_ui/config/","text":"Module streamdeck_ui.config Defines shared configuration variables for the streamdeck_ui project View Source \"\"\"Defines shared configuration variables for the streamdeck_ui project\"\"\" import os PROJECT_PATH = os . path . dirname ( os . path . abspath ( __file__ )) LOGO = os . path . join ( PROJECT_PATH , \"logo.png\" ) FONTS_PATH = os . path . join ( PROJECT_PATH , \"fonts\" ) DEFAULT_FONT = os . path . join ( \"roboto\" , \"Roboto-Regular.ttf\" ) STATE_FILE = os . environ . get ( \"STREAMDECK_UI_CONFIG\" , os . path . expanduser ( \"~/.streamdeck_ui.json\" )) CONFIG_FILE_VERSION = 1 # Update only if backward incompatible changes are made to the config file Variables CONFIG_FILE_VERSION DEFAULT_FONT FONTS_PATH LOGO PROJECT_PATH STATE_FILE","title":"Config"},{"location":"reference/streamdeck_ui/config/#module-streamdeck_uiconfig","text":"Defines shared configuration variables for the streamdeck_ui project View Source \"\"\"Defines shared configuration variables for the streamdeck_ui project\"\"\" import os PROJECT_PATH = os . path . dirname ( os . path . abspath ( __file__ )) LOGO = os . path . join ( PROJECT_PATH , \"logo.png\" ) FONTS_PATH = os . path . join ( PROJECT_PATH , \"fonts\" ) DEFAULT_FONT = os . path . join ( \"roboto\" , \"Roboto-Regular.ttf\" ) STATE_FILE = os . environ . get ( \"STREAMDECK_UI_CONFIG\" , os . path . expanduser ( \"~/.streamdeck_ui.json\" )) CONFIG_FILE_VERSION = 1 # Update only if backward incompatible changes are made to the config file","title":"Module streamdeck_ui.config"},{"location":"reference/streamdeck_ui/config/#variables","text":"CONFIG_FILE_VERSION DEFAULT_FONT FONTS_PATH LOGO PROJECT_PATH STATE_FILE","title":"Variables"},{"location":"reference/streamdeck_ui/gui/","text":"Module streamdeck_ui.gui Defines the QT powered interface for configuring Stream Decks View Source \"\"\"Defines the QT powered interface for configuring Stream Decks\"\"\" import os import sys from functools import partial from PySide2 import QtWidgets from PySide2.QtCore import QSize , Qt , QTimer from PySide2.QtGui import QIcon from PySide2.QtUiTools import QUiLoader from PySide2.QtWidgets import ( QAction , QApplication , QFileDialog , QMainWindow , QMenu , QSizePolicy , QSystemTrayIcon , ) from streamdeck_ui import api from streamdeck_ui.config import LOGO , PROJECT_PATH from streamdeck_ui.ui_main import Ui_MainWindow BUTTON_SYTLE = \"\"\" QToolButton{background-color:black;} QToolButton:checked{background-color:darkGray;} QToolButton:focus{border:none; } \"\"\" selected_button : QtWidgets . QToolButton text_timer = None def _deck_id ( ui ) -> str : return ui . device_list . itemData ( ui . device_list . currentIndex ()) def _page ( ui ) -> int : return ui . pages . currentIndex () def update_button_text ( ui , text : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_text ( deck_id , _page ( ui ), selected_button . index , text ) redraw_buttons ( ui ) def update_button_command ( ui , command : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_command ( deck_id , _page ( ui ), selected_button . index , command ) def update_button_keys ( ui , keys : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_keys ( deck_id , _page ( ui ), selected_button . index , keys ) def update_button_write ( ui ) -> None : deck_id = _deck_id ( ui ) api . set_button_write ( deck_id , _page ( ui ), selected_button . index , ui . write . toPlainText ()) def update_change_brightness ( ui , amount : int ) -> None : deck_id = _deck_id ( ui ) api . set_button_change_brightness ( deck_id , _page ( ui ), selected_button . index , amount ) def update_switch_page ( ui , page : int ) -> None : deck_id = _deck_id ( ui ) api . set_button_switch_page ( deck_id , _page ( ui ), selected_button . index , page ) def _highlight_first_button ( ui ) -> None : button = ui . pages . currentWidget () . findChildren ( QtWidgets . QToolButton )[ 0 ] button . setChecked ( False ) button . click () def change_page ( ui , page : int ) -> None : api . set_page ( _deck_id ( ui ), page ) redraw_buttons ( ui ) _highlight_first_button ( ui ) def select_image ( window ) -> None : file_name = QFileDialog . getOpenFileName ( window , \"Open Image\" , os . path . expanduser ( \"~\" ), \"Image Files (*.png *.jpg *.bmp)\" )[ 0 ] deck_id = _deck_id ( window . ui ) api . set_button_icon ( deck_id , _page ( window . ui ), selected_button . index , file_name ) redraw_buttons ( window . ui ) def redraw_buttons ( ui ) -> None : deck_id = _deck_id ( ui ) current_tab = ui . pages . currentWidget () buttons = current_tab . findChildren ( QtWidgets . QToolButton ) for button in buttons : button . setText ( api . get_button_text ( deck_id , _page ( ui ), button . index )) button . setIcon ( QIcon ( api . get_button_icon ( deck_id , _page ( ui ), button . index ))) def set_brightness ( ui , value : int ) -> None : deck_id = _deck_id ( ui ) api . set_brightness ( deck_id , value ) def button_clicked ( ui , clicked_button , buttons ) -> None : global selected_button selected_button = clicked_button for button in buttons : if button == clicked_button : continue button . setChecked ( False ) deck_id = _deck_id ( ui ) button_id = selected_button . index ui . text . setText ( api . get_button_text ( deck_id , _page ( ui ), button_id )) ui . command . setText ( api . get_button_command ( deck_id , _page ( ui ), button_id )) ui . keys . setText ( api . get_button_keys ( deck_id , _page ( ui ), button_id )) ui . write . setPlainText ( api . get_button_write ( deck_id , _page ( ui ), button_id )) ui . change_brightness . setValue ( api . get_button_change_brightness ( deck_id , _page ( ui ), button_id )) ui . switch_page . setValue ( api . get_button_switch_page ( deck_id , _page ( ui ), button_id )) def build_buttons ( ui , tab ) -> None : deck_id = _deck_id ( ui ) deck = api . get_deck ( deck_id ) if hasattr ( tab , \"deck_buttons\" ): tab . deck_buttons . hide () tab . deck_buttons . deleteLater () base_widget = QtWidgets . QWidget ( tab ) tab . children ()[ 0 ] . addWidget ( base_widget ) tab . deck_buttons = base_widget row_layout = QtWidgets . QVBoxLayout ( base_widget ) index = 0 buttons = [] for _row in range ( deck [ \"layout\" ][ 0 ]): # type: ignore column_layout = QtWidgets . QHBoxLayout () row_layout . addLayout ( column_layout ) for _column in range ( deck [ \"layout\" ][ 1 ]): # type: ignore button = QtWidgets . QToolButton ( base_widget ) button . setCheckable ( True ) button . index = index button . setSizePolicy ( QSizePolicy . MinimumExpanding , QSizePolicy . MinimumExpanding ) button . setToolButtonStyle ( Qt . ToolButtonTextUnderIcon ) button . setIconSize ( QSize ( 100 , 100 )) button . setStyleSheet ( BUTTON_SYTLE ) buttons . append ( button ) column_layout . addWidget ( button ) index += 1 for button in buttons : button . clicked . connect ( lambda button = button , buttons = buttons : button_clicked ( ui , button , buttons ) ) redraw_buttons ( ui ) tab . hide () tab . show () def export_config ( window ) -> None : file_name = QFileDialog . getSaveFileName ( window , \"Export Config\" , os . path . expanduser ( \"~/streamdeck_ui_export.json\" ), \"JSON (*.json)\" )[ 0 ] if not file_name : return api . export_config ( file_name ) def import_config ( window ) -> None : file_name = QFileDialog . getOpenFileName ( window , \"Import Config\" , os . path . expanduser ( \"~\" ), \"Config Files (*.json)\" )[ 0 ] if not file_name : return api . import_config ( file_name ) redraw_buttons ( window . ui ) def sync ( ui ) -> None : api . ensure_decks_connected () ui . brightness . setValue ( api . get_brightness ( _deck_id ( ui ))) ui . pages . setCurrentIndex ( api . get_page ( _deck_id ( ui ))) def build_device ( ui , _device_index = None ) -> None : for page_id in range ( ui . pages . count ()): page = ui . pages . widget ( page_id ) page . setStyleSheet ( \"background-color: black\" ) build_buttons ( ui , page ) sync ( ui ) _highlight_first_button ( ui ) class MainWindow ( QMainWindow ): def __init__ ( self ): super ( MainWindow , self ) . __init__ () self . ui = Ui_MainWindow () self . ui . setupUi ( self ) self . window_shown : bool = True def closeEvent ( self , event ) -> None : # noqa: N802 - Part of QT signature. self . window_shown = False self . hide () event . ignore () def systray_clicked ( self , _status = None ) -> None : self . hide () if self . window_shown : self . window_shown = False return self . show () self . activateWindow () getattr ( self , \"raise\" )() # noqa: B009 - Can't call as self.raise() due to syntax error. self . window_shown = True def queue_text_change ( ui , text : str ) -> None : global text_timer if text_timer : text_timer . stop () text_timer = QTimer () text_timer . setSingleShot ( True ) text_timer . timeout . connect ( partial ( update_button_text , ui , text )) text_timer . start ( 500 ) def start ( _exit : bool = False ) -> None : app = QApplication ( sys . argv ) logo = QIcon ( LOGO ) main_window = MainWindow () ui = main_window . ui main_window . setWindowIcon ( logo ) tray = QSystemTrayIcon ( logo , app ) tray . activated . connect ( main_window . systray_clicked ) menu = QMenu () action_exit = QAction ( \"Exit\" ) action_exit . triggered . connect ( app . exit ) menu . addAction ( action_exit ) tray . setContextMenu ( menu ) ui . text . textChanged . connect ( partial ( queue_text_change , ui )) ui . command . textChanged . connect ( partial ( update_button_command , ui )) ui . keys . textChanged . connect ( partial ( update_button_keys , ui )) ui . write . textChanged . connect ( partial ( update_button_write , ui )) ui . change_brightness . valueChanged . connect ( partial ( update_change_brightness , ui )) ui . switch_page . valueChanged . connect ( partial ( update_switch_page , ui )) ui . imageButton . clicked . connect ( partial ( select_image , main_window )) ui . brightness . valueChanged . connect ( partial ( set_brightness , ui )) for deck_id , deck in api . open_decks () . items (): ui . device_list . addItem ( f \"{deck['type']} - {deck_id}\" , userData = deck_id ) build_device ( ui ) ui . device_list . currentIndexChanged . connect ( partial ( build_device , ui )) ui . pages . currentChanged . connect ( partial ( change_page , ui )) ui . actionExport . triggered . connect ( partial ( export_config , main_window )) ui . actionImport . triggered . connect ( partial ( import_config , main_window )) timer = QTimer () timer . timeout . connect ( partial ( sync , ui )) timer . start ( 1000 ) api . render () tray . show () main_window . show () if _exit : return else : sys . exit ( app . exec_ ()) if __name__ == \"__main__\" : start () Variables BUTTON_SYTLE LOGO PROJECT_PATH text_timer Functions build_buttons def build_buttons ( ui , tab ) -> None View Source def build_buttons ( ui , tab ) -> None : deck_id = _deck_id ( ui ) deck = api . get_deck ( deck_id ) if hasattr ( tab , \" deck_buttons \" ) : tab . deck_buttons . hide () tab . deck_buttons . deleteLater () base_widget = QtWidgets . QWidget ( tab ) tab . children () [ 0 ]. addWidget ( base_widget ) tab . deck_buttons = base_widget row_layout = QtWidgets . QVBoxLayout ( base_widget ) index = 0 buttons = [] for _row in range ( deck [ \" layout \" ][ 0 ] ) : # type : ignore column_layout = QtWidgets . QHBoxLayout () row_layout . addLayout ( column_layout ) for _column in range ( deck [ \" layout \" ][ 1 ] ) : # type : ignore button = QtWidgets . QToolButton ( base_widget ) button . setCheckable ( True ) button . index = index button . setSizePolicy ( QSizePolicy . MinimumExpanding , QSizePolicy . MinimumExpanding ) button . setToolButtonStyle ( Qt . ToolButtonTextUnderIcon ) button . setIconSize ( QSize ( 100 , 100 )) button . setStyleSheet ( BUTTON_SYTLE ) buttons . append ( button ) column_layout . addWidget ( button ) index += 1 for button in buttons : button . clicked . connect ( lambda button = button , buttons = buttons : button_clicked ( ui , button , buttons ) ) redraw_buttons ( ui ) tab . hide () tab . show () build_device def build_device ( ui , _device_index = None ) -> None View Source def build_device ( ui , _device_index = None ) -> None : for page_id in range ( ui . pages . count ()) : page = ui . pages . widget ( page_id ) page . setStyleSheet ( \" background-color: black \" ) build_buttons ( ui , page ) sync ( ui ) _highlight_first_button ( ui ) button_clicked def button_clicked ( ui , clicked_button , buttons ) -> None View Source def button_clicked ( ui , clicked_button , buttons ) -> None : global selected_button selected_button = clicked_button for button in buttons : if button == clicked_button : continue button . setChecked ( False ) deck_id = _deck_id ( ui ) button_id = selected_button . index ui . text . setText ( api . get_button_text ( deck_id , _page ( ui ) , button_id )) ui . command . setText ( api . get_button_command ( deck_id , _page ( ui ) , button_id )) ui . keys . setText ( api . get_button_keys ( deck_id , _page ( ui ) , button_id )) ui . write . setPlainText ( api . get_button_write ( deck_id , _page ( ui ) , button_id )) ui . change_brightness . setValue ( api . get_button_change_brightness ( deck_id , _page ( ui ) , button_id )) ui . switch_page . setValue ( api . get_button_switch_page ( deck_id , _page ( ui ) , button_id )) change_page def change_page ( ui , page : int ) -> None View Source def change_page ( ui , page : int ) -> None : api . set_page ( _deck_id ( ui ), page ) redraw_buttons ( ui ) _highlight_first_button ( ui ) export_config def export_config ( window ) -> None View Source def export_config ( window ) -> None : file_name = QFileDialog . getSaveFileName ( window , \" Export Config \" , os . path . expanduser ( \" ~/streamdeck_ui_export.json \" ) , \" JSON (*.json) \" ) [ 0 ] if not file_name : return api . export_config ( file_name ) import_config def import_config ( window ) -> None View Source def import_config ( window ) -> None : file_name = QFileDialog . getOpenFileName ( window , \" Import Config \" , os . path . expanduser ( \" ~ \" ) , \" Config Files (*.json) \" ) [ 0 ] if not file_name : return api . import_config ( file_name ) redraw_buttons ( window . ui ) queue_text_change def queue_text_change ( ui , text : str ) -> None View Source def queue_text_change ( ui , text : str ) -> None : global text_timer if text_timer : text_timer . stop () text_timer = QTimer () text_timer . setSingleShot ( True ) text_timer . timeout . connect ( partial ( update_button_text , ui , text )) text_timer . start ( 500 ) redraw_buttons def redraw_buttons ( ui ) -> None View Source def redraw_buttons ( ui ) -> None : deck_id = _deck_id ( ui ) current_tab = ui . pages . currentWidget () buttons = current_tab . findChildren ( QtWidgets . QToolButton ) for button in buttons : button . setText ( api . get_button_text ( deck_id , _page ( ui ) , button . index )) button . setIcon ( QIcon ( api . get_button_icon ( deck_id , _page ( ui ) , button . index ))) select_image def select_image ( window ) -> None View Source def select_image ( window ) -> None : file_name = QFileDialog . getOpenFileName ( window , \"Open Image\" , os . path . expanduser ( \"~\" ), \"Image Files (*.png *.jpg *.bmp)\" )[ 0 ] deck_id = _deck_id ( window . ui ) api . set_button_icon ( deck_id , _page ( window . ui ), selected_button . index , file_name ) redraw_buttons ( window . ui ) set_brightness def set_brightness ( ui , value : int ) -> None View Source def set_brightness ( ui , value : int ) -> None : deck_id = _deck_id ( ui ) api . set_brightness ( deck_id , value ) start def start ( _exit : bool = False ) -> None View Source def start ( _exit : bool = False ) -> None : app = QApplication ( sys . argv ) logo = QIcon ( LOGO ) main_window = MainWindow () ui = main_window . ui main_window . setWindowIcon ( logo ) tray = QSystemTrayIcon ( logo , app ) tray . activated . connect ( main_window . systray_clicked ) menu = QMenu () action_exit = QAction ( \" Exit \" ) action_exit . triggered . connect ( app . exit ) menu . addAction ( action_exit ) tray . setContextMenu ( menu ) ui . text . textChanged . connect ( partial ( queue_text_change , ui )) ui . command . textChanged . connect ( partial ( update_button_command , ui )) ui . keys . textChanged . connect ( partial ( update_button_keys , ui )) ui . write . textChanged . connect ( partial ( update_button_write , ui )) ui . change_brightness . valueChanged . connect ( partial ( update_change_brightness , ui )) ui . switch_page . valueChanged . connect ( partial ( update_switch_page , ui )) ui . imageButton . clicked . connect ( partial ( select_image , main_window )) ui . brightness . valueChanged . connect ( partial ( set_brightness , ui )) for deck_id , deck in api . open_decks () . items () : ui . device_list . addItem ( f \" {deck['type']} - {deck_id} \" , userData = deck_id ) build_device ( ui ) ui . device_list . currentIndexChanged . connect ( partial ( build_device , ui )) ui . pages . currentChanged . connect ( partial ( change_page , ui )) ui . actionExport . triggered . connect ( partial ( export_config , main_window )) ui . actionImport . triggered . connect ( partial ( import_config , main_window )) timer = QTimer () timer . timeout . connect ( partial ( sync , ui )) timer . start ( 1000 ) api . render () tray . show () main_window . show () if _exit : return else : sys . exit ( app . exec_ ()) sync def sync ( ui ) -> None View Source def sync ( ui ) -> None : api . ensure_decks_connected () ui . brightness . setValue ( api . get_brightness ( _deck_id ( ui ))) ui . pages . setCurrentIndex ( api . get_page ( _deck_id ( ui ))) update_button_command def update_button_command ( ui , command : str ) -> None View Source def update_button_command ( ui , command : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_command ( deck_id , _page ( ui ), selected_button . index , command ) update_button_keys def update_button_keys ( ui , keys : str ) -> None View Source def update_button_keys ( ui , keys : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_keys ( deck_id , _page ( ui ), selected_button . index , keys ) update_button_text def update_button_text ( ui , text : str ) -> None View Source def update_button_text ( ui , text : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_text ( deck_id , _page ( ui ), selected_button . index , text ) redraw_buttons ( ui ) update_button_write def update_button_write ( ui ) -> None View Source def update_button_write ( ui ) -> None : deck_id = _deck_id ( ui ) api . set_button_write ( deck_id , _page ( ui ), selected_button . index , ui . write . toPlainText ()) update_change_brightness def update_change_brightness ( ui , amount : int ) -> None View Source def update_change_brightness ( ui , amount : int ) -> None : deck_id = _deck_id ( ui ) api . set_button_change_brightness ( deck_id , _page ( ui ), selected_button . index , amount ) update_switch_page def update_switch_page ( ui , page : int ) -> None View Source def update_switch_page ( ui , page : int ) -> None : deck_id = _deck_id ( ui ) api . set_button_switch_page ( deck_id , _page ( ui ), selected_button . index , page ) Classes MainWindow class MainWindow ( ) QMainWindow(self, parent: typing.Union[PySide2.QtWidgets.QWidget, NoneType] = None, flags: PySide2.QtCore.Qt.WindowFlags = Default(Qt.WindowFlags)) View Source class MainWindow ( QMainWindow ) : def __init__ ( self ) : super ( MainWindow , self ) . __init__ () self . ui = Ui_MainWindow () self . ui . setupUi ( self ) self . window_shown : bool = True def closeEvent ( self , event ) -> None : # noqa : N802 - Part of QT signature . self . window_shown = False self . hide () event . ignore () def systray_clicked ( self , _status = None ) -> None : self . hide () if self . window_shown : self . window_shown = False return self . show () self . activateWindow () getattr ( self , \" raise \" )() # noqa : B009 - Can ' t call as self.raise() due to syntax error. self . window_shown = True Ancestors (in MRO) PySide2.QtWidgets.QMainWindow PySide2.QtWidgets.QWidget PySide2.QtCore.QObject PySide2.QtGui.QPaintDevice Shiboken.Object Class variables AllowNestedDocks AllowTabbedDocks AnimatedDocks DockOption DockOptions DrawChildren DrawWindowBackground ForceTabbedDocks GroupedDragging IgnoreMask PaintDeviceMetric PdmDepth PdmDevicePixelRatio PdmDevicePixelRatioScaled PdmDpiX PdmDpiY PdmHeight PdmHeightMM PdmNumColors PdmPhysicalDpiX PdmPhysicalDpiY PdmWidth PdmWidthMM RenderFlag RenderFlags VerticalTabs customContextMenuRequested destroyed iconSizeChanged objectNameChanged painters staticMetaObject tabifiedDockWidgetActivated toolButtonStyleChanged windowIconChanged windowIconTextChanged windowTitleChanged Static methods connect def connect ( ... ) connect(arg__1: PySide2.QtCore.QObject, arg__2: str, arg__3: typing.Callable, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> bool connect(arg__1: str, arg__2: typing.Callable, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> bool connect(arg__1: str, arg__2: PySide2.QtCore.QObject, arg__3: str, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> bool connect(sender: PySide2.QtCore.QObject, signal: PySide2.QtCore.QMetaMethod, receiver: PySide2.QtCore.QObject, method: PySide2.QtCore.QMetaMethod, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> PySide2.QtCore.QMetaObject.Connection connect(sender: PySide2.QtCore.QObject, signal: str, member: str, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> PySide2.QtCore.QMetaObject.Connection connect(sender: PySide2.QtCore.QObject, signal: str, receiver: PySide2.QtCore.QObject, member: str, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> PySide2.QtCore.QMetaObject.Connection createWindowContainer def createWindowContainer ( window : PySide2 . QtGui . QWindow , parent : typing . Union [ PySide2 . QtWidgets . QWidget , NoneType ] = None , flags : PySide2 . QtCore . Qt . WindowFlags = Default ( Qt . WindowFlags ) ) -> PySide2 . QtWidgets . QWidget createWindowContainer(window: PySide2.QtGui.QWindow, parent: typing.Union[PySide2.QtWidgets.QWidget, NoneType] = None, flags: PySide2.QtCore.Qt.WindowFlags = Default(Qt.WindowFlags)) -> PySide2.QtWidgets.QWidget devicePixelRatioFScale def devicePixelRatioFScale ( ) -> float devicePixelRatioFScale() -> float disconnect def disconnect ( ... ) disconnect(arg__1: PySide2.QtCore.QMetaObject.Connection) -> bool disconnect(arg__1: PySide2.QtCore.QObject, arg__2: str, arg__3: typing.Callable) -> bool disconnect(arg__1: str, arg__2: typing.Callable) -> bool disconnect(receiver: PySide2.QtCore.QObject, member: typing.Union[str, NoneType] = None) -> bool disconnect(sender: PySide2.QtCore.QObject, signal: PySide2.QtCore.QMetaMethod, receiver: PySide2.QtCore.QObject, member: PySide2.QtCore.QMetaMethod) -> bool disconnect(sender: PySide2.QtCore.QObject, signal: str, receiver: PySide2.QtCore.QObject, member: str) -> bool disconnect(signal: str, receiver: PySide2.QtCore.QObject, member: str) -> bool find def find ( arg__1 : int ) -> PySide2 . QtWidgets . QWidget find(arg__1: int) -> PySide2.QtWidgets.QWidget keyboardGrabber def keyboardGrabber ( ) -> PySide2 . QtWidgets . QWidget keyboardGrabber() -> PySide2.QtWidgets.QWidget mouseGrabber def mouseGrabber ( ) -> PySide2 . QtWidgets . QWidget mouseGrabber() -> PySide2.QtWidgets.QWidget registerUserData def registerUserData ( ) -> int registerUserData() -> int setTabOrder def setTabOrder ( arg__1 : PySide2 . QtWidgets . QWidget , arg__2 : PySide2 . QtWidgets . QWidget ) setTabOrder(arg__1: PySide2.QtWidgets.QWidget, arg__2: PySide2.QtWidgets.QWidget) Methods acceptDrops def acceptDrops ( self ) -> bool acceptDrops(self) -> bool accessibleDescription def accessibleDescription ( self ) -> str accessibleDescription(self) -> str accessibleName def accessibleName ( self ) -> str accessibleName(self) -> str actionEvent def actionEvent ( self , event : PySide2 . QtGui . QActionEvent ) actionEvent(self, event: PySide2.QtGui.QActionEvent) actions def actions ( self ) -> typing . List [ PySide2 . QtWidgets . QAction ] actions(self) -> typing.List[PySide2.QtWidgets.QAction] activateWindow def activateWindow ( self ) activateWindow(self) addAction def addAction ( self , action : PySide2 . QtWidgets . QAction ) addAction(self, action: PySide2.QtWidgets.QAction) addActions def addActions ( self , actions : typing . List [ PySide2 . QtWidgets . QAction ] ) addActions(self, actions: typing.List[PySide2.QtWidgets.QAction]) addDockWidget def addDockWidget ( ... ) addDockWidget(self, area: PySide2.QtCore.Qt.DockWidgetArea, dockwidget: PySide2.QtWidgets.QDockWidget) addDockWidget(self, area: PySide2.QtCore.Qt.DockWidgetArea, dockwidget: PySide2.QtWidgets.QDockWidget, orientation: PySide2.QtCore.Qt.Orientation) addToolBar def addToolBar ( ... ) addToolBar(self, area: PySide2.QtCore.Qt.ToolBarArea, toolbar: PySide2.QtWidgets.QToolBar) addToolBar(self, title: str) -> PySide2.QtWidgets.QToolBar addToolBar(self, toolbar: PySide2.QtWidgets.QToolBar) addToolBarBreak def addToolBarBreak ( self , area : PySide2 . QtCore . Qt . ToolBarArea = PySide2 . QtCore . Qt . ToolBarArea . TopToolBarArea ) addToolBarBreak(self, area: PySide2.QtCore.Qt.ToolBarArea = PySide2.QtCore.Qt.ToolBarArea.TopToolBarArea) adjustSize def adjustSize ( self ) adjustSize(self) autoFillBackground def autoFillBackground ( self ) -> bool autoFillBackground(self) -> bool backgroundRole def backgroundRole ( self ) -> PySide2 . QtGui . QPalette . ColorRole backgroundRole(self) -> PySide2.QtGui.QPalette.ColorRole backingStore def backingStore ( self ) -> PySide2 . QtGui . QBackingStore backingStore(self) -> PySide2.QtGui.QBackingStore baseSize def baseSize ( self ) -> PySide2 . QtCore . QSize baseSize(self) -> PySide2.QtCore.QSize blockSignals def blockSignals ( self , b : bool ) -> bool blockSignals(self, b: bool) -> bool centralWidget def centralWidget ( self ) -> PySide2 . QtWidgets . QWidget centralWidget(self) -> PySide2.QtWidgets.QWidget changeEvent def changeEvent ( self , event : PySide2 . QtCore . QEvent ) changeEvent(self, event: PySide2.QtCore.QEvent) childAt def childAt ( ... ) childAt(self, p: PySide2.QtCore.QPoint) -> PySide2.QtWidgets.QWidget childAt(self, x: int, y: int) -> PySide2.QtWidgets.QWidget childEvent def childEvent ( self , event : PySide2 . QtCore . QChildEvent ) childEvent(self, event: PySide2.QtCore.QChildEvent) children def children ( self ) -> typing . List [ PySide2 . QtCore . QObject ] children(self) -> typing.List[PySide2.QtCore.QObject] childrenRect def childrenRect ( self ) -> PySide2 . QtCore . QRect childrenRect(self) -> PySide2.QtCore.QRect childrenRegion def childrenRegion ( self ) -> PySide2 . QtGui . QRegion childrenRegion(self) -> PySide2.QtGui.QRegion clearFocus def clearFocus ( self ) clearFocus(self) clearMask def clearMask ( self ) clearMask(self) close def close ( self ) -> bool close(self) -> bool closeEvent def closeEvent ( self , event ) -> None closeEvent(self, event: PySide2.QtGui.QCloseEvent) View Source def closeEvent ( self , event ) -> None : # noqa : N802 - Part of QT signature . self . window_shown = False self . hide () event . ignore () colorCount def colorCount ( self ) -> int colorCount(self) -> int connectNotify def connectNotify ( self , signal : PySide2 . QtCore . QMetaMethod ) connectNotify(self, signal: PySide2.QtCore.QMetaMethod) contentsMargins def contentsMargins ( self ) -> PySide2 . QtCore . QMargins contentsMargins(self) -> PySide2.QtCore.QMargins contentsRect def contentsRect ( self ) -> PySide2 . QtCore . QRect contentsRect(self) -> PySide2.QtCore.QRect contextMenuEvent def contextMenuEvent ( self , event : PySide2 . QtGui . QContextMenuEvent ) contextMenuEvent(self, event: PySide2.QtGui.QContextMenuEvent) contextMenuPolicy def contextMenuPolicy ( self ) -> PySide2 . QtCore . Qt . ContextMenuPolicy contextMenuPolicy(self) -> PySide2.QtCore.Qt.ContextMenuPolicy corner def corner ( self , corner : PySide2 . QtCore . Qt . Corner ) -> PySide2 . QtCore . Qt . DockWidgetArea corner(self, corner: PySide2.QtCore.Qt.Corner) -> PySide2.QtCore.Qt.DockWidgetArea create def create ( self , arg__1 : int = 0 , initializeWindow : bool = True , destroyOldWindow : bool = True ) create(self, arg__1: int = 0, initializeWindow: bool = True, destroyOldWindow: bool = True) createPopupMenu def createPopupMenu ( self ) -> PySide2 . QtWidgets . QMenu createPopupMenu(self) -> PySide2.QtWidgets.QMenu createWinId def createWinId ( self ) createWinId(self) cursor def cursor ( self ) -> PySide2 . QtGui . QCursor cursor(self) -> PySide2.QtGui.QCursor customEvent def customEvent ( self , event : PySide2 . QtCore . QEvent ) customEvent(self, event: PySide2.QtCore.QEvent) deleteLater def deleteLater ( self ) deleteLater(self) depth def depth ( self ) -> int depth(self) -> int destroy def destroy ( self , destroyWindow : bool = True , destroySubWindows : bool = True ) destroy(self, destroyWindow: bool = True, destroySubWindows: bool = True) devType def devType ( self ) -> int devType(self) -> int devicePixelRatio def devicePixelRatio ( self ) -> int devicePixelRatio(self) -> int devicePixelRatioF def devicePixelRatioF ( self ) -> float devicePixelRatioF(self) -> float disconnectNotify def disconnectNotify ( self , signal : PySide2 . QtCore . QMetaMethod ) disconnectNotify(self, signal: PySide2.QtCore.QMetaMethod) dockOptions def dockOptions ( self ) -> PySide2 . QtWidgets . QMainWindow . DockOptions dockOptions(self) -> PySide2.QtWidgets.QMainWindow.DockOptions dockWidgetArea def dockWidgetArea ( self , dockwidget : PySide2 . QtWidgets . QDockWidget ) -> PySide2 . QtCore . Qt . DockWidgetArea dockWidgetArea(self, dockwidget: PySide2.QtWidgets.QDockWidget) -> PySide2.QtCore.Qt.DockWidgetArea documentMode def documentMode ( self ) -> bool documentMode(self) -> bool dragEnterEvent def dragEnterEvent ( self , event : PySide2 . QtGui . QDragEnterEvent ) dragEnterEvent(self, event: PySide2.QtGui.QDragEnterEvent) dragLeaveEvent def dragLeaveEvent ( self , event : PySide2 . QtGui . QDragLeaveEvent ) dragLeaveEvent(self, event: PySide2.QtGui.QDragLeaveEvent) dragMoveEvent def dragMoveEvent ( self , event : PySide2 . QtGui . QDragMoveEvent ) dragMoveEvent(self, event: PySide2.QtGui.QDragMoveEvent) dropEvent def dropEvent ( self , event : PySide2 . QtGui . QDropEvent ) dropEvent(self, event: PySide2.QtGui.QDropEvent) dumpObjectInfo def dumpObjectInfo ( self ) dumpObjectInfo(self) dumpObjectTree def dumpObjectTree ( self ) dumpObjectTree(self) dynamicPropertyNames def dynamicPropertyNames ( self ) -> typing . List [ PySide2 . QtCore . QByteArray ] dynamicPropertyNames(self) -> typing.List[PySide2.QtCore.QByteArray] effectiveWinId def effectiveWinId ( self ) -> int effectiveWinId(self) -> int emit def emit ( self , arg__1 : str , * args : None ) -> bool emit(self, arg__1: str, *args: None) -> bool ensurePolished def ensurePolished ( self ) ensurePolished(self) enterEvent def enterEvent ( self , event : PySide2 . QtCore . QEvent ) enterEvent(self, event: PySide2.QtCore.QEvent) event def event ( self , event : PySide2 . QtCore . QEvent ) -> bool event(self, event: PySide2.QtCore.QEvent) -> bool eventFilter def eventFilter ( self , watched : PySide2 . QtCore . QObject , event : PySide2 . QtCore . QEvent ) -> bool eventFilter(self, watched: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) -> bool findChild def findChild ( self , arg__1 : type , arg__2 : str = '' ) -> object findChild(self, arg__1: type, arg__2: str = '') -> object findChildren def findChildren ( ... ) findChildren(self, arg__1: type, arg__2: PySide2.QtCore.QRegExp) -> typing.Iterable findChildren(self, arg__1: type, arg__2: str = '') -> typing.Iterable focusInEvent def focusInEvent ( self , event : PySide2 . QtGui . QFocusEvent ) focusInEvent(self, event: PySide2.QtGui.QFocusEvent) focusNextChild def focusNextChild ( self ) -> bool focusNextChild(self) -> bool focusNextPrevChild def focusNextPrevChild ( self , next : bool ) -> bool focusNextPrevChild(self, next: bool) -> bool focusOutEvent def focusOutEvent ( self , event : PySide2 . QtGui . QFocusEvent ) focusOutEvent(self, event: PySide2.QtGui.QFocusEvent) focusPolicy def focusPolicy ( self ) -> PySide2 . QtCore . Qt . FocusPolicy focusPolicy(self) -> PySide2.QtCore.Qt.FocusPolicy focusPreviousChild def focusPreviousChild ( self ) -> bool focusPreviousChild(self) -> bool focusProxy def focusProxy ( self ) -> PySide2 . QtWidgets . QWidget focusProxy(self) -> PySide2.QtWidgets.QWidget focusWidget def focusWidget ( self ) -> PySide2 . QtWidgets . QWidget focusWidget(self) -> PySide2.QtWidgets.QWidget font def font ( self ) -> PySide2 . QtGui . QFont font(self) -> PySide2.QtGui.QFont fontInfo def fontInfo ( self ) -> PySide2 . QtGui . QFontInfo fontInfo(self) -> PySide2.QtGui.QFontInfo fontMetrics def fontMetrics ( self ) -> PySide2 . QtGui . QFontMetrics fontMetrics(self) -> PySide2.QtGui.QFontMetrics foregroundRole def foregroundRole ( self ) -> PySide2 . QtGui . QPalette . ColorRole foregroundRole(self) -> PySide2.QtGui.QPalette.ColorRole frameGeometry def frameGeometry ( self ) -> PySide2 . QtCore . QRect frameGeometry(self) -> PySide2.QtCore.QRect frameSize def frameSize ( self ) -> PySide2 . QtCore . QSize frameSize(self) -> PySide2.QtCore.QSize geometry def geometry ( self ) -> PySide2 . QtCore . QRect geometry(self) -> PySide2.QtCore.QRect getContentsMargins def getContentsMargins ( self , left : int , top : int , right : int , bottom : int ) getContentsMargins(self, left: int, top: int, right: int, bottom: int) grab def grab ( self , rectangle : PySide2 . QtCore . QRect = PySide2 . QtCore . QRect ( 0 , 0 , - 1 , - 1 ) ) -> PySide2 . QtGui . QPixmap grab(self, rectangle: PySide2.QtCore.QRect = PySide2.QtCore.QRect(0, 0, -1, -1)) -> PySide2.QtGui.QPixmap grabGesture def grabGesture ( self , type : PySide2 . QtCore . Qt . GestureType , flags : PySide2 . QtCore . Qt . GestureFlags = Default ( Qt . GestureFlags ) ) grabGesture(self, type: PySide2.QtCore.Qt.GestureType, flags: PySide2.QtCore.Qt.GestureFlags = Default(Qt.GestureFlags)) grabKeyboard def grabKeyboard ( self ) grabKeyboard(self) grabMouse def grabMouse ( ... ) grabMouse(self) grabMouse(self, arg__1: PySide2.QtGui.QCursor) grabShortcut def grabShortcut ( self , key : PySide2 . QtGui . QKeySequence , context : PySide2 . QtCore . Qt . ShortcutContext = PySide2 . QtCore . Qt . ShortcutContext . WindowShortcut ) -> int grabShortcut(self, key: PySide2.QtGui.QKeySequence, context: PySide2.QtCore.Qt.ShortcutContext = PySide2.QtCore.Qt.ShortcutContext.WindowShortcut) -> int graphicsEffect def graphicsEffect ( self ) -> PySide2 . QtWidgets . QGraphicsEffect graphicsEffect(self) -> PySide2.QtWidgets.QGraphicsEffect graphicsProxyWidget def graphicsProxyWidget ( self ) -> PySide2 . QtWidgets . QGraphicsProxyWidget graphicsProxyWidget(self) -> PySide2.QtWidgets.QGraphicsProxyWidget hasFocus def hasFocus ( self ) -> bool hasFocus(self) -> bool hasHeightForWidth def hasHeightForWidth ( self ) -> bool hasHeightForWidth(self) -> bool hasMouseTracking def hasMouseTracking ( self ) -> bool hasMouseTracking(self) -> bool hasTabletTracking def hasTabletTracking ( self ) -> bool hasTabletTracking(self) -> bool height def height ( self ) -> int height(self) -> int heightForWidth def heightForWidth ( self , arg__1 : int ) -> int heightForWidth(self, arg__1: int) -> int heightMM def heightMM ( self ) -> int heightMM(self) -> int hide def hide ( self ) hide(self) hideEvent def hideEvent ( self , event : PySide2 . QtGui . QHideEvent ) hideEvent(self, event: PySide2.QtGui.QHideEvent) iconSize def iconSize ( self ) -> PySide2 . QtCore . QSize iconSize(self) -> PySide2.QtCore.QSize inherits def inherits ( self , classname : str ) -> bool inherits(self, classname: str) -> bool initPainter def initPainter ( self , painter : PySide2 . QtGui . QPainter ) initPainter(self, painter: PySide2.QtGui.QPainter) inputMethodEvent def inputMethodEvent ( self , event : PySide2 . QtGui . QInputMethodEvent ) inputMethodEvent(self, event: PySide2.QtGui.QInputMethodEvent) inputMethodHints def inputMethodHints ( self ) -> PySide2 . QtCore . Qt . InputMethodHints inputMethodHints(self) -> PySide2.QtCore.Qt.InputMethodHints inputMethodQuery def inputMethodQuery ( self , arg__1 : PySide2 . QtCore . Qt . InputMethodQuery ) -> typing . Any inputMethodQuery(self, arg__1: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any insertAction def insertAction ( self , before : PySide2 . QtWidgets . QAction , action : PySide2 . QtWidgets . QAction ) insertAction(self, before: PySide2.QtWidgets.QAction, action: PySide2.QtWidgets.QAction) insertActions def insertActions ( self , before : PySide2 . QtWidgets . QAction , actions : typing . List [ PySide2 . QtWidgets . QAction ] ) insertActions(self, before: PySide2.QtWidgets.QAction, actions: typing.List[PySide2.QtWidgets.QAction]) insertToolBar def insertToolBar ( self , before : PySide2 . QtWidgets . QToolBar , toolbar : PySide2 . QtWidgets . QToolBar ) insertToolBar(self, before: PySide2.QtWidgets.QToolBar, toolbar: PySide2.QtWidgets.QToolBar) insertToolBarBreak def insertToolBarBreak ( self , before : PySide2 . QtWidgets . QToolBar ) insertToolBarBreak(self, before: PySide2.QtWidgets.QToolBar) installEventFilter def installEventFilter ( self , filterObj : PySide2 . QtCore . QObject ) installEventFilter(self, filterObj: PySide2.QtCore.QObject) internalWinId def internalWinId ( self ) -> int internalWinId(self) -> int isActiveWindow def isActiveWindow ( self ) -> bool isActiveWindow(self) -> bool isAncestorOf def isAncestorOf ( self , child : PySide2 . QtWidgets . QWidget ) -> bool isAncestorOf(self, child: PySide2.QtWidgets.QWidget) -> bool isAnimated def isAnimated ( self ) -> bool isAnimated(self) -> bool isDockNestingEnabled def isDockNestingEnabled ( self ) -> bool isDockNestingEnabled(self) -> bool isEnabled def isEnabled ( self ) -> bool isEnabled(self) -> bool isEnabledTo def isEnabledTo ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> bool isEnabledTo(self, arg__1: PySide2.QtWidgets.QWidget) -> bool isEnabledToTLW def isEnabledToTLW ( self ) -> bool isEnabledToTLW(self) -> bool isFullScreen def isFullScreen ( self ) -> bool isFullScreen(self) -> bool isHidden def isHidden ( self ) -> bool isHidden(self) -> bool isLeftToRight def isLeftToRight ( self ) -> bool isLeftToRight(self) -> bool isMaximized def isMaximized ( self ) -> bool isMaximized(self) -> bool isMinimized def isMinimized ( self ) -> bool isMinimized(self) -> bool isModal def isModal ( self ) -> bool isModal(self) -> bool isRightToLeft def isRightToLeft ( self ) -> bool isRightToLeft(self) -> bool isSeparator def isSeparator ( self , pos : PySide2 . QtCore . QPoint ) -> bool isSeparator(self, pos: PySide2.QtCore.QPoint) -> bool isSignalConnected def isSignalConnected ( self , signal : PySide2 . QtCore . QMetaMethod ) -> bool isSignalConnected(self, signal: PySide2.QtCore.QMetaMethod) -> bool isTopLevel def isTopLevel ( self ) -> bool isTopLevel(self) -> bool isVisible def isVisible ( self ) -> bool isVisible(self) -> bool isVisibleTo def isVisibleTo ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> bool isVisibleTo(self, arg__1: PySide2.QtWidgets.QWidget) -> bool isWidgetType def isWidgetType ( self ) -> bool isWidgetType(self) -> bool isWindow def isWindow ( self ) -> bool isWindow(self) -> bool isWindowModified def isWindowModified ( self ) -> bool isWindowModified(self) -> bool isWindowType def isWindowType ( self ) -> bool isWindowType(self) -> bool keyPressEvent def keyPressEvent ( self , event : PySide2 . QtGui . QKeyEvent ) keyPressEvent(self, event: PySide2.QtGui.QKeyEvent) keyReleaseEvent def keyReleaseEvent ( self , event : PySide2 . QtGui . QKeyEvent ) keyReleaseEvent(self, event: PySide2.QtGui.QKeyEvent) killTimer def killTimer ( self , id : int ) killTimer(self, id: int) layout def layout ( self ) -> PySide2 . QtWidgets . QLayout layout(self) -> PySide2.QtWidgets.QLayout layoutDirection def layoutDirection ( self ) -> PySide2 . QtCore . Qt . LayoutDirection layoutDirection(self) -> PySide2.QtCore.Qt.LayoutDirection leaveEvent def leaveEvent ( self , event : PySide2 . QtCore . QEvent ) leaveEvent(self, event: PySide2.QtCore.QEvent) locale def locale ( self ) -> PySide2 . QtCore . QLocale locale(self) -> PySide2.QtCore.QLocale logicalDpiX def logicalDpiX ( self ) -> int logicalDpiX(self) -> int logicalDpiY def logicalDpiY ( self ) -> int logicalDpiY(self) -> int lower def lower ( self ) lower(self) mapFrom def mapFrom ( self , arg__1 : PySide2 . QtWidgets . QWidget , arg__2 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapFrom(self, arg__1: PySide2.QtWidgets.QWidget, arg__2: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint mapFromGlobal def mapFromGlobal ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapFromGlobal(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint mapFromParent def mapFromParent ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapFromParent(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint mapTo def mapTo ( self , arg__1 : PySide2 . QtWidgets . QWidget , arg__2 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapTo(self, arg__1: PySide2.QtWidgets.QWidget, arg__2: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint mapToGlobal def mapToGlobal ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapToGlobal(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint mapToParent def mapToParent ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapToParent(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint mask def mask ( self ) -> PySide2 . QtGui . QRegion mask(self) -> PySide2.QtGui.QRegion maximumHeight def maximumHeight ( self ) -> int maximumHeight(self) -> int maximumSize def maximumSize ( self ) -> PySide2 . QtCore . QSize maximumSize(self) -> PySide2.QtCore.QSize maximumWidth def maximumWidth ( self ) -> int maximumWidth(self) -> int menuBar def menuBar ( self ) -> PySide2 . QtWidgets . QMenuBar menuBar(self) -> PySide2.QtWidgets.QMenuBar menuWidget def menuWidget ( self ) -> PySide2 . QtWidgets . QWidget menuWidget(self) -> PySide2.QtWidgets.QWidget metaObject def metaObject ( self ) -> PySide2 . QtCore . QMetaObject metaObject(self) -> PySide2.QtCore.QMetaObject metric def metric ( self , arg__1 : PySide2 . QtGui . QPaintDevice . PaintDeviceMetric ) -> int metric(self, arg__1: PySide2.QtGui.QPaintDevice.PaintDeviceMetric) -> int minimumHeight def minimumHeight ( self ) -> int minimumHeight(self) -> int minimumSize def minimumSize ( self ) -> PySide2 . QtCore . QSize minimumSize(self) -> PySide2.QtCore.QSize minimumSizeHint def minimumSizeHint ( self ) -> PySide2 . QtCore . QSize minimumSizeHint(self) -> PySide2.QtCore.QSize minimumWidth def minimumWidth ( self ) -> int minimumWidth(self) -> int mouseDoubleClickEvent def mouseDoubleClickEvent ( self , event : PySide2 . QtGui . QMouseEvent ) mouseDoubleClickEvent(self, event: PySide2.QtGui.QMouseEvent) mouseMoveEvent def mouseMoveEvent ( self , event : PySide2 . QtGui . QMouseEvent ) mouseMoveEvent(self, event: PySide2.QtGui.QMouseEvent) mousePressEvent def mousePressEvent ( self , event : PySide2 . QtGui . QMouseEvent ) mousePressEvent(self, event: PySide2.QtGui.QMouseEvent) mouseReleaseEvent def mouseReleaseEvent ( self , event : PySide2 . QtGui . QMouseEvent ) mouseReleaseEvent(self, event: PySide2.QtGui.QMouseEvent) move def move ( ... ) move(self, arg__1: PySide2.QtCore.QPoint) move(self, x: int, y: int) moveEvent def moveEvent ( self , event : PySide2 . QtGui . QMoveEvent ) moveEvent(self, event: PySide2.QtGui.QMoveEvent) moveToThread def moveToThread ( self , thread : PySide2 . QtCore . QThread ) moveToThread(self, thread: PySide2.QtCore.QThread) nativeEvent def nativeEvent ( self , eventType : PySide2 . QtCore . QByteArray , message : int , result : int ) -> bool nativeEvent(self, eventType: PySide2.QtCore.QByteArray, message: int, result: int) -> bool nativeParentWidget def nativeParentWidget ( self ) -> PySide2 . QtWidgets . QWidget nativeParentWidget(self) -> PySide2.QtWidgets.QWidget nextInFocusChain def nextInFocusChain ( self ) -> PySide2 . QtWidgets . QWidget nextInFocusChain(self) -> PySide2.QtWidgets.QWidget normalGeometry def normalGeometry ( self ) -> PySide2 . QtCore . QRect normalGeometry(self) -> PySide2.QtCore.QRect objectName def objectName ( self ) -> str objectName(self) -> str overrideWindowFlags def overrideWindowFlags ( self , type : PySide2 . QtCore . Qt . WindowFlags ) overrideWindowFlags(self, type: PySide2.QtCore.Qt.WindowFlags) overrideWindowState def overrideWindowState ( self , state : PySide2 . QtCore . Qt . WindowStates ) overrideWindowState(self, state: PySide2.QtCore.Qt.WindowStates) paintEngine def paintEngine ( self ) -> PySide2 . QtGui . QPaintEngine paintEngine(self) -> PySide2.QtGui.QPaintEngine paintEvent def paintEvent ( self , event : PySide2 . QtGui . QPaintEvent ) paintEvent(self, event: PySide2.QtGui.QPaintEvent) paintingActive def paintingActive ( self ) -> bool paintingActive(self) -> bool palette def palette ( self ) -> PySide2 . QtGui . QPalette palette(self) -> PySide2.QtGui.QPalette parent def parent ( self ) -> PySide2 . QtCore . QObject parent(self) -> PySide2.QtCore.QObject parentWidget def parentWidget ( self ) -> PySide2 . QtWidgets . QWidget parentWidget(self) -> PySide2.QtWidgets.QWidget physicalDpiX def physicalDpiX ( self ) -> int physicalDpiX(self) -> int physicalDpiY def physicalDpiY ( self ) -> int physicalDpiY(self) -> int pos def pos ( self ) -> PySide2 . QtCore . QPoint pos(self) -> PySide2.QtCore.QPoint previousInFocusChain def previousInFocusChain ( self ) -> PySide2 . QtWidgets . QWidget previousInFocusChain(self) -> PySide2.QtWidgets.QWidget property def property ( self , name : str ) -> typing . Any property(self, name: str) -> typing.Any raise_ def raise_ ( self ) raise_(self) receivers def receivers ( self , signal : str ) -> int receivers(self, signal: str) -> int rect def rect ( self ) -> PySide2 . QtCore . QRect rect(self) -> PySide2.QtCore.QRect redirected def redirected ( self , offset : PySide2 . QtCore . QPoint ) -> PySide2 . QtGui . QPaintDevice redirected(self, offset: PySide2.QtCore.QPoint) -> PySide2.QtGui.QPaintDevice releaseKeyboard def releaseKeyboard ( self ) releaseKeyboard(self) releaseMouse def releaseMouse ( self ) releaseMouse(self) releaseShortcut def releaseShortcut ( self , id : int ) releaseShortcut(self, id: int) removeAction def removeAction ( self , action : PySide2 . QtWidgets . QAction ) removeAction(self, action: PySide2.QtWidgets.QAction) removeDockWidget def removeDockWidget ( self , dockwidget : PySide2 . QtWidgets . QDockWidget ) removeDockWidget(self, dockwidget: PySide2.QtWidgets.QDockWidget) removeEventFilter def removeEventFilter ( self , obj : PySide2 . QtCore . QObject ) removeEventFilter(self, obj: PySide2.QtCore.QObject) removeToolBar def removeToolBar ( self , toolbar : PySide2 . QtWidgets . QToolBar ) removeToolBar(self, toolbar: PySide2.QtWidgets.QToolBar) removeToolBarBreak def removeToolBarBreak ( self , before : PySide2 . QtWidgets . QToolBar ) removeToolBarBreak(self, before: PySide2.QtWidgets.QToolBar) render def render ( ... ) render(self, painter: PySide2.QtGui.QPainter, targetOffset: PySide2.QtCore.QPoint, sourceRegion: PySide2.QtGui.QRegion = Default(QRegion), renderFlags: PySide2.QtWidgets.QWidget.RenderFlags = Instance(QWidget.RenderFlags(QWidget.DrawWindowBackground | QWidget.DrawChildren))) render(self, target: PySide2.QtGui.QPaintDevice, targetOffset: PySide2.QtCore.QPoint = Default(QPoint), sourceRegion: PySide2.QtGui.QRegion = Default(QRegion), renderFlags: PySide2.QtWidgets.QWidget.RenderFlags = Instance(QWidget.RenderFlags(QWidget.DrawWindowBackground | QWidget.DrawChildren))) repaint def repaint ( ... ) repaint(self) repaint(self, arg__1: PySide2.QtCore.QRect) repaint(self, arg__1: PySide2.QtGui.QRegion) repaint(self, x: int, y: int, w: int, h: int) resize def resize ( ... ) resize(self, arg__1: PySide2.QtCore.QSize) resize(self, w: int, h: int) resizeDocks def resizeDocks ( self , docks : typing . List [ PySide2 . QtWidgets . QDockWidget ], sizes : typing . List [ int ], orientation : PySide2 . QtCore . Qt . Orientation ) resizeDocks(self, docks: typing.List[PySide2.QtWidgets.QDockWidget], sizes: typing.List[int], orientation: PySide2.QtCore.Qt.Orientation) resizeEvent def resizeEvent ( self , event : PySide2 . QtGui . QResizeEvent ) resizeEvent(self, event: PySide2.QtGui.QResizeEvent) restoreDockWidget def restoreDockWidget ( self , dockwidget : PySide2 . QtWidgets . QDockWidget ) -> bool restoreDockWidget(self, dockwidget: PySide2.QtWidgets.QDockWidget) -> bool restoreGeometry def restoreGeometry ( self , geometry : PySide2 . QtCore . QByteArray ) -> bool restoreGeometry(self, geometry: PySide2.QtCore.QByteArray) -> bool restoreState def restoreState ( self , state : PySide2 . QtCore . QByteArray , version : int = 0 ) -> bool restoreState(self, state: PySide2.QtCore.QByteArray, version: int = 0) -> bool saveGeometry def saveGeometry ( self ) -> PySide2 . QtCore . QByteArray saveGeometry(self) -> PySide2.QtCore.QByteArray saveState def saveState ( self , version : int = 0 ) -> PySide2 . QtCore . QByteArray saveState(self, version: int = 0) -> PySide2.QtCore.QByteArray scroll def scroll ( ... ) scroll(self, dx: int, dy: int) scroll(self, dx: int, dy: int, arg__3: PySide2.QtCore.QRect) sender def sender ( self ) -> PySide2 . QtCore . QObject sender(self) -> PySide2.QtCore.QObject senderSignalIndex def senderSignalIndex ( self ) -> int senderSignalIndex(self) -> int setAcceptDrops def setAcceptDrops ( self , on : bool ) setAcceptDrops(self, on: bool) setAccessibleDescription def setAccessibleDescription ( self , description : str ) setAccessibleDescription(self, description: str) setAccessibleName def setAccessibleName ( self , name : str ) setAccessibleName(self, name: str) setAnimated def setAnimated ( self , enabled : bool ) setAnimated(self, enabled: bool) setAttribute def setAttribute ( self , arg__1 : PySide2 . QtCore . Qt . WidgetAttribute , on : bool = True ) setAttribute(self, arg__1: PySide2.QtCore.Qt.WidgetAttribute, on: bool = True) setAutoFillBackground def setAutoFillBackground ( self , enabled : bool ) setAutoFillBackground(self, enabled: bool) setBackgroundRole def setBackgroundRole ( self , arg__1 : PySide2 . QtGui . QPalette . ColorRole ) setBackgroundRole(self, arg__1: PySide2.QtGui.QPalette.ColorRole) setBaseSize def setBaseSize ( ... ) setBaseSize(self, arg__1: PySide2.QtCore.QSize) setBaseSize(self, basew: int, baseh: int) setCentralWidget def setCentralWidget ( self , widget : PySide2 . QtWidgets . QWidget ) setCentralWidget(self, widget: PySide2.QtWidgets.QWidget) setContentsMargins def setContentsMargins ( ... ) setContentsMargins(self, left: int, top: int, right: int, bottom: int) setContentsMargins(self, margins: PySide2.QtCore.QMargins) setContextMenuPolicy def setContextMenuPolicy ( self , policy : PySide2 . QtCore . Qt . ContextMenuPolicy ) setContextMenuPolicy(self, policy: PySide2.QtCore.Qt.ContextMenuPolicy) setCorner def setCorner ( self , corner : PySide2 . QtCore . Qt . Corner , area : PySide2 . QtCore . Qt . DockWidgetArea ) setCorner(self, corner: PySide2.QtCore.Qt.Corner, area: PySide2.QtCore.Qt.DockWidgetArea) setCursor def setCursor ( self , arg__1 : PySide2 . QtGui . QCursor ) setCursor(self, arg__1: PySide2.QtGui.QCursor) setDisabled def setDisabled ( self , arg__1 : bool ) setDisabled(self, arg__1: bool) setDockNestingEnabled def setDockNestingEnabled ( self , enabled : bool ) setDockNestingEnabled(self, enabled: bool) setDockOptions def setDockOptions ( self , options : PySide2 . QtWidgets . QMainWindow . DockOptions ) setDockOptions(self, options: PySide2.QtWidgets.QMainWindow.DockOptions) setDocumentMode def setDocumentMode ( self , enabled : bool ) setDocumentMode(self, enabled: bool) setEnabled def setEnabled ( self , arg__1 : bool ) setEnabled(self, arg__1: bool) setFixedHeight def setFixedHeight ( self , h : int ) setFixedHeight(self, h: int) setFixedSize def setFixedSize ( ... ) setFixedSize(self, arg__1: PySide2.QtCore.QSize) setFixedSize(self, w: int, h: int) setFixedWidth def setFixedWidth ( self , w : int ) setFixedWidth(self, w: int) setFocus def setFocus ( ... ) setFocus(self) setFocus(self, reason: PySide2.QtCore.Qt.FocusReason) setFocusPolicy def setFocusPolicy ( self , policy : PySide2 . QtCore . Qt . FocusPolicy ) setFocusPolicy(self, policy: PySide2.QtCore.Qt.FocusPolicy) setFocusProxy def setFocusProxy ( self , arg__1 : PySide2 . QtWidgets . QWidget ) setFocusProxy(self, arg__1: PySide2.QtWidgets.QWidget) setFont def setFont ( self , arg__1 : PySide2 . QtGui . QFont ) setFont(self, arg__1: PySide2.QtGui.QFont) setForegroundRole def setForegroundRole ( self , arg__1 : PySide2 . QtGui . QPalette . ColorRole ) setForegroundRole(self, arg__1: PySide2.QtGui.QPalette.ColorRole) setGeometry def setGeometry ( ... ) setGeometry(self, arg__1: PySide2.QtCore.QRect) setGeometry(self, x: int, y: int, w: int, h: int) setGraphicsEffect def setGraphicsEffect ( self , effect : PySide2 . QtWidgets . QGraphicsEffect ) setGraphicsEffect(self, effect: PySide2.QtWidgets.QGraphicsEffect) setHidden def setHidden ( self , hidden : bool ) setHidden(self, hidden: bool) setIconSize def setIconSize ( self , iconSize : PySide2 . QtCore . QSize ) setIconSize(self, iconSize: PySide2.QtCore.QSize) setInputMethodHints def setInputMethodHints ( self , hints : PySide2 . QtCore . Qt . InputMethodHints ) setInputMethodHints(self, hints: PySide2.QtCore.Qt.InputMethodHints) setLayout def setLayout ( self , arg__1 : PySide2 . QtWidgets . QLayout ) setLayout(self, arg__1: PySide2.QtWidgets.QLayout) setLayoutDirection def setLayoutDirection ( self , direction : PySide2 . QtCore . Qt . LayoutDirection ) setLayoutDirection(self, direction: PySide2.QtCore.Qt.LayoutDirection) setLocale def setLocale ( self , locale : PySide2 . QtCore . QLocale ) setLocale(self, locale: PySide2.QtCore.QLocale) setMask def setMask ( ... ) setMask(self, arg__1: PySide2.QtGui.QBitmap) setMask(self, arg__1: PySide2.QtGui.QRegion) setMaximumHeight def setMaximumHeight ( self , maxh : int ) setMaximumHeight(self, maxh: int) setMaximumSize def setMaximumSize ( ... ) setMaximumSize(self, arg__1: PySide2.QtCore.QSize) setMaximumSize(self, maxw: int, maxh: int) setMaximumWidth def setMaximumWidth ( self , maxw : int ) setMaximumWidth(self, maxw: int) setMenuBar def setMenuBar ( self , menubar : PySide2 . QtWidgets . QMenuBar ) setMenuBar(self, menubar: PySide2.QtWidgets.QMenuBar) setMenuWidget def setMenuWidget ( self , menubar : PySide2 . QtWidgets . QWidget ) setMenuWidget(self, menubar: PySide2.QtWidgets.QWidget) setMinimumHeight def setMinimumHeight ( self , minh : int ) setMinimumHeight(self, minh: int) setMinimumSize def setMinimumSize ( ... ) setMinimumSize(self, arg__1: PySide2.QtCore.QSize) setMinimumSize(self, minw: int, minh: int) setMinimumWidth def setMinimumWidth ( self , minw : int ) setMinimumWidth(self, minw: int) setMouseTracking def setMouseTracking ( self , enable : bool ) setMouseTracking(self, enable: bool) setObjectName def setObjectName ( self , name : str ) setObjectName(self, name: str) setPalette def setPalette ( self , arg__1 : PySide2 . QtGui . QPalette ) setPalette(self, arg__1: PySide2.QtGui.QPalette) setParent def setParent ( ... ) setParent(self, parent: PySide2.QtWidgets.QWidget) setParent(self, parent: PySide2.QtWidgets.QWidget, f: PySide2.QtCore.Qt.WindowFlags) setProperty def setProperty ( self , name : str , value : typing . Any ) -> bool setProperty(self, name: str, value: typing.Any) -> bool setShortcutAutoRepeat def setShortcutAutoRepeat ( self , id : int , enable : bool = True ) setShortcutAutoRepeat(self, id: int, enable: bool = True) setShortcutEnabled def setShortcutEnabled ( self , id : int , enable : bool = True ) setShortcutEnabled(self, id: int, enable: bool = True) setSizeIncrement def setSizeIncrement ( ... ) setSizeIncrement(self, arg__1: PySide2.QtCore.QSize) setSizeIncrement(self, w: int, h: int) setSizePolicy def setSizePolicy ( ... ) setSizePolicy(self, arg__1: PySide2.QtWidgets.QSizePolicy) setSizePolicy(self, horizontal: PySide2.QtWidgets.QSizePolicy.Policy, vertical: PySide2.QtWidgets.QSizePolicy.Policy) setStatusBar def setStatusBar ( self , statusbar : PySide2 . QtWidgets . QStatusBar ) setStatusBar(self, statusbar: PySide2.QtWidgets.QStatusBar) setStatusTip def setStatusTip ( self , arg__1 : str ) setStatusTip(self, arg__1: str) setStyle def setStyle ( self , arg__1 : PySide2 . QtWidgets . QStyle ) setStyle(self, arg__1: PySide2.QtWidgets.QStyle) setStyleSheet def setStyleSheet ( self , styleSheet : str ) setStyleSheet(self, styleSheet: str) setTabPosition def setTabPosition ( self , areas : PySide2 . QtCore . Qt . DockWidgetAreas , tabPosition : PySide2 . QtWidgets . QTabWidget . TabPosition ) setTabPosition(self, areas: PySide2.QtCore.Qt.DockWidgetAreas, tabPosition: PySide2.QtWidgets.QTabWidget.TabPosition) setTabShape def setTabShape ( self , tabShape : PySide2 . QtWidgets . QTabWidget . TabShape ) setTabShape(self, tabShape: PySide2.QtWidgets.QTabWidget.TabShape) setTabletTracking def setTabletTracking ( self , enable : bool ) setTabletTracking(self, enable: bool) setToolButtonStyle def setToolButtonStyle ( self , toolButtonStyle : PySide2 . QtCore . Qt . ToolButtonStyle ) setToolButtonStyle(self, toolButtonStyle: PySide2.QtCore.Qt.ToolButtonStyle) setToolTip def setToolTip ( self , arg__1 : str ) setToolTip(self, arg__1: str) setToolTipDuration def setToolTipDuration ( self , msec : int ) setToolTipDuration(self, msec: int) setUnifiedTitleAndToolBarOnMac def setUnifiedTitleAndToolBarOnMac ( self , set : bool ) setUnifiedTitleAndToolBarOnMac(self, set: bool) setUpdatesEnabled def setUpdatesEnabled ( self , enable : bool ) setUpdatesEnabled(self, enable: bool) setVisible def setVisible ( self , visible : bool ) setVisible(self, visible: bool) setWhatsThis def setWhatsThis ( self , arg__1 : str ) setWhatsThis(self, arg__1: str) setWindowFilePath def setWindowFilePath ( self , filePath : str ) setWindowFilePath(self, filePath: str) setWindowFlag def setWindowFlag ( self , arg__1 : PySide2 . QtCore . Qt . WindowType , on : bool = True ) setWindowFlag(self, arg__1: PySide2.QtCore.Qt.WindowType, on: bool = True) setWindowFlags def setWindowFlags ( self , type : PySide2 . QtCore . Qt . WindowFlags ) setWindowFlags(self, type: PySide2.QtCore.Qt.WindowFlags) setWindowIcon def setWindowIcon ( self , icon : PySide2 . QtGui . QIcon ) setWindowIcon(self, icon: PySide2.QtGui.QIcon) setWindowIconText def setWindowIconText ( self , arg__1 : str ) setWindowIconText(self, arg__1: str) setWindowModality def setWindowModality ( self , windowModality : PySide2 . QtCore . Qt . WindowModality ) setWindowModality(self, windowModality: PySide2.QtCore.Qt.WindowModality) setWindowModified def setWindowModified ( self , arg__1 : bool ) setWindowModified(self, arg__1: bool) setWindowOpacity def setWindowOpacity ( self , level : float ) setWindowOpacity(self, level: float) setWindowRole def setWindowRole ( self , arg__1 : str ) setWindowRole(self, arg__1: str) setWindowState def setWindowState ( self , state : PySide2 . QtCore . Qt . WindowStates ) setWindowState(self, state: PySide2.QtCore.Qt.WindowStates) setWindowTitle def setWindowTitle ( self , arg__1 : str ) setWindowTitle(self, arg__1: str) sharedPainter def sharedPainter ( self ) -> PySide2 . QtGui . QPainter sharedPainter(self) -> PySide2.QtGui.QPainter show def show ( self ) show(self) showEvent def showEvent ( self , event : PySide2 . QtGui . QShowEvent ) showEvent(self, event: PySide2.QtGui.QShowEvent) showFullScreen def showFullScreen ( self ) showFullScreen(self) showMaximized def showMaximized ( self ) showMaximized(self) showMinimized def showMinimized ( self ) showMinimized(self) showNormal def showNormal ( self ) showNormal(self) signalsBlocked def signalsBlocked ( self ) -> bool signalsBlocked(self) -> bool size def size ( self ) -> PySide2 . QtCore . QSize size(self) -> PySide2.QtCore.QSize sizeHint def sizeHint ( self ) -> PySide2 . QtCore . QSize sizeHint(self) -> PySide2.QtCore.QSize sizeIncrement def sizeIncrement ( self ) -> PySide2 . QtCore . QSize sizeIncrement(self) -> PySide2.QtCore.QSize sizePolicy def sizePolicy ( self ) -> PySide2 . QtWidgets . QSizePolicy sizePolicy(self) -> PySide2.QtWidgets.QSizePolicy splitDockWidget def splitDockWidget ( self , after : PySide2 . QtWidgets . QDockWidget , dockwidget : PySide2 . QtWidgets . QDockWidget , orientation : PySide2 . QtCore . Qt . Orientation ) splitDockWidget(self, after: PySide2.QtWidgets.QDockWidget, dockwidget: PySide2.QtWidgets.QDockWidget, orientation: PySide2.QtCore.Qt.Orientation) stackUnder def stackUnder ( self , arg__1 : PySide2 . QtWidgets . QWidget ) stackUnder(self, arg__1: PySide2.QtWidgets.QWidget) startTimer def startTimer ( self , interval : int , timerType : PySide2 . QtCore . Qt . TimerType = PySide2 . QtCore . Qt . TimerType . CoarseTimer ) -> int startTimer(self, interval: int, timerType: PySide2.QtCore.Qt.TimerType = PySide2.QtCore.Qt.TimerType.CoarseTimer) -> int statusBar def statusBar ( self ) -> PySide2 . QtWidgets . QStatusBar statusBar(self) -> PySide2.QtWidgets.QStatusBar statusTip def statusTip ( self ) -> str statusTip(self) -> str style def style ( self ) -> PySide2 . QtWidgets . QStyle style(self) -> PySide2.QtWidgets.QStyle styleSheet def styleSheet ( self ) -> str styleSheet(self) -> str systray_clicked def systray_clicked ( self , _status = None ) -> None View Source def systray_clicked ( self , _status = None ) -> None : self . hide () if self . window_shown : self . window_shown = False return self . show () self . activateWindow () getattr ( self , \" raise \" )() # noqa : B009 - Can ' t call as self.raise() due to syntax error. self . window_shown = True tabPosition def tabPosition ( self , area : PySide2 . QtCore . Qt . DockWidgetArea ) -> PySide2 . QtWidgets . QTabWidget . TabPosition tabPosition(self, area: PySide2.QtCore.Qt.DockWidgetArea) -> PySide2.QtWidgets.QTabWidget.TabPosition tabShape def tabShape ( self ) -> PySide2 . QtWidgets . QTabWidget . TabShape tabShape(self) -> PySide2.QtWidgets.QTabWidget.TabShape tabifiedDockWidgets def tabifiedDockWidgets ( self , dockwidget : PySide2 . QtWidgets . QDockWidget ) -> typing . List [ PySide2 . QtWidgets . QDockWidget ] tabifiedDockWidgets(self, dockwidget: PySide2.QtWidgets.QDockWidget) -> typing.List[PySide2.QtWidgets.QDockWidget] tabifyDockWidget def tabifyDockWidget ( self , first : PySide2 . QtWidgets . QDockWidget , second : PySide2 . QtWidgets . QDockWidget ) tabifyDockWidget(self, first: PySide2.QtWidgets.QDockWidget, second: PySide2.QtWidgets.QDockWidget) tabletEvent def tabletEvent ( self , event : PySide2 . QtGui . QTabletEvent ) tabletEvent(self, event: PySide2.QtGui.QTabletEvent) takeCentralWidget def takeCentralWidget ( self ) -> PySide2 . QtWidgets . QWidget takeCentralWidget(self) -> PySide2.QtWidgets.QWidget testAttribute def testAttribute ( self , arg__1 : PySide2 . QtCore . Qt . WidgetAttribute ) -> bool testAttribute(self, arg__1: PySide2.QtCore.Qt.WidgetAttribute) -> bool thread def thread ( self ) -> PySide2 . QtCore . QThread thread(self) -> PySide2.QtCore.QThread timerEvent def timerEvent ( self , event : PySide2 . QtCore . QTimerEvent ) timerEvent(self, event: PySide2.QtCore.QTimerEvent) toolBarArea def toolBarArea ( self , toolbar : PySide2 . QtWidgets . QToolBar ) -> PySide2 . QtCore . Qt . ToolBarArea toolBarArea(self, toolbar: PySide2.QtWidgets.QToolBar) -> PySide2.QtCore.Qt.ToolBarArea toolBarBreak def toolBarBreak ( self , toolbar : PySide2 . QtWidgets . QToolBar ) -> bool toolBarBreak(self, toolbar: PySide2.QtWidgets.QToolBar) -> bool toolButtonStyle def toolButtonStyle ( self ) -> PySide2 . QtCore . Qt . ToolButtonStyle toolButtonStyle(self) -> PySide2.QtCore.Qt.ToolButtonStyle toolTip def toolTip ( self ) -> str toolTip(self) -> str toolTipDuration def toolTipDuration ( self ) -> int toolTipDuration(self) -> int topLevelWidget def topLevelWidget ( self ) -> PySide2 . QtWidgets . QWidget topLevelWidget(self) -> PySide2.QtWidgets.QWidget tr def tr ( self , arg__1 : str , arg__2 : str = '' , arg__3 : int = - 1 ) -> str tr(self, arg__1: str, arg__2: str = '', arg__3: int = -1) -> str underMouse def underMouse ( self ) -> bool underMouse(self) -> bool ungrabGesture def ungrabGesture ( self , type : PySide2 . QtCore . Qt . GestureType ) ungrabGesture(self, type: PySide2.QtCore.Qt.GestureType) unifiedTitleAndToolBarOnMac def unifiedTitleAndToolBarOnMac ( self ) -> bool unifiedTitleAndToolBarOnMac(self) -> bool unsetCursor def unsetCursor ( self ) unsetCursor(self) unsetLayoutDirection def unsetLayoutDirection ( self ) unsetLayoutDirection(self) unsetLocale def unsetLocale ( self ) unsetLocale(self) update def update ( ... ) update(self) update(self, arg__1: PySide2.QtCore.QRect) update(self, arg__1: PySide2.QtGui.QRegion) update(self, x: int, y: int, w: int, h: int) updateGeometry def updateGeometry ( self ) updateGeometry(self) updateMicroFocus def updateMicroFocus ( self ) updateMicroFocus(self) updatesEnabled def updatesEnabled ( self ) -> bool updatesEnabled(self) -> bool visibleRegion def visibleRegion ( self ) -> PySide2 . QtGui . QRegion visibleRegion(self) -> PySide2.QtGui.QRegion whatsThis def whatsThis ( self ) -> str whatsThis(self) -> str wheelEvent def wheelEvent ( self , event : PySide2 . QtGui . QWheelEvent ) wheelEvent(self, event: PySide2.QtGui.QWheelEvent) width def width ( self ) -> int width(self) -> int widthMM def widthMM ( self ) -> int widthMM(self) -> int winId def winId ( self ) -> int winId(self) -> int window def window ( self ) -> PySide2 . QtWidgets . QWidget window(self) -> PySide2.QtWidgets.QWidget windowFilePath def windowFilePath ( self ) -> str windowFilePath(self) -> str windowFlags def windowFlags ( self ) -> PySide2 . QtCore . Qt . WindowFlags windowFlags(self) -> PySide2.QtCore.Qt.WindowFlags windowHandle def windowHandle ( self ) -> PySide2 . QtGui . QWindow windowHandle(self) -> PySide2.QtGui.QWindow windowIcon def windowIcon ( self ) -> PySide2 . QtGui . QIcon windowIcon(self) -> PySide2.QtGui.QIcon windowIconText def windowIconText ( self ) -> str windowIconText(self) -> str windowModality def windowModality ( self ) -> PySide2 . QtCore . Qt . WindowModality windowModality(self) -> PySide2.QtCore.Qt.WindowModality windowOpacity def windowOpacity ( self ) -> float windowOpacity(self) -> float windowRole def windowRole ( self ) -> str windowRole(self) -> str windowState def windowState ( self ) -> PySide2 . QtCore . Qt . WindowStates windowState(self) -> PySide2.QtCore.Qt.WindowStates windowTitle def windowTitle ( self ) -> str windowTitle(self) -> str windowType def windowType ( self ) -> PySide2 . QtCore . Qt . WindowType windowType(self) -> PySide2.QtCore.Qt.WindowType x def x ( self ) -> int x(self) -> int y def y ( self ) -> int y(self) -> int","title":"Gui"},{"location":"reference/streamdeck_ui/gui/#module-streamdeck_uigui","text":"Defines the QT powered interface for configuring Stream Decks View Source \"\"\"Defines the QT powered interface for configuring Stream Decks\"\"\" import os import sys from functools import partial from PySide2 import QtWidgets from PySide2.QtCore import QSize , Qt , QTimer from PySide2.QtGui import QIcon from PySide2.QtUiTools import QUiLoader from PySide2.QtWidgets import ( QAction , QApplication , QFileDialog , QMainWindow , QMenu , QSizePolicy , QSystemTrayIcon , ) from streamdeck_ui import api from streamdeck_ui.config import LOGO , PROJECT_PATH from streamdeck_ui.ui_main import Ui_MainWindow BUTTON_SYTLE = \"\"\" QToolButton{background-color:black;} QToolButton:checked{background-color:darkGray;} QToolButton:focus{border:none; } \"\"\" selected_button : QtWidgets . QToolButton text_timer = None def _deck_id ( ui ) -> str : return ui . device_list . itemData ( ui . device_list . currentIndex ()) def _page ( ui ) -> int : return ui . pages . currentIndex () def update_button_text ( ui , text : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_text ( deck_id , _page ( ui ), selected_button . index , text ) redraw_buttons ( ui ) def update_button_command ( ui , command : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_command ( deck_id , _page ( ui ), selected_button . index , command ) def update_button_keys ( ui , keys : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_keys ( deck_id , _page ( ui ), selected_button . index , keys ) def update_button_write ( ui ) -> None : deck_id = _deck_id ( ui ) api . set_button_write ( deck_id , _page ( ui ), selected_button . index , ui . write . toPlainText ()) def update_change_brightness ( ui , amount : int ) -> None : deck_id = _deck_id ( ui ) api . set_button_change_brightness ( deck_id , _page ( ui ), selected_button . index , amount ) def update_switch_page ( ui , page : int ) -> None : deck_id = _deck_id ( ui ) api . set_button_switch_page ( deck_id , _page ( ui ), selected_button . index , page ) def _highlight_first_button ( ui ) -> None : button = ui . pages . currentWidget () . findChildren ( QtWidgets . QToolButton )[ 0 ] button . setChecked ( False ) button . click () def change_page ( ui , page : int ) -> None : api . set_page ( _deck_id ( ui ), page ) redraw_buttons ( ui ) _highlight_first_button ( ui ) def select_image ( window ) -> None : file_name = QFileDialog . getOpenFileName ( window , \"Open Image\" , os . path . expanduser ( \"~\" ), \"Image Files (*.png *.jpg *.bmp)\" )[ 0 ] deck_id = _deck_id ( window . ui ) api . set_button_icon ( deck_id , _page ( window . ui ), selected_button . index , file_name ) redraw_buttons ( window . ui ) def redraw_buttons ( ui ) -> None : deck_id = _deck_id ( ui ) current_tab = ui . pages . currentWidget () buttons = current_tab . findChildren ( QtWidgets . QToolButton ) for button in buttons : button . setText ( api . get_button_text ( deck_id , _page ( ui ), button . index )) button . setIcon ( QIcon ( api . get_button_icon ( deck_id , _page ( ui ), button . index ))) def set_brightness ( ui , value : int ) -> None : deck_id = _deck_id ( ui ) api . set_brightness ( deck_id , value ) def button_clicked ( ui , clicked_button , buttons ) -> None : global selected_button selected_button = clicked_button for button in buttons : if button == clicked_button : continue button . setChecked ( False ) deck_id = _deck_id ( ui ) button_id = selected_button . index ui . text . setText ( api . get_button_text ( deck_id , _page ( ui ), button_id )) ui . command . setText ( api . get_button_command ( deck_id , _page ( ui ), button_id )) ui . keys . setText ( api . get_button_keys ( deck_id , _page ( ui ), button_id )) ui . write . setPlainText ( api . get_button_write ( deck_id , _page ( ui ), button_id )) ui . change_brightness . setValue ( api . get_button_change_brightness ( deck_id , _page ( ui ), button_id )) ui . switch_page . setValue ( api . get_button_switch_page ( deck_id , _page ( ui ), button_id )) def build_buttons ( ui , tab ) -> None : deck_id = _deck_id ( ui ) deck = api . get_deck ( deck_id ) if hasattr ( tab , \"deck_buttons\" ): tab . deck_buttons . hide () tab . deck_buttons . deleteLater () base_widget = QtWidgets . QWidget ( tab ) tab . children ()[ 0 ] . addWidget ( base_widget ) tab . deck_buttons = base_widget row_layout = QtWidgets . QVBoxLayout ( base_widget ) index = 0 buttons = [] for _row in range ( deck [ \"layout\" ][ 0 ]): # type: ignore column_layout = QtWidgets . QHBoxLayout () row_layout . addLayout ( column_layout ) for _column in range ( deck [ \"layout\" ][ 1 ]): # type: ignore button = QtWidgets . QToolButton ( base_widget ) button . setCheckable ( True ) button . index = index button . setSizePolicy ( QSizePolicy . MinimumExpanding , QSizePolicy . MinimumExpanding ) button . setToolButtonStyle ( Qt . ToolButtonTextUnderIcon ) button . setIconSize ( QSize ( 100 , 100 )) button . setStyleSheet ( BUTTON_SYTLE ) buttons . append ( button ) column_layout . addWidget ( button ) index += 1 for button in buttons : button . clicked . connect ( lambda button = button , buttons = buttons : button_clicked ( ui , button , buttons ) ) redraw_buttons ( ui ) tab . hide () tab . show () def export_config ( window ) -> None : file_name = QFileDialog . getSaveFileName ( window , \"Export Config\" , os . path . expanduser ( \"~/streamdeck_ui_export.json\" ), \"JSON (*.json)\" )[ 0 ] if not file_name : return api . export_config ( file_name ) def import_config ( window ) -> None : file_name = QFileDialog . getOpenFileName ( window , \"Import Config\" , os . path . expanduser ( \"~\" ), \"Config Files (*.json)\" )[ 0 ] if not file_name : return api . import_config ( file_name ) redraw_buttons ( window . ui ) def sync ( ui ) -> None : api . ensure_decks_connected () ui . brightness . setValue ( api . get_brightness ( _deck_id ( ui ))) ui . pages . setCurrentIndex ( api . get_page ( _deck_id ( ui ))) def build_device ( ui , _device_index = None ) -> None : for page_id in range ( ui . pages . count ()): page = ui . pages . widget ( page_id ) page . setStyleSheet ( \"background-color: black\" ) build_buttons ( ui , page ) sync ( ui ) _highlight_first_button ( ui ) class MainWindow ( QMainWindow ): def __init__ ( self ): super ( MainWindow , self ) . __init__ () self . ui = Ui_MainWindow () self . ui . setupUi ( self ) self . window_shown : bool = True def closeEvent ( self , event ) -> None : # noqa: N802 - Part of QT signature. self . window_shown = False self . hide () event . ignore () def systray_clicked ( self , _status = None ) -> None : self . hide () if self . window_shown : self . window_shown = False return self . show () self . activateWindow () getattr ( self , \"raise\" )() # noqa: B009 - Can't call as self.raise() due to syntax error. self . window_shown = True def queue_text_change ( ui , text : str ) -> None : global text_timer if text_timer : text_timer . stop () text_timer = QTimer () text_timer . setSingleShot ( True ) text_timer . timeout . connect ( partial ( update_button_text , ui , text )) text_timer . start ( 500 ) def start ( _exit : bool = False ) -> None : app = QApplication ( sys . argv ) logo = QIcon ( LOGO ) main_window = MainWindow () ui = main_window . ui main_window . setWindowIcon ( logo ) tray = QSystemTrayIcon ( logo , app ) tray . activated . connect ( main_window . systray_clicked ) menu = QMenu () action_exit = QAction ( \"Exit\" ) action_exit . triggered . connect ( app . exit ) menu . addAction ( action_exit ) tray . setContextMenu ( menu ) ui . text . textChanged . connect ( partial ( queue_text_change , ui )) ui . command . textChanged . connect ( partial ( update_button_command , ui )) ui . keys . textChanged . connect ( partial ( update_button_keys , ui )) ui . write . textChanged . connect ( partial ( update_button_write , ui )) ui . change_brightness . valueChanged . connect ( partial ( update_change_brightness , ui )) ui . switch_page . valueChanged . connect ( partial ( update_switch_page , ui )) ui . imageButton . clicked . connect ( partial ( select_image , main_window )) ui . brightness . valueChanged . connect ( partial ( set_brightness , ui )) for deck_id , deck in api . open_decks () . items (): ui . device_list . addItem ( f \"{deck['type']} - {deck_id}\" , userData = deck_id ) build_device ( ui ) ui . device_list . currentIndexChanged . connect ( partial ( build_device , ui )) ui . pages . currentChanged . connect ( partial ( change_page , ui )) ui . actionExport . triggered . connect ( partial ( export_config , main_window )) ui . actionImport . triggered . connect ( partial ( import_config , main_window )) timer = QTimer () timer . timeout . connect ( partial ( sync , ui )) timer . start ( 1000 ) api . render () tray . show () main_window . show () if _exit : return else : sys . exit ( app . exec_ ()) if __name__ == \"__main__\" : start ()","title":"Module streamdeck_ui.gui"},{"location":"reference/streamdeck_ui/gui/#variables","text":"BUTTON_SYTLE LOGO PROJECT_PATH text_timer","title":"Variables"},{"location":"reference/streamdeck_ui/gui/#functions","text":"","title":"Functions"},{"location":"reference/streamdeck_ui/gui/#build_buttons","text":"def build_buttons ( ui , tab ) -> None View Source def build_buttons ( ui , tab ) -> None : deck_id = _deck_id ( ui ) deck = api . get_deck ( deck_id ) if hasattr ( tab , \" deck_buttons \" ) : tab . deck_buttons . hide () tab . deck_buttons . deleteLater () base_widget = QtWidgets . QWidget ( tab ) tab . children () [ 0 ]. addWidget ( base_widget ) tab . deck_buttons = base_widget row_layout = QtWidgets . QVBoxLayout ( base_widget ) index = 0 buttons = [] for _row in range ( deck [ \" layout \" ][ 0 ] ) : # type : ignore column_layout = QtWidgets . QHBoxLayout () row_layout . addLayout ( column_layout ) for _column in range ( deck [ \" layout \" ][ 1 ] ) : # type : ignore button = QtWidgets . QToolButton ( base_widget ) button . setCheckable ( True ) button . index = index button . setSizePolicy ( QSizePolicy . MinimumExpanding , QSizePolicy . MinimumExpanding ) button . setToolButtonStyle ( Qt . ToolButtonTextUnderIcon ) button . setIconSize ( QSize ( 100 , 100 )) button . setStyleSheet ( BUTTON_SYTLE ) buttons . append ( button ) column_layout . addWidget ( button ) index += 1 for button in buttons : button . clicked . connect ( lambda button = button , buttons = buttons : button_clicked ( ui , button , buttons ) ) redraw_buttons ( ui ) tab . hide () tab . show ()","title":"build_buttons"},{"location":"reference/streamdeck_ui/gui/#build_device","text":"def build_device ( ui , _device_index = None ) -> None View Source def build_device ( ui , _device_index = None ) -> None : for page_id in range ( ui . pages . count ()) : page = ui . pages . widget ( page_id ) page . setStyleSheet ( \" background-color: black \" ) build_buttons ( ui , page ) sync ( ui ) _highlight_first_button ( ui )","title":"build_device"},{"location":"reference/streamdeck_ui/gui/#button_clicked","text":"def button_clicked ( ui , clicked_button , buttons ) -> None View Source def button_clicked ( ui , clicked_button , buttons ) -> None : global selected_button selected_button = clicked_button for button in buttons : if button == clicked_button : continue button . setChecked ( False ) deck_id = _deck_id ( ui ) button_id = selected_button . index ui . text . setText ( api . get_button_text ( deck_id , _page ( ui ) , button_id )) ui . command . setText ( api . get_button_command ( deck_id , _page ( ui ) , button_id )) ui . keys . setText ( api . get_button_keys ( deck_id , _page ( ui ) , button_id )) ui . write . setPlainText ( api . get_button_write ( deck_id , _page ( ui ) , button_id )) ui . change_brightness . setValue ( api . get_button_change_brightness ( deck_id , _page ( ui ) , button_id )) ui . switch_page . setValue ( api . get_button_switch_page ( deck_id , _page ( ui ) , button_id ))","title":"button_clicked"},{"location":"reference/streamdeck_ui/gui/#change_page","text":"def change_page ( ui , page : int ) -> None View Source def change_page ( ui , page : int ) -> None : api . set_page ( _deck_id ( ui ), page ) redraw_buttons ( ui ) _highlight_first_button ( ui )","title":"change_page"},{"location":"reference/streamdeck_ui/gui/#export_config","text":"def export_config ( window ) -> None View Source def export_config ( window ) -> None : file_name = QFileDialog . getSaveFileName ( window , \" Export Config \" , os . path . expanduser ( \" ~/streamdeck_ui_export.json \" ) , \" JSON (*.json) \" ) [ 0 ] if not file_name : return api . export_config ( file_name )","title":"export_config"},{"location":"reference/streamdeck_ui/gui/#import_config","text":"def import_config ( window ) -> None View Source def import_config ( window ) -> None : file_name = QFileDialog . getOpenFileName ( window , \" Import Config \" , os . path . expanduser ( \" ~ \" ) , \" Config Files (*.json) \" ) [ 0 ] if not file_name : return api . import_config ( file_name ) redraw_buttons ( window . ui )","title":"import_config"},{"location":"reference/streamdeck_ui/gui/#queue_text_change","text":"def queue_text_change ( ui , text : str ) -> None View Source def queue_text_change ( ui , text : str ) -> None : global text_timer if text_timer : text_timer . stop () text_timer = QTimer () text_timer . setSingleShot ( True ) text_timer . timeout . connect ( partial ( update_button_text , ui , text )) text_timer . start ( 500 )","title":"queue_text_change"},{"location":"reference/streamdeck_ui/gui/#redraw_buttons","text":"def redraw_buttons ( ui ) -> None View Source def redraw_buttons ( ui ) -> None : deck_id = _deck_id ( ui ) current_tab = ui . pages . currentWidget () buttons = current_tab . findChildren ( QtWidgets . QToolButton ) for button in buttons : button . setText ( api . get_button_text ( deck_id , _page ( ui ) , button . index )) button . setIcon ( QIcon ( api . get_button_icon ( deck_id , _page ( ui ) , button . index )))","title":"redraw_buttons"},{"location":"reference/streamdeck_ui/gui/#select_image","text":"def select_image ( window ) -> None View Source def select_image ( window ) -> None : file_name = QFileDialog . getOpenFileName ( window , \"Open Image\" , os . path . expanduser ( \"~\" ), \"Image Files (*.png *.jpg *.bmp)\" )[ 0 ] deck_id = _deck_id ( window . ui ) api . set_button_icon ( deck_id , _page ( window . ui ), selected_button . index , file_name ) redraw_buttons ( window . ui )","title":"select_image"},{"location":"reference/streamdeck_ui/gui/#set_brightness","text":"def set_brightness ( ui , value : int ) -> None View Source def set_brightness ( ui , value : int ) -> None : deck_id = _deck_id ( ui ) api . set_brightness ( deck_id , value )","title":"set_brightness"},{"location":"reference/streamdeck_ui/gui/#start","text":"def start ( _exit : bool = False ) -> None View Source def start ( _exit : bool = False ) -> None : app = QApplication ( sys . argv ) logo = QIcon ( LOGO ) main_window = MainWindow () ui = main_window . ui main_window . setWindowIcon ( logo ) tray = QSystemTrayIcon ( logo , app ) tray . activated . connect ( main_window . systray_clicked ) menu = QMenu () action_exit = QAction ( \" Exit \" ) action_exit . triggered . connect ( app . exit ) menu . addAction ( action_exit ) tray . setContextMenu ( menu ) ui . text . textChanged . connect ( partial ( queue_text_change , ui )) ui . command . textChanged . connect ( partial ( update_button_command , ui )) ui . keys . textChanged . connect ( partial ( update_button_keys , ui )) ui . write . textChanged . connect ( partial ( update_button_write , ui )) ui . change_brightness . valueChanged . connect ( partial ( update_change_brightness , ui )) ui . switch_page . valueChanged . connect ( partial ( update_switch_page , ui )) ui . imageButton . clicked . connect ( partial ( select_image , main_window )) ui . brightness . valueChanged . connect ( partial ( set_brightness , ui )) for deck_id , deck in api . open_decks () . items () : ui . device_list . addItem ( f \" {deck['type']} - {deck_id} \" , userData = deck_id ) build_device ( ui ) ui . device_list . currentIndexChanged . connect ( partial ( build_device , ui )) ui . pages . currentChanged . connect ( partial ( change_page , ui )) ui . actionExport . triggered . connect ( partial ( export_config , main_window )) ui . actionImport . triggered . connect ( partial ( import_config , main_window )) timer = QTimer () timer . timeout . connect ( partial ( sync , ui )) timer . start ( 1000 ) api . render () tray . show () main_window . show () if _exit : return else : sys . exit ( app . exec_ ())","title":"start"},{"location":"reference/streamdeck_ui/gui/#sync","text":"def sync ( ui ) -> None View Source def sync ( ui ) -> None : api . ensure_decks_connected () ui . brightness . setValue ( api . get_brightness ( _deck_id ( ui ))) ui . pages . setCurrentIndex ( api . get_page ( _deck_id ( ui )))","title":"sync"},{"location":"reference/streamdeck_ui/gui/#update_button_command","text":"def update_button_command ( ui , command : str ) -> None View Source def update_button_command ( ui , command : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_command ( deck_id , _page ( ui ), selected_button . index , command )","title":"update_button_command"},{"location":"reference/streamdeck_ui/gui/#update_button_keys","text":"def update_button_keys ( ui , keys : str ) -> None View Source def update_button_keys ( ui , keys : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_keys ( deck_id , _page ( ui ), selected_button . index , keys )","title":"update_button_keys"},{"location":"reference/streamdeck_ui/gui/#update_button_text","text":"def update_button_text ( ui , text : str ) -> None View Source def update_button_text ( ui , text : str ) -> None : deck_id = _deck_id ( ui ) api . set_button_text ( deck_id , _page ( ui ), selected_button . index , text ) redraw_buttons ( ui )","title":"update_button_text"},{"location":"reference/streamdeck_ui/gui/#update_button_write","text":"def update_button_write ( ui ) -> None View Source def update_button_write ( ui ) -> None : deck_id = _deck_id ( ui ) api . set_button_write ( deck_id , _page ( ui ), selected_button . index , ui . write . toPlainText ())","title":"update_button_write"},{"location":"reference/streamdeck_ui/gui/#update_change_brightness","text":"def update_change_brightness ( ui , amount : int ) -> None View Source def update_change_brightness ( ui , amount : int ) -> None : deck_id = _deck_id ( ui ) api . set_button_change_brightness ( deck_id , _page ( ui ), selected_button . index , amount )","title":"update_change_brightness"},{"location":"reference/streamdeck_ui/gui/#update_switch_page","text":"def update_switch_page ( ui , page : int ) -> None View Source def update_switch_page ( ui , page : int ) -> None : deck_id = _deck_id ( ui ) api . set_button_switch_page ( deck_id , _page ( ui ), selected_button . index , page )","title":"update_switch_page"},{"location":"reference/streamdeck_ui/gui/#classes","text":"","title":"Classes"},{"location":"reference/streamdeck_ui/gui/#mainwindow","text":"class MainWindow ( ) QMainWindow(self, parent: typing.Union[PySide2.QtWidgets.QWidget, NoneType] = None, flags: PySide2.QtCore.Qt.WindowFlags = Default(Qt.WindowFlags)) View Source class MainWindow ( QMainWindow ) : def __init__ ( self ) : super ( MainWindow , self ) . __init__ () self . ui = Ui_MainWindow () self . ui . setupUi ( self ) self . window_shown : bool = True def closeEvent ( self , event ) -> None : # noqa : N802 - Part of QT signature . self . window_shown = False self . hide () event . ignore () def systray_clicked ( self , _status = None ) -> None : self . hide () if self . window_shown : self . window_shown = False return self . show () self . activateWindow () getattr ( self , \" raise \" )() # noqa : B009 - Can ' t call as self.raise() due to syntax error. self . window_shown = True","title":"MainWindow"},{"location":"reference/streamdeck_ui/gui/#ancestors-in-mro","text":"PySide2.QtWidgets.QMainWindow PySide2.QtWidgets.QWidget PySide2.QtCore.QObject PySide2.QtGui.QPaintDevice Shiboken.Object","title":"Ancestors (in MRO)"},{"location":"reference/streamdeck_ui/gui/#class-variables","text":"AllowNestedDocks AllowTabbedDocks AnimatedDocks DockOption DockOptions DrawChildren DrawWindowBackground ForceTabbedDocks GroupedDragging IgnoreMask PaintDeviceMetric PdmDepth PdmDevicePixelRatio PdmDevicePixelRatioScaled PdmDpiX PdmDpiY PdmHeight PdmHeightMM PdmNumColors PdmPhysicalDpiX PdmPhysicalDpiY PdmWidth PdmWidthMM RenderFlag RenderFlags VerticalTabs customContextMenuRequested destroyed iconSizeChanged objectNameChanged painters staticMetaObject tabifiedDockWidgetActivated toolButtonStyleChanged windowIconChanged windowIconTextChanged windowTitleChanged","title":"Class variables"},{"location":"reference/streamdeck_ui/gui/#static-methods","text":"","title":"Static methods"},{"location":"reference/streamdeck_ui/gui/#connect","text":"def connect ( ... ) connect(arg__1: PySide2.QtCore.QObject, arg__2: str, arg__3: typing.Callable, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> bool connect(arg__1: str, arg__2: typing.Callable, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> bool connect(arg__1: str, arg__2: PySide2.QtCore.QObject, arg__3: str, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> bool connect(sender: PySide2.QtCore.QObject, signal: PySide2.QtCore.QMetaMethod, receiver: PySide2.QtCore.QObject, method: PySide2.QtCore.QMetaMethod, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> PySide2.QtCore.QMetaObject.Connection connect(sender: PySide2.QtCore.QObject, signal: str, member: str, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> PySide2.QtCore.QMetaObject.Connection connect(sender: PySide2.QtCore.QObject, signal: str, receiver: PySide2.QtCore.QObject, member: str, type: PySide2.QtCore.Qt.ConnectionType = PySide2.QtCore.Qt.ConnectionType.AutoConnection) -> PySide2.QtCore.QMetaObject.Connection","title":"connect"},{"location":"reference/streamdeck_ui/gui/#createwindowcontainer","text":"def createWindowContainer ( window : PySide2 . QtGui . QWindow , parent : typing . Union [ PySide2 . QtWidgets . QWidget , NoneType ] = None , flags : PySide2 . QtCore . Qt . WindowFlags = Default ( Qt . WindowFlags ) ) -> PySide2 . QtWidgets . QWidget createWindowContainer(window: PySide2.QtGui.QWindow, parent: typing.Union[PySide2.QtWidgets.QWidget, NoneType] = None, flags: PySide2.QtCore.Qt.WindowFlags = Default(Qt.WindowFlags)) -> PySide2.QtWidgets.QWidget","title":"createWindowContainer"},{"location":"reference/streamdeck_ui/gui/#devicepixelratiofscale","text":"def devicePixelRatioFScale ( ) -> float devicePixelRatioFScale() -> float","title":"devicePixelRatioFScale"},{"location":"reference/streamdeck_ui/gui/#disconnect","text":"def disconnect ( ... ) disconnect(arg__1: PySide2.QtCore.QMetaObject.Connection) -> bool disconnect(arg__1: PySide2.QtCore.QObject, arg__2: str, arg__3: typing.Callable) -> bool disconnect(arg__1: str, arg__2: typing.Callable) -> bool disconnect(receiver: PySide2.QtCore.QObject, member: typing.Union[str, NoneType] = None) -> bool disconnect(sender: PySide2.QtCore.QObject, signal: PySide2.QtCore.QMetaMethod, receiver: PySide2.QtCore.QObject, member: PySide2.QtCore.QMetaMethod) -> bool disconnect(sender: PySide2.QtCore.QObject, signal: str, receiver: PySide2.QtCore.QObject, member: str) -> bool disconnect(signal: str, receiver: PySide2.QtCore.QObject, member: str) -> bool","title":"disconnect"},{"location":"reference/streamdeck_ui/gui/#find","text":"def find ( arg__1 : int ) -> PySide2 . QtWidgets . QWidget find(arg__1: int) -> PySide2.QtWidgets.QWidget","title":"find"},{"location":"reference/streamdeck_ui/gui/#keyboardgrabber","text":"def keyboardGrabber ( ) -> PySide2 . QtWidgets . QWidget keyboardGrabber() -> PySide2.QtWidgets.QWidget","title":"keyboardGrabber"},{"location":"reference/streamdeck_ui/gui/#mousegrabber","text":"def mouseGrabber ( ) -> PySide2 . QtWidgets . QWidget mouseGrabber() -> PySide2.QtWidgets.QWidget","title":"mouseGrabber"},{"location":"reference/streamdeck_ui/gui/#registeruserdata","text":"def registerUserData ( ) -> int registerUserData() -> int","title":"registerUserData"},{"location":"reference/streamdeck_ui/gui/#settaborder","text":"def setTabOrder ( arg__1 : PySide2 . QtWidgets . QWidget , arg__2 : PySide2 . QtWidgets . QWidget ) setTabOrder(arg__1: PySide2.QtWidgets.QWidget, arg__2: PySide2.QtWidgets.QWidget)","title":"setTabOrder"},{"location":"reference/streamdeck_ui/gui/#methods","text":"","title":"Methods"},{"location":"reference/streamdeck_ui/gui/#acceptdrops","text":"def acceptDrops ( self ) -> bool acceptDrops(self) -> bool","title":"acceptDrops"},{"location":"reference/streamdeck_ui/gui/#accessibledescription","text":"def accessibleDescription ( self ) -> str accessibleDescription(self) -> str","title":"accessibleDescription"},{"location":"reference/streamdeck_ui/gui/#accessiblename","text":"def accessibleName ( self ) -> str accessibleName(self) -> str","title":"accessibleName"},{"location":"reference/streamdeck_ui/gui/#actionevent","text":"def actionEvent ( self , event : PySide2 . QtGui . QActionEvent ) actionEvent(self, event: PySide2.QtGui.QActionEvent)","title":"actionEvent"},{"location":"reference/streamdeck_ui/gui/#actions","text":"def actions ( self ) -> typing . List [ PySide2 . QtWidgets . QAction ] actions(self) -> typing.List[PySide2.QtWidgets.QAction]","title":"actions"},{"location":"reference/streamdeck_ui/gui/#activatewindow","text":"def activateWindow ( self ) activateWindow(self)","title":"activateWindow"},{"location":"reference/streamdeck_ui/gui/#addaction","text":"def addAction ( self , action : PySide2 . QtWidgets . QAction ) addAction(self, action: PySide2.QtWidgets.QAction)","title":"addAction"},{"location":"reference/streamdeck_ui/gui/#addactions","text":"def addActions ( self , actions : typing . List [ PySide2 . QtWidgets . QAction ] ) addActions(self, actions: typing.List[PySide2.QtWidgets.QAction])","title":"addActions"},{"location":"reference/streamdeck_ui/gui/#adddockwidget","text":"def addDockWidget ( ... ) addDockWidget(self, area: PySide2.QtCore.Qt.DockWidgetArea, dockwidget: PySide2.QtWidgets.QDockWidget) addDockWidget(self, area: PySide2.QtCore.Qt.DockWidgetArea, dockwidget: PySide2.QtWidgets.QDockWidget, orientation: PySide2.QtCore.Qt.Orientation)","title":"addDockWidget"},{"location":"reference/streamdeck_ui/gui/#addtoolbar","text":"def addToolBar ( ... ) addToolBar(self, area: PySide2.QtCore.Qt.ToolBarArea, toolbar: PySide2.QtWidgets.QToolBar) addToolBar(self, title: str) -> PySide2.QtWidgets.QToolBar addToolBar(self, toolbar: PySide2.QtWidgets.QToolBar)","title":"addToolBar"},{"location":"reference/streamdeck_ui/gui/#addtoolbarbreak","text":"def addToolBarBreak ( self , area : PySide2 . QtCore . Qt . ToolBarArea = PySide2 . QtCore . Qt . ToolBarArea . TopToolBarArea ) addToolBarBreak(self, area: PySide2.QtCore.Qt.ToolBarArea = PySide2.QtCore.Qt.ToolBarArea.TopToolBarArea)","title":"addToolBarBreak"},{"location":"reference/streamdeck_ui/gui/#adjustsize","text":"def adjustSize ( self ) adjustSize(self)","title":"adjustSize"},{"location":"reference/streamdeck_ui/gui/#autofillbackground","text":"def autoFillBackground ( self ) -> bool autoFillBackground(self) -> bool","title":"autoFillBackground"},{"location":"reference/streamdeck_ui/gui/#backgroundrole","text":"def backgroundRole ( self ) -> PySide2 . QtGui . QPalette . ColorRole backgroundRole(self) -> PySide2.QtGui.QPalette.ColorRole","title":"backgroundRole"},{"location":"reference/streamdeck_ui/gui/#backingstore","text":"def backingStore ( self ) -> PySide2 . QtGui . QBackingStore backingStore(self) -> PySide2.QtGui.QBackingStore","title":"backingStore"},{"location":"reference/streamdeck_ui/gui/#basesize","text":"def baseSize ( self ) -> PySide2 . QtCore . QSize baseSize(self) -> PySide2.QtCore.QSize","title":"baseSize"},{"location":"reference/streamdeck_ui/gui/#blocksignals","text":"def blockSignals ( self , b : bool ) -> bool blockSignals(self, b: bool) -> bool","title":"blockSignals"},{"location":"reference/streamdeck_ui/gui/#centralwidget","text":"def centralWidget ( self ) -> PySide2 . QtWidgets . QWidget centralWidget(self) -> PySide2.QtWidgets.QWidget","title":"centralWidget"},{"location":"reference/streamdeck_ui/gui/#changeevent","text":"def changeEvent ( self , event : PySide2 . QtCore . QEvent ) changeEvent(self, event: PySide2.QtCore.QEvent)","title":"changeEvent"},{"location":"reference/streamdeck_ui/gui/#childat","text":"def childAt ( ... ) childAt(self, p: PySide2.QtCore.QPoint) -> PySide2.QtWidgets.QWidget childAt(self, x: int, y: int) -> PySide2.QtWidgets.QWidget","title":"childAt"},{"location":"reference/streamdeck_ui/gui/#childevent","text":"def childEvent ( self , event : PySide2 . QtCore . QChildEvent ) childEvent(self, event: PySide2.QtCore.QChildEvent)","title":"childEvent"},{"location":"reference/streamdeck_ui/gui/#children","text":"def children ( self ) -> typing . List [ PySide2 . QtCore . QObject ] children(self) -> typing.List[PySide2.QtCore.QObject]","title":"children"},{"location":"reference/streamdeck_ui/gui/#childrenrect","text":"def childrenRect ( self ) -> PySide2 . QtCore . QRect childrenRect(self) -> PySide2.QtCore.QRect","title":"childrenRect"},{"location":"reference/streamdeck_ui/gui/#childrenregion","text":"def childrenRegion ( self ) -> PySide2 . QtGui . QRegion childrenRegion(self) -> PySide2.QtGui.QRegion","title":"childrenRegion"},{"location":"reference/streamdeck_ui/gui/#clearfocus","text":"def clearFocus ( self ) clearFocus(self)","title":"clearFocus"},{"location":"reference/streamdeck_ui/gui/#clearmask","text":"def clearMask ( self ) clearMask(self)","title":"clearMask"},{"location":"reference/streamdeck_ui/gui/#close","text":"def close ( self ) -> bool close(self) -> bool","title":"close"},{"location":"reference/streamdeck_ui/gui/#closeevent","text":"def closeEvent ( self , event ) -> None closeEvent(self, event: PySide2.QtGui.QCloseEvent) View Source def closeEvent ( self , event ) -> None : # noqa : N802 - Part of QT signature . self . window_shown = False self . hide () event . ignore ()","title":"closeEvent"},{"location":"reference/streamdeck_ui/gui/#colorcount","text":"def colorCount ( self ) -> int colorCount(self) -> int","title":"colorCount"},{"location":"reference/streamdeck_ui/gui/#connectnotify","text":"def connectNotify ( self , signal : PySide2 . QtCore . QMetaMethod ) connectNotify(self, signal: PySide2.QtCore.QMetaMethod)","title":"connectNotify"},{"location":"reference/streamdeck_ui/gui/#contentsmargins","text":"def contentsMargins ( self ) -> PySide2 . QtCore . QMargins contentsMargins(self) -> PySide2.QtCore.QMargins","title":"contentsMargins"},{"location":"reference/streamdeck_ui/gui/#contentsrect","text":"def contentsRect ( self ) -> PySide2 . QtCore . QRect contentsRect(self) -> PySide2.QtCore.QRect","title":"contentsRect"},{"location":"reference/streamdeck_ui/gui/#contextmenuevent","text":"def contextMenuEvent ( self , event : PySide2 . QtGui . QContextMenuEvent ) contextMenuEvent(self, event: PySide2.QtGui.QContextMenuEvent)","title":"contextMenuEvent"},{"location":"reference/streamdeck_ui/gui/#contextmenupolicy","text":"def contextMenuPolicy ( self ) -> PySide2 . QtCore . Qt . ContextMenuPolicy contextMenuPolicy(self) -> PySide2.QtCore.Qt.ContextMenuPolicy","title":"contextMenuPolicy"},{"location":"reference/streamdeck_ui/gui/#corner","text":"def corner ( self , corner : PySide2 . QtCore . Qt . Corner ) -> PySide2 . QtCore . Qt . DockWidgetArea corner(self, corner: PySide2.QtCore.Qt.Corner) -> PySide2.QtCore.Qt.DockWidgetArea","title":"corner"},{"location":"reference/streamdeck_ui/gui/#create","text":"def create ( self , arg__1 : int = 0 , initializeWindow : bool = True , destroyOldWindow : bool = True ) create(self, arg__1: int = 0, initializeWindow: bool = True, destroyOldWindow: bool = True)","title":"create"},{"location":"reference/streamdeck_ui/gui/#createpopupmenu","text":"def createPopupMenu ( self ) -> PySide2 . QtWidgets . QMenu createPopupMenu(self) -> PySide2.QtWidgets.QMenu","title":"createPopupMenu"},{"location":"reference/streamdeck_ui/gui/#createwinid","text":"def createWinId ( self ) createWinId(self)","title":"createWinId"},{"location":"reference/streamdeck_ui/gui/#cursor","text":"def cursor ( self ) -> PySide2 . QtGui . QCursor cursor(self) -> PySide2.QtGui.QCursor","title":"cursor"},{"location":"reference/streamdeck_ui/gui/#customevent","text":"def customEvent ( self , event : PySide2 . QtCore . QEvent ) customEvent(self, event: PySide2.QtCore.QEvent)","title":"customEvent"},{"location":"reference/streamdeck_ui/gui/#deletelater","text":"def deleteLater ( self ) deleteLater(self)","title":"deleteLater"},{"location":"reference/streamdeck_ui/gui/#depth","text":"def depth ( self ) -> int depth(self) -> int","title":"depth"},{"location":"reference/streamdeck_ui/gui/#destroy","text":"def destroy ( self , destroyWindow : bool = True , destroySubWindows : bool = True ) destroy(self, destroyWindow: bool = True, destroySubWindows: bool = True)","title":"destroy"},{"location":"reference/streamdeck_ui/gui/#devtype","text":"def devType ( self ) -> int devType(self) -> int","title":"devType"},{"location":"reference/streamdeck_ui/gui/#devicepixelratio","text":"def devicePixelRatio ( self ) -> int devicePixelRatio(self) -> int","title":"devicePixelRatio"},{"location":"reference/streamdeck_ui/gui/#devicepixelratiof","text":"def devicePixelRatioF ( self ) -> float devicePixelRatioF(self) -> float","title":"devicePixelRatioF"},{"location":"reference/streamdeck_ui/gui/#disconnectnotify","text":"def disconnectNotify ( self , signal : PySide2 . QtCore . QMetaMethod ) disconnectNotify(self, signal: PySide2.QtCore.QMetaMethod)","title":"disconnectNotify"},{"location":"reference/streamdeck_ui/gui/#dockoptions","text":"def dockOptions ( self ) -> PySide2 . QtWidgets . QMainWindow . DockOptions dockOptions(self) -> PySide2.QtWidgets.QMainWindow.DockOptions","title":"dockOptions"},{"location":"reference/streamdeck_ui/gui/#dockwidgetarea","text":"def dockWidgetArea ( self , dockwidget : PySide2 . QtWidgets . QDockWidget ) -> PySide2 . QtCore . Qt . DockWidgetArea dockWidgetArea(self, dockwidget: PySide2.QtWidgets.QDockWidget) -> PySide2.QtCore.Qt.DockWidgetArea","title":"dockWidgetArea"},{"location":"reference/streamdeck_ui/gui/#documentmode","text":"def documentMode ( self ) -> bool documentMode(self) -> bool","title":"documentMode"},{"location":"reference/streamdeck_ui/gui/#dragenterevent","text":"def dragEnterEvent ( self , event : PySide2 . QtGui . QDragEnterEvent ) dragEnterEvent(self, event: PySide2.QtGui.QDragEnterEvent)","title":"dragEnterEvent"},{"location":"reference/streamdeck_ui/gui/#dragleaveevent","text":"def dragLeaveEvent ( self , event : PySide2 . QtGui . QDragLeaveEvent ) dragLeaveEvent(self, event: PySide2.QtGui.QDragLeaveEvent)","title":"dragLeaveEvent"},{"location":"reference/streamdeck_ui/gui/#dragmoveevent","text":"def dragMoveEvent ( self , event : PySide2 . QtGui . QDragMoveEvent ) dragMoveEvent(self, event: PySide2.QtGui.QDragMoveEvent)","title":"dragMoveEvent"},{"location":"reference/streamdeck_ui/gui/#dropevent","text":"def dropEvent ( self , event : PySide2 . QtGui . QDropEvent ) dropEvent(self, event: PySide2.QtGui.QDropEvent)","title":"dropEvent"},{"location":"reference/streamdeck_ui/gui/#dumpobjectinfo","text":"def dumpObjectInfo ( self ) dumpObjectInfo(self)","title":"dumpObjectInfo"},{"location":"reference/streamdeck_ui/gui/#dumpobjecttree","text":"def dumpObjectTree ( self ) dumpObjectTree(self)","title":"dumpObjectTree"},{"location":"reference/streamdeck_ui/gui/#dynamicpropertynames","text":"def dynamicPropertyNames ( self ) -> typing . List [ PySide2 . QtCore . QByteArray ] dynamicPropertyNames(self) -> typing.List[PySide2.QtCore.QByteArray]","title":"dynamicPropertyNames"},{"location":"reference/streamdeck_ui/gui/#effectivewinid","text":"def effectiveWinId ( self ) -> int effectiveWinId(self) -> int","title":"effectiveWinId"},{"location":"reference/streamdeck_ui/gui/#emit","text":"def emit ( self , arg__1 : str , * args : None ) -> bool emit(self, arg__1: str, *args: None) -> bool","title":"emit"},{"location":"reference/streamdeck_ui/gui/#ensurepolished","text":"def ensurePolished ( self ) ensurePolished(self)","title":"ensurePolished"},{"location":"reference/streamdeck_ui/gui/#enterevent","text":"def enterEvent ( self , event : PySide2 . QtCore . QEvent ) enterEvent(self, event: PySide2.QtCore.QEvent)","title":"enterEvent"},{"location":"reference/streamdeck_ui/gui/#event","text":"def event ( self , event : PySide2 . QtCore . QEvent ) -> bool event(self, event: PySide2.QtCore.QEvent) -> bool","title":"event"},{"location":"reference/streamdeck_ui/gui/#eventfilter","text":"def eventFilter ( self , watched : PySide2 . QtCore . QObject , event : PySide2 . QtCore . QEvent ) -> bool eventFilter(self, watched: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) -> bool","title":"eventFilter"},{"location":"reference/streamdeck_ui/gui/#findchild","text":"def findChild ( self , arg__1 : type , arg__2 : str = '' ) -> object findChild(self, arg__1: type, arg__2: str = '') -> object","title":"findChild"},{"location":"reference/streamdeck_ui/gui/#findchildren","text":"def findChildren ( ... ) findChildren(self, arg__1: type, arg__2: PySide2.QtCore.QRegExp) -> typing.Iterable findChildren(self, arg__1: type, arg__2: str = '') -> typing.Iterable","title":"findChildren"},{"location":"reference/streamdeck_ui/gui/#focusinevent","text":"def focusInEvent ( self , event : PySide2 . QtGui . QFocusEvent ) focusInEvent(self, event: PySide2.QtGui.QFocusEvent)","title":"focusInEvent"},{"location":"reference/streamdeck_ui/gui/#focusnextchild","text":"def focusNextChild ( self ) -> bool focusNextChild(self) -> bool","title":"focusNextChild"},{"location":"reference/streamdeck_ui/gui/#focusnextprevchild","text":"def focusNextPrevChild ( self , next : bool ) -> bool focusNextPrevChild(self, next: bool) -> bool","title":"focusNextPrevChild"},{"location":"reference/streamdeck_ui/gui/#focusoutevent","text":"def focusOutEvent ( self , event : PySide2 . QtGui . QFocusEvent ) focusOutEvent(self, event: PySide2.QtGui.QFocusEvent)","title":"focusOutEvent"},{"location":"reference/streamdeck_ui/gui/#focuspolicy","text":"def focusPolicy ( self ) -> PySide2 . QtCore . Qt . FocusPolicy focusPolicy(self) -> PySide2.QtCore.Qt.FocusPolicy","title":"focusPolicy"},{"location":"reference/streamdeck_ui/gui/#focuspreviouschild","text":"def focusPreviousChild ( self ) -> bool focusPreviousChild(self) -> bool","title":"focusPreviousChild"},{"location":"reference/streamdeck_ui/gui/#focusproxy","text":"def focusProxy ( self ) -> PySide2 . QtWidgets . QWidget focusProxy(self) -> PySide2.QtWidgets.QWidget","title":"focusProxy"},{"location":"reference/streamdeck_ui/gui/#focuswidget","text":"def focusWidget ( self ) -> PySide2 . QtWidgets . QWidget focusWidget(self) -> PySide2.QtWidgets.QWidget","title":"focusWidget"},{"location":"reference/streamdeck_ui/gui/#font","text":"def font ( self ) -> PySide2 . QtGui . QFont font(self) -> PySide2.QtGui.QFont","title":"font"},{"location":"reference/streamdeck_ui/gui/#fontinfo","text":"def fontInfo ( self ) -> PySide2 . QtGui . QFontInfo fontInfo(self) -> PySide2.QtGui.QFontInfo","title":"fontInfo"},{"location":"reference/streamdeck_ui/gui/#fontmetrics","text":"def fontMetrics ( self ) -> PySide2 . QtGui . QFontMetrics fontMetrics(self) -> PySide2.QtGui.QFontMetrics","title":"fontMetrics"},{"location":"reference/streamdeck_ui/gui/#foregroundrole","text":"def foregroundRole ( self ) -> PySide2 . QtGui . QPalette . ColorRole foregroundRole(self) -> PySide2.QtGui.QPalette.ColorRole","title":"foregroundRole"},{"location":"reference/streamdeck_ui/gui/#framegeometry","text":"def frameGeometry ( self ) -> PySide2 . QtCore . QRect frameGeometry(self) -> PySide2.QtCore.QRect","title":"frameGeometry"},{"location":"reference/streamdeck_ui/gui/#framesize","text":"def frameSize ( self ) -> PySide2 . QtCore . QSize frameSize(self) -> PySide2.QtCore.QSize","title":"frameSize"},{"location":"reference/streamdeck_ui/gui/#geometry","text":"def geometry ( self ) -> PySide2 . QtCore . QRect geometry(self) -> PySide2.QtCore.QRect","title":"geometry"},{"location":"reference/streamdeck_ui/gui/#getcontentsmargins","text":"def getContentsMargins ( self , left : int , top : int , right : int , bottom : int ) getContentsMargins(self, left: int, top: int, right: int, bottom: int)","title":"getContentsMargins"},{"location":"reference/streamdeck_ui/gui/#grab","text":"def grab ( self , rectangle : PySide2 . QtCore . QRect = PySide2 . QtCore . QRect ( 0 , 0 , - 1 , - 1 ) ) -> PySide2 . QtGui . QPixmap grab(self, rectangle: PySide2.QtCore.QRect = PySide2.QtCore.QRect(0, 0, -1, -1)) -> PySide2.QtGui.QPixmap","title":"grab"},{"location":"reference/streamdeck_ui/gui/#grabgesture","text":"def grabGesture ( self , type : PySide2 . QtCore . Qt . GestureType , flags : PySide2 . QtCore . Qt . GestureFlags = Default ( Qt . GestureFlags ) ) grabGesture(self, type: PySide2.QtCore.Qt.GestureType, flags: PySide2.QtCore.Qt.GestureFlags = Default(Qt.GestureFlags))","title":"grabGesture"},{"location":"reference/streamdeck_ui/gui/#grabkeyboard","text":"def grabKeyboard ( self ) grabKeyboard(self)","title":"grabKeyboard"},{"location":"reference/streamdeck_ui/gui/#grabmouse","text":"def grabMouse ( ... ) grabMouse(self) grabMouse(self, arg__1: PySide2.QtGui.QCursor)","title":"grabMouse"},{"location":"reference/streamdeck_ui/gui/#grabshortcut","text":"def grabShortcut ( self , key : PySide2 . QtGui . QKeySequence , context : PySide2 . QtCore . Qt . ShortcutContext = PySide2 . QtCore . Qt . ShortcutContext . WindowShortcut ) -> int grabShortcut(self, key: PySide2.QtGui.QKeySequence, context: PySide2.QtCore.Qt.ShortcutContext = PySide2.QtCore.Qt.ShortcutContext.WindowShortcut) -> int","title":"grabShortcut"},{"location":"reference/streamdeck_ui/gui/#graphicseffect","text":"def graphicsEffect ( self ) -> PySide2 . QtWidgets . QGraphicsEffect graphicsEffect(self) -> PySide2.QtWidgets.QGraphicsEffect","title":"graphicsEffect"},{"location":"reference/streamdeck_ui/gui/#graphicsproxywidget","text":"def graphicsProxyWidget ( self ) -> PySide2 . QtWidgets . QGraphicsProxyWidget graphicsProxyWidget(self) -> PySide2.QtWidgets.QGraphicsProxyWidget","title":"graphicsProxyWidget"},{"location":"reference/streamdeck_ui/gui/#hasfocus","text":"def hasFocus ( self ) -> bool hasFocus(self) -> bool","title":"hasFocus"},{"location":"reference/streamdeck_ui/gui/#hasheightforwidth","text":"def hasHeightForWidth ( self ) -> bool hasHeightForWidth(self) -> bool","title":"hasHeightForWidth"},{"location":"reference/streamdeck_ui/gui/#hasmousetracking","text":"def hasMouseTracking ( self ) -> bool hasMouseTracking(self) -> bool","title":"hasMouseTracking"},{"location":"reference/streamdeck_ui/gui/#hastablettracking","text":"def hasTabletTracking ( self ) -> bool hasTabletTracking(self) -> bool","title":"hasTabletTracking"},{"location":"reference/streamdeck_ui/gui/#height","text":"def height ( self ) -> int height(self) -> int","title":"height"},{"location":"reference/streamdeck_ui/gui/#heightforwidth","text":"def heightForWidth ( self , arg__1 : int ) -> int heightForWidth(self, arg__1: int) -> int","title":"heightForWidth"},{"location":"reference/streamdeck_ui/gui/#heightmm","text":"def heightMM ( self ) -> int heightMM(self) -> int","title":"heightMM"},{"location":"reference/streamdeck_ui/gui/#hide","text":"def hide ( self ) hide(self)","title":"hide"},{"location":"reference/streamdeck_ui/gui/#hideevent","text":"def hideEvent ( self , event : PySide2 . QtGui . QHideEvent ) hideEvent(self, event: PySide2.QtGui.QHideEvent)","title":"hideEvent"},{"location":"reference/streamdeck_ui/gui/#iconsize","text":"def iconSize ( self ) -> PySide2 . QtCore . QSize iconSize(self) -> PySide2.QtCore.QSize","title":"iconSize"},{"location":"reference/streamdeck_ui/gui/#inherits","text":"def inherits ( self , classname : str ) -> bool inherits(self, classname: str) -> bool","title":"inherits"},{"location":"reference/streamdeck_ui/gui/#initpainter","text":"def initPainter ( self , painter : PySide2 . QtGui . QPainter ) initPainter(self, painter: PySide2.QtGui.QPainter)","title":"initPainter"},{"location":"reference/streamdeck_ui/gui/#inputmethodevent","text":"def inputMethodEvent ( self , event : PySide2 . QtGui . QInputMethodEvent ) inputMethodEvent(self, event: PySide2.QtGui.QInputMethodEvent)","title":"inputMethodEvent"},{"location":"reference/streamdeck_ui/gui/#inputmethodhints","text":"def inputMethodHints ( self ) -> PySide2 . QtCore . Qt . InputMethodHints inputMethodHints(self) -> PySide2.QtCore.Qt.InputMethodHints","title":"inputMethodHints"},{"location":"reference/streamdeck_ui/gui/#inputmethodquery","text":"def inputMethodQuery ( self , arg__1 : PySide2 . QtCore . Qt . InputMethodQuery ) -> typing . Any inputMethodQuery(self, arg__1: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any","title":"inputMethodQuery"},{"location":"reference/streamdeck_ui/gui/#insertaction","text":"def insertAction ( self , before : PySide2 . QtWidgets . QAction , action : PySide2 . QtWidgets . QAction ) insertAction(self, before: PySide2.QtWidgets.QAction, action: PySide2.QtWidgets.QAction)","title":"insertAction"},{"location":"reference/streamdeck_ui/gui/#insertactions","text":"def insertActions ( self , before : PySide2 . QtWidgets . QAction , actions : typing . List [ PySide2 . QtWidgets . QAction ] ) insertActions(self, before: PySide2.QtWidgets.QAction, actions: typing.List[PySide2.QtWidgets.QAction])","title":"insertActions"},{"location":"reference/streamdeck_ui/gui/#inserttoolbar","text":"def insertToolBar ( self , before : PySide2 . QtWidgets . QToolBar , toolbar : PySide2 . QtWidgets . QToolBar ) insertToolBar(self, before: PySide2.QtWidgets.QToolBar, toolbar: PySide2.QtWidgets.QToolBar)","title":"insertToolBar"},{"location":"reference/streamdeck_ui/gui/#inserttoolbarbreak","text":"def insertToolBarBreak ( self , before : PySide2 . QtWidgets . QToolBar ) insertToolBarBreak(self, before: PySide2.QtWidgets.QToolBar)","title":"insertToolBarBreak"},{"location":"reference/streamdeck_ui/gui/#installeventfilter","text":"def installEventFilter ( self , filterObj : PySide2 . QtCore . QObject ) installEventFilter(self, filterObj: PySide2.QtCore.QObject)","title":"installEventFilter"},{"location":"reference/streamdeck_ui/gui/#internalwinid","text":"def internalWinId ( self ) -> int internalWinId(self) -> int","title":"internalWinId"},{"location":"reference/streamdeck_ui/gui/#isactivewindow","text":"def isActiveWindow ( self ) -> bool isActiveWindow(self) -> bool","title":"isActiveWindow"},{"location":"reference/streamdeck_ui/gui/#isancestorof","text":"def isAncestorOf ( self , child : PySide2 . QtWidgets . QWidget ) -> bool isAncestorOf(self, child: PySide2.QtWidgets.QWidget) -> bool","title":"isAncestorOf"},{"location":"reference/streamdeck_ui/gui/#isanimated","text":"def isAnimated ( self ) -> bool isAnimated(self) -> bool","title":"isAnimated"},{"location":"reference/streamdeck_ui/gui/#isdocknestingenabled","text":"def isDockNestingEnabled ( self ) -> bool isDockNestingEnabled(self) -> bool","title":"isDockNestingEnabled"},{"location":"reference/streamdeck_ui/gui/#isenabled","text":"def isEnabled ( self ) -> bool isEnabled(self) -> bool","title":"isEnabled"},{"location":"reference/streamdeck_ui/gui/#isenabledto","text":"def isEnabledTo ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> bool isEnabledTo(self, arg__1: PySide2.QtWidgets.QWidget) -> bool","title":"isEnabledTo"},{"location":"reference/streamdeck_ui/gui/#isenabledtotlw","text":"def isEnabledToTLW ( self ) -> bool isEnabledToTLW(self) -> bool","title":"isEnabledToTLW"},{"location":"reference/streamdeck_ui/gui/#isfullscreen","text":"def isFullScreen ( self ) -> bool isFullScreen(self) -> bool","title":"isFullScreen"},{"location":"reference/streamdeck_ui/gui/#ishidden","text":"def isHidden ( self ) -> bool isHidden(self) -> bool","title":"isHidden"},{"location":"reference/streamdeck_ui/gui/#islefttoright","text":"def isLeftToRight ( self ) -> bool isLeftToRight(self) -> bool","title":"isLeftToRight"},{"location":"reference/streamdeck_ui/gui/#ismaximized","text":"def isMaximized ( self ) -> bool isMaximized(self) -> bool","title":"isMaximized"},{"location":"reference/streamdeck_ui/gui/#isminimized","text":"def isMinimized ( self ) -> bool isMinimized(self) -> bool","title":"isMinimized"},{"location":"reference/streamdeck_ui/gui/#ismodal","text":"def isModal ( self ) -> bool isModal(self) -> bool","title":"isModal"},{"location":"reference/streamdeck_ui/gui/#isrighttoleft","text":"def isRightToLeft ( self ) -> bool isRightToLeft(self) -> bool","title":"isRightToLeft"},{"location":"reference/streamdeck_ui/gui/#isseparator","text":"def isSeparator ( self , pos : PySide2 . QtCore . QPoint ) -> bool isSeparator(self, pos: PySide2.QtCore.QPoint) -> bool","title":"isSeparator"},{"location":"reference/streamdeck_ui/gui/#issignalconnected","text":"def isSignalConnected ( self , signal : PySide2 . QtCore . QMetaMethod ) -> bool isSignalConnected(self, signal: PySide2.QtCore.QMetaMethod) -> bool","title":"isSignalConnected"},{"location":"reference/streamdeck_ui/gui/#istoplevel","text":"def isTopLevel ( self ) -> bool isTopLevel(self) -> bool","title":"isTopLevel"},{"location":"reference/streamdeck_ui/gui/#isvisible","text":"def isVisible ( self ) -> bool isVisible(self) -> bool","title":"isVisible"},{"location":"reference/streamdeck_ui/gui/#isvisibleto","text":"def isVisibleTo ( self , arg__1 : PySide2 . QtWidgets . QWidget ) -> bool isVisibleTo(self, arg__1: PySide2.QtWidgets.QWidget) -> bool","title":"isVisibleTo"},{"location":"reference/streamdeck_ui/gui/#iswidgettype","text":"def isWidgetType ( self ) -> bool isWidgetType(self) -> bool","title":"isWidgetType"},{"location":"reference/streamdeck_ui/gui/#iswindow","text":"def isWindow ( self ) -> bool isWindow(self) -> bool","title":"isWindow"},{"location":"reference/streamdeck_ui/gui/#iswindowmodified","text":"def isWindowModified ( self ) -> bool isWindowModified(self) -> bool","title":"isWindowModified"},{"location":"reference/streamdeck_ui/gui/#iswindowtype","text":"def isWindowType ( self ) -> bool isWindowType(self) -> bool","title":"isWindowType"},{"location":"reference/streamdeck_ui/gui/#keypressevent","text":"def keyPressEvent ( self , event : PySide2 . QtGui . QKeyEvent ) keyPressEvent(self, event: PySide2.QtGui.QKeyEvent)","title":"keyPressEvent"},{"location":"reference/streamdeck_ui/gui/#keyreleaseevent","text":"def keyReleaseEvent ( self , event : PySide2 . QtGui . QKeyEvent ) keyReleaseEvent(self, event: PySide2.QtGui.QKeyEvent)","title":"keyReleaseEvent"},{"location":"reference/streamdeck_ui/gui/#killtimer","text":"def killTimer ( self , id : int ) killTimer(self, id: int)","title":"killTimer"},{"location":"reference/streamdeck_ui/gui/#layout","text":"def layout ( self ) -> PySide2 . QtWidgets . QLayout layout(self) -> PySide2.QtWidgets.QLayout","title":"layout"},{"location":"reference/streamdeck_ui/gui/#layoutdirection","text":"def layoutDirection ( self ) -> PySide2 . QtCore . Qt . LayoutDirection layoutDirection(self) -> PySide2.QtCore.Qt.LayoutDirection","title":"layoutDirection"},{"location":"reference/streamdeck_ui/gui/#leaveevent","text":"def leaveEvent ( self , event : PySide2 . QtCore . QEvent ) leaveEvent(self, event: PySide2.QtCore.QEvent)","title":"leaveEvent"},{"location":"reference/streamdeck_ui/gui/#locale","text":"def locale ( self ) -> PySide2 . QtCore . QLocale locale(self) -> PySide2.QtCore.QLocale","title":"locale"},{"location":"reference/streamdeck_ui/gui/#logicaldpix","text":"def logicalDpiX ( self ) -> int logicalDpiX(self) -> int","title":"logicalDpiX"},{"location":"reference/streamdeck_ui/gui/#logicaldpiy","text":"def logicalDpiY ( self ) -> int logicalDpiY(self) -> int","title":"logicalDpiY"},{"location":"reference/streamdeck_ui/gui/#lower","text":"def lower ( self ) lower(self)","title":"lower"},{"location":"reference/streamdeck_ui/gui/#mapfrom","text":"def mapFrom ( self , arg__1 : PySide2 . QtWidgets . QWidget , arg__2 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapFrom(self, arg__1: PySide2.QtWidgets.QWidget, arg__2: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint","title":"mapFrom"},{"location":"reference/streamdeck_ui/gui/#mapfromglobal","text":"def mapFromGlobal ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapFromGlobal(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint","title":"mapFromGlobal"},{"location":"reference/streamdeck_ui/gui/#mapfromparent","text":"def mapFromParent ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapFromParent(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint","title":"mapFromParent"},{"location":"reference/streamdeck_ui/gui/#mapto","text":"def mapTo ( self , arg__1 : PySide2 . QtWidgets . QWidget , arg__2 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapTo(self, arg__1: PySide2.QtWidgets.QWidget, arg__2: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint","title":"mapTo"},{"location":"reference/streamdeck_ui/gui/#maptoglobal","text":"def mapToGlobal ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapToGlobal(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint","title":"mapToGlobal"},{"location":"reference/streamdeck_ui/gui/#maptoparent","text":"def mapToParent ( self , arg__1 : PySide2 . QtCore . QPoint ) -> PySide2 . QtCore . QPoint mapToParent(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint","title":"mapToParent"},{"location":"reference/streamdeck_ui/gui/#mask","text":"def mask ( self ) -> PySide2 . QtGui . QRegion mask(self) -> PySide2.QtGui.QRegion","title":"mask"},{"location":"reference/streamdeck_ui/gui/#maximumheight","text":"def maximumHeight ( self ) -> int maximumHeight(self) -> int","title":"maximumHeight"},{"location":"reference/streamdeck_ui/gui/#maximumsize","text":"def maximumSize ( self ) -> PySide2 . QtCore . QSize maximumSize(self) -> PySide2.QtCore.QSize","title":"maximumSize"},{"location":"reference/streamdeck_ui/gui/#maximumwidth","text":"def maximumWidth ( self ) -> int maximumWidth(self) -> int","title":"maximumWidth"},{"location":"reference/streamdeck_ui/gui/#menubar","text":"def menuBar ( self ) -> PySide2 . QtWidgets . QMenuBar menuBar(self) -> PySide2.QtWidgets.QMenuBar","title":"menuBar"},{"location":"reference/streamdeck_ui/gui/#menuwidget","text":"def menuWidget ( self ) -> PySide2 . QtWidgets . QWidget menuWidget(self) -> PySide2.QtWidgets.QWidget","title":"menuWidget"},{"location":"reference/streamdeck_ui/gui/#metaobject","text":"def metaObject ( self ) -> PySide2 . QtCore . QMetaObject metaObject(self) -> PySide2.QtCore.QMetaObject","title":"metaObject"},{"location":"reference/streamdeck_ui/gui/#metric","text":"def metric ( self , arg__1 : PySide2 . QtGui . QPaintDevice . PaintDeviceMetric ) -> int metric(self, arg__1: PySide2.QtGui.QPaintDevice.PaintDeviceMetric) -> int","title":"metric"},{"location":"reference/streamdeck_ui/gui/#minimumheight","text":"def minimumHeight ( self ) -> int minimumHeight(self) -> int","title":"minimumHeight"},{"location":"reference/streamdeck_ui/gui/#minimumsize","text":"def minimumSize ( self ) -> PySide2 . QtCore . QSize minimumSize(self) -> PySide2.QtCore.QSize","title":"minimumSize"},{"location":"reference/streamdeck_ui/gui/#minimumsizehint","text":"def minimumSizeHint ( self ) -> PySide2 . QtCore . QSize minimumSizeHint(self) -> PySide2.QtCore.QSize","title":"minimumSizeHint"},{"location":"reference/streamdeck_ui/gui/#minimumwidth","text":"def minimumWidth ( self ) -> int minimumWidth(self) -> int","title":"minimumWidth"},{"location":"reference/streamdeck_ui/gui/#mousedoubleclickevent","text":"def mouseDoubleClickEvent ( self , event : PySide2 . QtGui . QMouseEvent ) mouseDoubleClickEvent(self, event: PySide2.QtGui.QMouseEvent)","title":"mouseDoubleClickEvent"},{"location":"reference/streamdeck_ui/gui/#mousemoveevent","text":"def mouseMoveEvent ( self , event : PySide2 . QtGui . QMouseEvent ) mouseMoveEvent(self, event: PySide2.QtGui.QMouseEvent)","title":"mouseMoveEvent"},{"location":"reference/streamdeck_ui/gui/#mousepressevent","text":"def mousePressEvent ( self , event : PySide2 . QtGui . QMouseEvent ) mousePressEvent(self, event: PySide2.QtGui.QMouseEvent)","title":"mousePressEvent"},{"location":"reference/streamdeck_ui/gui/#mousereleaseevent","text":"def mouseReleaseEvent ( self , event : PySide2 . QtGui . QMouseEvent ) mouseReleaseEvent(self, event: PySide2.QtGui.QMouseEvent)","title":"mouseReleaseEvent"},{"location":"reference/streamdeck_ui/gui/#move","text":"def move ( ... ) move(self, arg__1: PySide2.QtCore.QPoint) move(self, x: int, y: int)","title":"move"},{"location":"reference/streamdeck_ui/gui/#moveevent","text":"def moveEvent ( self , event : PySide2 . QtGui . QMoveEvent ) moveEvent(self, event: PySide2.QtGui.QMoveEvent)","title":"moveEvent"},{"location":"reference/streamdeck_ui/gui/#movetothread","text":"def moveToThread ( self , thread : PySide2 . QtCore . QThread ) moveToThread(self, thread: PySide2.QtCore.QThread)","title":"moveToThread"},{"location":"reference/streamdeck_ui/gui/#nativeevent","text":"def nativeEvent ( self , eventType : PySide2 . QtCore . QByteArray , message : int , result : int ) -> bool nativeEvent(self, eventType: PySide2.QtCore.QByteArray, message: int, result: int) -> bool","title":"nativeEvent"},{"location":"reference/streamdeck_ui/gui/#nativeparentwidget","text":"def nativeParentWidget ( self ) -> PySide2 . QtWidgets . QWidget nativeParentWidget(self) -> PySide2.QtWidgets.QWidget","title":"nativeParentWidget"},{"location":"reference/streamdeck_ui/gui/#nextinfocuschain","text":"def nextInFocusChain ( self ) -> PySide2 . QtWidgets . QWidget nextInFocusChain(self) -> PySide2.QtWidgets.QWidget","title":"nextInFocusChain"},{"location":"reference/streamdeck_ui/gui/#normalgeometry","text":"def normalGeometry ( self ) -> PySide2 . QtCore . QRect normalGeometry(self) -> PySide2.QtCore.QRect","title":"normalGeometry"},{"location":"reference/streamdeck_ui/gui/#objectname","text":"def objectName ( self ) -> str objectName(self) -> str","title":"objectName"},{"location":"reference/streamdeck_ui/gui/#overridewindowflags","text":"def overrideWindowFlags ( self , type : PySide2 . QtCore . Qt . WindowFlags ) overrideWindowFlags(self, type: PySide2.QtCore.Qt.WindowFlags)","title":"overrideWindowFlags"},{"location":"reference/streamdeck_ui/gui/#overridewindowstate","text":"def overrideWindowState ( self , state : PySide2 . QtCore . Qt . WindowStates ) overrideWindowState(self, state: PySide2.QtCore.Qt.WindowStates)","title":"overrideWindowState"},{"location":"reference/streamdeck_ui/gui/#paintengine","text":"def paintEngine ( self ) -> PySide2 . QtGui . QPaintEngine paintEngine(self) -> PySide2.QtGui.QPaintEngine","title":"paintEngine"},{"location":"reference/streamdeck_ui/gui/#paintevent","text":"def paintEvent ( self , event : PySide2 . QtGui . QPaintEvent ) paintEvent(self, event: PySide2.QtGui.QPaintEvent)","title":"paintEvent"},{"location":"reference/streamdeck_ui/gui/#paintingactive","text":"def paintingActive ( self ) -> bool paintingActive(self) -> bool","title":"paintingActive"},{"location":"reference/streamdeck_ui/gui/#palette","text":"def palette ( self ) -> PySide2 . QtGui . QPalette palette(self) -> PySide2.QtGui.QPalette","title":"palette"},{"location":"reference/streamdeck_ui/gui/#parent","text":"def parent ( self ) -> PySide2 . QtCore . QObject parent(self) -> PySide2.QtCore.QObject","title":"parent"},{"location":"reference/streamdeck_ui/gui/#parentwidget","text":"def parentWidget ( self ) -> PySide2 . QtWidgets . QWidget parentWidget(self) -> PySide2.QtWidgets.QWidget","title":"parentWidget"},{"location":"reference/streamdeck_ui/gui/#physicaldpix","text":"def physicalDpiX ( self ) -> int physicalDpiX(self) -> int","title":"physicalDpiX"},{"location":"reference/streamdeck_ui/gui/#physicaldpiy","text":"def physicalDpiY ( self ) -> int physicalDpiY(self) -> int","title":"physicalDpiY"},{"location":"reference/streamdeck_ui/gui/#pos","text":"def pos ( self ) -> PySide2 . QtCore . QPoint pos(self) -> PySide2.QtCore.QPoint","title":"pos"},{"location":"reference/streamdeck_ui/gui/#previousinfocuschain","text":"def previousInFocusChain ( self ) -> PySide2 . QtWidgets . QWidget previousInFocusChain(self) -> PySide2.QtWidgets.QWidget","title":"previousInFocusChain"},{"location":"reference/streamdeck_ui/gui/#property","text":"def property ( self , name : str ) -> typing . Any property(self, name: str) -> typing.Any","title":"property"},{"location":"reference/streamdeck_ui/gui/#raise_","text":"def raise_ ( self ) raise_(self)","title":"raise_"},{"location":"reference/streamdeck_ui/gui/#receivers","text":"def receivers ( self , signal : str ) -> int receivers(self, signal: str) -> int","title":"receivers"},{"location":"reference/streamdeck_ui/gui/#rect","text":"def rect ( self ) -> PySide2 . QtCore . QRect rect(self) -> PySide2.QtCore.QRect","title":"rect"},{"location":"reference/streamdeck_ui/gui/#redirected","text":"def redirected ( self , offset : PySide2 . QtCore . QPoint ) -> PySide2 . QtGui . QPaintDevice redirected(self, offset: PySide2.QtCore.QPoint) -> PySide2.QtGui.QPaintDevice","title":"redirected"},{"location":"reference/streamdeck_ui/gui/#releasekeyboard","text":"def releaseKeyboard ( self ) releaseKeyboard(self)","title":"releaseKeyboard"},{"location":"reference/streamdeck_ui/gui/#releasemouse","text":"def releaseMouse ( self ) releaseMouse(self)","title":"releaseMouse"},{"location":"reference/streamdeck_ui/gui/#releaseshortcut","text":"def releaseShortcut ( self , id : int ) releaseShortcut(self, id: int)","title":"releaseShortcut"},{"location":"reference/streamdeck_ui/gui/#removeaction","text":"def removeAction ( self , action : PySide2 . QtWidgets . QAction ) removeAction(self, action: PySide2.QtWidgets.QAction)","title":"removeAction"},{"location":"reference/streamdeck_ui/gui/#removedockwidget","text":"def removeDockWidget ( self , dockwidget : PySide2 . QtWidgets . QDockWidget ) removeDockWidget(self, dockwidget: PySide2.QtWidgets.QDockWidget)","title":"removeDockWidget"},{"location":"reference/streamdeck_ui/gui/#removeeventfilter","text":"def removeEventFilter ( self , obj : PySide2 . QtCore . QObject ) removeEventFilter(self, obj: PySide2.QtCore.QObject)","title":"removeEventFilter"},{"location":"reference/streamdeck_ui/gui/#removetoolbar","text":"def removeToolBar ( self , toolbar : PySide2 . QtWidgets . QToolBar ) removeToolBar(self, toolbar: PySide2.QtWidgets.QToolBar)","title":"removeToolBar"},{"location":"reference/streamdeck_ui/gui/#removetoolbarbreak","text":"def removeToolBarBreak ( self , before : PySide2 . QtWidgets . QToolBar ) removeToolBarBreak(self, before: PySide2.QtWidgets.QToolBar)","title":"removeToolBarBreak"},{"location":"reference/streamdeck_ui/gui/#render","text":"def render ( ... ) render(self, painter: PySide2.QtGui.QPainter, targetOffset: PySide2.QtCore.QPoint, sourceRegion: PySide2.QtGui.QRegion = Default(QRegion), renderFlags: PySide2.QtWidgets.QWidget.RenderFlags = Instance(QWidget.RenderFlags(QWidget.DrawWindowBackground | QWidget.DrawChildren))) render(self, target: PySide2.QtGui.QPaintDevice, targetOffset: PySide2.QtCore.QPoint = Default(QPoint), sourceRegion: PySide2.QtGui.QRegion = Default(QRegion), renderFlags: PySide2.QtWidgets.QWidget.RenderFlags = Instance(QWidget.RenderFlags(QWidget.DrawWindowBackground | QWidget.DrawChildren)))","title":"render"},{"location":"reference/streamdeck_ui/gui/#repaint","text":"def repaint ( ... ) repaint(self) repaint(self, arg__1: PySide2.QtCore.QRect) repaint(self, arg__1: PySide2.QtGui.QRegion) repaint(self, x: int, y: int, w: int, h: int)","title":"repaint"},{"location":"reference/streamdeck_ui/gui/#resize","text":"def resize ( ... ) resize(self, arg__1: PySide2.QtCore.QSize) resize(self, w: int, h: int)","title":"resize"},{"location":"reference/streamdeck_ui/gui/#resizedocks","text":"def resizeDocks ( self , docks : typing . List [ PySide2 . QtWidgets . QDockWidget ], sizes : typing . List [ int ], orientation : PySide2 . QtCore . Qt . Orientation ) resizeDocks(self, docks: typing.List[PySide2.QtWidgets.QDockWidget], sizes: typing.List[int], orientation: PySide2.QtCore.Qt.Orientation)","title":"resizeDocks"},{"location":"reference/streamdeck_ui/gui/#resizeevent","text":"def resizeEvent ( self , event : PySide2 . QtGui . QResizeEvent ) resizeEvent(self, event: PySide2.QtGui.QResizeEvent)","title":"resizeEvent"},{"location":"reference/streamdeck_ui/gui/#restoredockwidget","text":"def restoreDockWidget ( self , dockwidget : PySide2 . QtWidgets . QDockWidget ) -> bool restoreDockWidget(self, dockwidget: PySide2.QtWidgets.QDockWidget) -> bool","title":"restoreDockWidget"},{"location":"reference/streamdeck_ui/gui/#restoregeometry","text":"def restoreGeometry ( self , geometry : PySide2 . QtCore . QByteArray ) -> bool restoreGeometry(self, geometry: PySide2.QtCore.QByteArray) -> bool","title":"restoreGeometry"},{"location":"reference/streamdeck_ui/gui/#restorestate","text":"def restoreState ( self , state : PySide2 . QtCore . QByteArray , version : int = 0 ) -> bool restoreState(self, state: PySide2.QtCore.QByteArray, version: int = 0) -> bool","title":"restoreState"},{"location":"reference/streamdeck_ui/gui/#savegeometry","text":"def saveGeometry ( self ) -> PySide2 . QtCore . QByteArray saveGeometry(self) -> PySide2.QtCore.QByteArray","title":"saveGeometry"},{"location":"reference/streamdeck_ui/gui/#savestate","text":"def saveState ( self , version : int = 0 ) -> PySide2 . QtCore . QByteArray saveState(self, version: int = 0) -> PySide2.QtCore.QByteArray","title":"saveState"},{"location":"reference/streamdeck_ui/gui/#scroll","text":"def scroll ( ... ) scroll(self, dx: int, dy: int) scroll(self, dx: int, dy: int, arg__3: PySide2.QtCore.QRect)","title":"scroll"},{"location":"reference/streamdeck_ui/gui/#sender","text":"def sender ( self ) -> PySide2 . QtCore . QObject sender(self) -> PySide2.QtCore.QObject","title":"sender"},{"location":"reference/streamdeck_ui/gui/#sendersignalindex","text":"def senderSignalIndex ( self ) -> int senderSignalIndex(self) -> int","title":"senderSignalIndex"},{"location":"reference/streamdeck_ui/gui/#setacceptdrops","text":"def setAcceptDrops ( self , on : bool ) setAcceptDrops(self, on: bool)","title":"setAcceptDrops"},{"location":"reference/streamdeck_ui/gui/#setaccessibledescription","text":"def setAccessibleDescription ( self , description : str ) setAccessibleDescription(self, description: str)","title":"setAccessibleDescription"},{"location":"reference/streamdeck_ui/gui/#setaccessiblename","text":"def setAccessibleName ( self , name : str ) setAccessibleName(self, name: str)","title":"setAccessibleName"},{"location":"reference/streamdeck_ui/gui/#setanimated","text":"def setAnimated ( self , enabled : bool ) setAnimated(self, enabled: bool)","title":"setAnimated"},{"location":"reference/streamdeck_ui/gui/#setattribute","text":"def setAttribute ( self , arg__1 : PySide2 . QtCore . Qt . WidgetAttribute , on : bool = True ) setAttribute(self, arg__1: PySide2.QtCore.Qt.WidgetAttribute, on: bool = True)","title":"setAttribute"},{"location":"reference/streamdeck_ui/gui/#setautofillbackground","text":"def setAutoFillBackground ( self , enabled : bool ) setAutoFillBackground(self, enabled: bool)","title":"setAutoFillBackground"},{"location":"reference/streamdeck_ui/gui/#setbackgroundrole","text":"def setBackgroundRole ( self , arg__1 : PySide2 . QtGui . QPalette . ColorRole ) setBackgroundRole(self, arg__1: PySide2.QtGui.QPalette.ColorRole)","title":"setBackgroundRole"},{"location":"reference/streamdeck_ui/gui/#setbasesize","text":"def setBaseSize ( ... ) setBaseSize(self, arg__1: PySide2.QtCore.QSize) setBaseSize(self, basew: int, baseh: int)","title":"setBaseSize"},{"location":"reference/streamdeck_ui/gui/#setcentralwidget","text":"def setCentralWidget ( self , widget : PySide2 . QtWidgets . QWidget ) setCentralWidget(self, widget: PySide2.QtWidgets.QWidget)","title":"setCentralWidget"},{"location":"reference/streamdeck_ui/gui/#setcontentsmargins","text":"def setContentsMargins ( ... ) setContentsMargins(self, left: int, top: int, right: int, bottom: int) setContentsMargins(self, margins: PySide2.QtCore.QMargins)","title":"setContentsMargins"},{"location":"reference/streamdeck_ui/gui/#setcontextmenupolicy","text":"def setContextMenuPolicy ( self , policy : PySide2 . QtCore . Qt . ContextMenuPolicy ) setContextMenuPolicy(self, policy: PySide2.QtCore.Qt.ContextMenuPolicy)","title":"setContextMenuPolicy"},{"location":"reference/streamdeck_ui/gui/#setcorner","text":"def setCorner ( self , corner : PySide2 . QtCore . Qt . Corner , area : PySide2 . QtCore . Qt . DockWidgetArea ) setCorner(self, corner: PySide2.QtCore.Qt.Corner, area: PySide2.QtCore.Qt.DockWidgetArea)","title":"setCorner"},{"location":"reference/streamdeck_ui/gui/#setcursor","text":"def setCursor ( self , arg__1 : PySide2 . QtGui . QCursor ) setCursor(self, arg__1: PySide2.QtGui.QCursor)","title":"setCursor"},{"location":"reference/streamdeck_ui/gui/#setdisabled","text":"def setDisabled ( self , arg__1 : bool ) setDisabled(self, arg__1: bool)","title":"setDisabled"},{"location":"reference/streamdeck_ui/gui/#setdocknestingenabled","text":"def setDockNestingEnabled ( self , enabled : bool ) setDockNestingEnabled(self, enabled: bool)","title":"setDockNestingEnabled"},{"location":"reference/streamdeck_ui/gui/#setdockoptions","text":"def setDockOptions ( self , options : PySide2 . QtWidgets . QMainWindow . DockOptions ) setDockOptions(self, options: PySide2.QtWidgets.QMainWindow.DockOptions)","title":"setDockOptions"},{"location":"reference/streamdeck_ui/gui/#setdocumentmode","text":"def setDocumentMode ( self , enabled : bool ) setDocumentMode(self, enabled: bool)","title":"setDocumentMode"},{"location":"reference/streamdeck_ui/gui/#setenabled","text":"def setEnabled ( self , arg__1 : bool ) setEnabled(self, arg__1: bool)","title":"setEnabled"},{"location":"reference/streamdeck_ui/gui/#setfixedheight","text":"def setFixedHeight ( self , h : int ) setFixedHeight(self, h: int)","title":"setFixedHeight"},{"location":"reference/streamdeck_ui/gui/#setfixedsize","text":"def setFixedSize ( ... ) setFixedSize(self, arg__1: PySide2.QtCore.QSize) setFixedSize(self, w: int, h: int)","title":"setFixedSize"},{"location":"reference/streamdeck_ui/gui/#setfixedwidth","text":"def setFixedWidth ( self , w : int ) setFixedWidth(self, w: int)","title":"setFixedWidth"},{"location":"reference/streamdeck_ui/gui/#setfocus","text":"def setFocus ( ... ) setFocus(self) setFocus(self, reason: PySide2.QtCore.Qt.FocusReason)","title":"setFocus"},{"location":"reference/streamdeck_ui/gui/#setfocuspolicy","text":"def setFocusPolicy ( self , policy : PySide2 . QtCore . Qt . FocusPolicy ) setFocusPolicy(self, policy: PySide2.QtCore.Qt.FocusPolicy)","title":"setFocusPolicy"},{"location":"reference/streamdeck_ui/gui/#setfocusproxy","text":"def setFocusProxy ( self , arg__1 : PySide2 . QtWidgets . QWidget ) setFocusProxy(self, arg__1: PySide2.QtWidgets.QWidget)","title":"setFocusProxy"},{"location":"reference/streamdeck_ui/gui/#setfont","text":"def setFont ( self , arg__1 : PySide2 . QtGui . QFont ) setFont(self, arg__1: PySide2.QtGui.QFont)","title":"setFont"},{"location":"reference/streamdeck_ui/gui/#setforegroundrole","text":"def setForegroundRole ( self , arg__1 : PySide2 . QtGui . QPalette . ColorRole ) setForegroundRole(self, arg__1: PySide2.QtGui.QPalette.ColorRole)","title":"setForegroundRole"},{"location":"reference/streamdeck_ui/gui/#setgeometry","text":"def setGeometry ( ... ) setGeometry(self, arg__1: PySide2.QtCore.QRect) setGeometry(self, x: int, y: int, w: int, h: int)","title":"setGeometry"},{"location":"reference/streamdeck_ui/gui/#setgraphicseffect","text":"def setGraphicsEffect ( self , effect : PySide2 . QtWidgets . QGraphicsEffect ) setGraphicsEffect(self, effect: PySide2.QtWidgets.QGraphicsEffect)","title":"setGraphicsEffect"},{"location":"reference/streamdeck_ui/gui/#sethidden","text":"def setHidden ( self , hidden : bool ) setHidden(self, hidden: bool)","title":"setHidden"},{"location":"reference/streamdeck_ui/gui/#seticonsize","text":"def setIconSize ( self , iconSize : PySide2 . QtCore . QSize ) setIconSize(self, iconSize: PySide2.QtCore.QSize)","title":"setIconSize"},{"location":"reference/streamdeck_ui/gui/#setinputmethodhints","text":"def setInputMethodHints ( self , hints : PySide2 . QtCore . Qt . InputMethodHints ) setInputMethodHints(self, hints: PySide2.QtCore.Qt.InputMethodHints)","title":"setInputMethodHints"},{"location":"reference/streamdeck_ui/gui/#setlayout","text":"def setLayout ( self , arg__1 : PySide2 . QtWidgets . QLayout ) setLayout(self, arg__1: PySide2.QtWidgets.QLayout)","title":"setLayout"},{"location":"reference/streamdeck_ui/gui/#setlayoutdirection","text":"def setLayoutDirection ( self , direction : PySide2 . QtCore . Qt . LayoutDirection ) setLayoutDirection(self, direction: PySide2.QtCore.Qt.LayoutDirection)","title":"setLayoutDirection"},{"location":"reference/streamdeck_ui/gui/#setlocale","text":"def setLocale ( self , locale : PySide2 . QtCore . QLocale ) setLocale(self, locale: PySide2.QtCore.QLocale)","title":"setLocale"},{"location":"reference/streamdeck_ui/gui/#setmask","text":"def setMask ( ... ) setMask(self, arg__1: PySide2.QtGui.QBitmap) setMask(self, arg__1: PySide2.QtGui.QRegion)","title":"setMask"},{"location":"reference/streamdeck_ui/gui/#setmaximumheight","text":"def setMaximumHeight ( self , maxh : int ) setMaximumHeight(self, maxh: int)","title":"setMaximumHeight"},{"location":"reference/streamdeck_ui/gui/#setmaximumsize","text":"def setMaximumSize ( ... ) setMaximumSize(self, arg__1: PySide2.QtCore.QSize) setMaximumSize(self, maxw: int, maxh: int)","title":"setMaximumSize"},{"location":"reference/streamdeck_ui/gui/#setmaximumwidth","text":"def setMaximumWidth ( self , maxw : int ) setMaximumWidth(self, maxw: int)","title":"setMaximumWidth"},{"location":"reference/streamdeck_ui/gui/#setmenubar","text":"def setMenuBar ( self , menubar : PySide2 . QtWidgets . QMenuBar ) setMenuBar(self, menubar: PySide2.QtWidgets.QMenuBar)","title":"setMenuBar"},{"location":"reference/streamdeck_ui/gui/#setmenuwidget","text":"def setMenuWidget ( self , menubar : PySide2 . QtWidgets . QWidget ) setMenuWidget(self, menubar: PySide2.QtWidgets.QWidget)","title":"setMenuWidget"},{"location":"reference/streamdeck_ui/gui/#setminimumheight","text":"def setMinimumHeight ( self , minh : int ) setMinimumHeight(self, minh: int)","title":"setMinimumHeight"},{"location":"reference/streamdeck_ui/gui/#setminimumsize","text":"def setMinimumSize ( ... ) setMinimumSize(self, arg__1: PySide2.QtCore.QSize) setMinimumSize(self, minw: int, minh: int)","title":"setMinimumSize"},{"location":"reference/streamdeck_ui/gui/#setminimumwidth","text":"def setMinimumWidth ( self , minw : int ) setMinimumWidth(self, minw: int)","title":"setMinimumWidth"},{"location":"reference/streamdeck_ui/gui/#setmousetracking","text":"def setMouseTracking ( self , enable : bool ) setMouseTracking(self, enable: bool)","title":"setMouseTracking"},{"location":"reference/streamdeck_ui/gui/#setobjectname","text":"def setObjectName ( self , name : str ) setObjectName(self, name: str)","title":"setObjectName"},{"location":"reference/streamdeck_ui/gui/#setpalette","text":"def setPalette ( self , arg__1 : PySide2 . QtGui . QPalette ) setPalette(self, arg__1: PySide2.QtGui.QPalette)","title":"setPalette"},{"location":"reference/streamdeck_ui/gui/#setparent","text":"def setParent ( ... ) setParent(self, parent: PySide2.QtWidgets.QWidget) setParent(self, parent: PySide2.QtWidgets.QWidget, f: PySide2.QtCore.Qt.WindowFlags)","title":"setParent"},{"location":"reference/streamdeck_ui/gui/#setproperty","text":"def setProperty ( self , name : str , value : typing . Any ) -> bool setProperty(self, name: str, value: typing.Any) -> bool","title":"setProperty"},{"location":"reference/streamdeck_ui/gui/#setshortcutautorepeat","text":"def setShortcutAutoRepeat ( self , id : int , enable : bool = True ) setShortcutAutoRepeat(self, id: int, enable: bool = True)","title":"setShortcutAutoRepeat"},{"location":"reference/streamdeck_ui/gui/#setshortcutenabled","text":"def setShortcutEnabled ( self , id : int , enable : bool = True ) setShortcutEnabled(self, id: int, enable: bool = True)","title":"setShortcutEnabled"},{"location":"reference/streamdeck_ui/gui/#setsizeincrement","text":"def setSizeIncrement ( ... ) setSizeIncrement(self, arg__1: PySide2.QtCore.QSize) setSizeIncrement(self, w: int, h: int)","title":"setSizeIncrement"},{"location":"reference/streamdeck_ui/gui/#setsizepolicy","text":"def setSizePolicy ( ... ) setSizePolicy(self, arg__1: PySide2.QtWidgets.QSizePolicy) setSizePolicy(self, horizontal: PySide2.QtWidgets.QSizePolicy.Policy, vertical: PySide2.QtWidgets.QSizePolicy.Policy)","title":"setSizePolicy"},{"location":"reference/streamdeck_ui/gui/#setstatusbar","text":"def setStatusBar ( self , statusbar : PySide2 . QtWidgets . QStatusBar ) setStatusBar(self, statusbar: PySide2.QtWidgets.QStatusBar)","title":"setStatusBar"},{"location":"reference/streamdeck_ui/gui/#setstatustip","text":"def setStatusTip ( self , arg__1 : str ) setStatusTip(self, arg__1: str)","title":"setStatusTip"},{"location":"reference/streamdeck_ui/gui/#setstyle","text":"def setStyle ( self , arg__1 : PySide2 . QtWidgets . QStyle ) setStyle(self, arg__1: PySide2.QtWidgets.QStyle)","title":"setStyle"},{"location":"reference/streamdeck_ui/gui/#setstylesheet","text":"def setStyleSheet ( self , styleSheet : str ) setStyleSheet(self, styleSheet: str)","title":"setStyleSheet"},{"location":"reference/streamdeck_ui/gui/#settabposition","text":"def setTabPosition ( self , areas : PySide2 . QtCore . Qt . DockWidgetAreas , tabPosition : PySide2 . QtWidgets . QTabWidget . TabPosition ) setTabPosition(self, areas: PySide2.QtCore.Qt.DockWidgetAreas, tabPosition: PySide2.QtWidgets.QTabWidget.TabPosition)","title":"setTabPosition"},{"location":"reference/streamdeck_ui/gui/#settabshape","text":"def setTabShape ( self , tabShape : PySide2 . QtWidgets . QTabWidget . TabShape ) setTabShape(self, tabShape: PySide2.QtWidgets.QTabWidget.TabShape)","title":"setTabShape"},{"location":"reference/streamdeck_ui/gui/#settablettracking","text":"def setTabletTracking ( self , enable : bool ) setTabletTracking(self, enable: bool)","title":"setTabletTracking"},{"location":"reference/streamdeck_ui/gui/#settoolbuttonstyle","text":"def setToolButtonStyle ( self , toolButtonStyle : PySide2 . QtCore . Qt . ToolButtonStyle ) setToolButtonStyle(self, toolButtonStyle: PySide2.QtCore.Qt.ToolButtonStyle)","title":"setToolButtonStyle"},{"location":"reference/streamdeck_ui/gui/#settooltip","text":"def setToolTip ( self , arg__1 : str ) setToolTip(self, arg__1: str)","title":"setToolTip"},{"location":"reference/streamdeck_ui/gui/#settooltipduration","text":"def setToolTipDuration ( self , msec : int ) setToolTipDuration(self, msec: int)","title":"setToolTipDuration"},{"location":"reference/streamdeck_ui/gui/#setunifiedtitleandtoolbaronmac","text":"def setUnifiedTitleAndToolBarOnMac ( self , set : bool ) setUnifiedTitleAndToolBarOnMac(self, set: bool)","title":"setUnifiedTitleAndToolBarOnMac"},{"location":"reference/streamdeck_ui/gui/#setupdatesenabled","text":"def setUpdatesEnabled ( self , enable : bool ) setUpdatesEnabled(self, enable: bool)","title":"setUpdatesEnabled"},{"location":"reference/streamdeck_ui/gui/#setvisible","text":"def setVisible ( self , visible : bool ) setVisible(self, visible: bool)","title":"setVisible"},{"location":"reference/streamdeck_ui/gui/#setwhatsthis","text":"def setWhatsThis ( self , arg__1 : str ) setWhatsThis(self, arg__1: str)","title":"setWhatsThis"},{"location":"reference/streamdeck_ui/gui/#setwindowfilepath","text":"def setWindowFilePath ( self , filePath : str ) setWindowFilePath(self, filePath: str)","title":"setWindowFilePath"},{"location":"reference/streamdeck_ui/gui/#setwindowflag","text":"def setWindowFlag ( self , arg__1 : PySide2 . QtCore . Qt . WindowType , on : bool = True ) setWindowFlag(self, arg__1: PySide2.QtCore.Qt.WindowType, on: bool = True)","title":"setWindowFlag"},{"location":"reference/streamdeck_ui/gui/#setwindowflags","text":"def setWindowFlags ( self , type : PySide2 . QtCore . Qt . WindowFlags ) setWindowFlags(self, type: PySide2.QtCore.Qt.WindowFlags)","title":"setWindowFlags"},{"location":"reference/streamdeck_ui/gui/#setwindowicon","text":"def setWindowIcon ( self , icon : PySide2 . QtGui . QIcon ) setWindowIcon(self, icon: PySide2.QtGui.QIcon)","title":"setWindowIcon"},{"location":"reference/streamdeck_ui/gui/#setwindowicontext","text":"def setWindowIconText ( self , arg__1 : str ) setWindowIconText(self, arg__1: str)","title":"setWindowIconText"},{"location":"reference/streamdeck_ui/gui/#setwindowmodality","text":"def setWindowModality ( self , windowModality : PySide2 . QtCore . Qt . WindowModality ) setWindowModality(self, windowModality: PySide2.QtCore.Qt.WindowModality)","title":"setWindowModality"},{"location":"reference/streamdeck_ui/gui/#setwindowmodified","text":"def setWindowModified ( self , arg__1 : bool ) setWindowModified(self, arg__1: bool)","title":"setWindowModified"},{"location":"reference/streamdeck_ui/gui/#setwindowopacity","text":"def setWindowOpacity ( self , level : float ) setWindowOpacity(self, level: float)","title":"setWindowOpacity"},{"location":"reference/streamdeck_ui/gui/#setwindowrole","text":"def setWindowRole ( self , arg__1 : str ) setWindowRole(self, arg__1: str)","title":"setWindowRole"},{"location":"reference/streamdeck_ui/gui/#setwindowstate","text":"def setWindowState ( self , state : PySide2 . QtCore . Qt . WindowStates ) setWindowState(self, state: PySide2.QtCore.Qt.WindowStates)","title":"setWindowState"},{"location":"reference/streamdeck_ui/gui/#setwindowtitle","text":"def setWindowTitle ( self , arg__1 : str ) setWindowTitle(self, arg__1: str)","title":"setWindowTitle"},{"location":"reference/streamdeck_ui/gui/#sharedpainter","text":"def sharedPainter ( self ) -> PySide2 . QtGui . QPainter sharedPainter(self) -> PySide2.QtGui.QPainter","title":"sharedPainter"},{"location":"reference/streamdeck_ui/gui/#show","text":"def show ( self ) show(self)","title":"show"},{"location":"reference/streamdeck_ui/gui/#showevent","text":"def showEvent ( self , event : PySide2 . QtGui . QShowEvent ) showEvent(self, event: PySide2.QtGui.QShowEvent)","title":"showEvent"},{"location":"reference/streamdeck_ui/gui/#showfullscreen","text":"def showFullScreen ( self ) showFullScreen(self)","title":"showFullScreen"},{"location":"reference/streamdeck_ui/gui/#showmaximized","text":"def showMaximized ( self ) showMaximized(self)","title":"showMaximized"},{"location":"reference/streamdeck_ui/gui/#showminimized","text":"def showMinimized ( self ) showMinimized(self)","title":"showMinimized"},{"location":"reference/streamdeck_ui/gui/#shownormal","text":"def showNormal ( self ) showNormal(self)","title":"showNormal"},{"location":"reference/streamdeck_ui/gui/#signalsblocked","text":"def signalsBlocked ( self ) -> bool signalsBlocked(self) -> bool","title":"signalsBlocked"},{"location":"reference/streamdeck_ui/gui/#size","text":"def size ( self ) -> PySide2 . QtCore . QSize size(self) -> PySide2.QtCore.QSize","title":"size"},{"location":"reference/streamdeck_ui/gui/#sizehint","text":"def sizeHint ( self ) -> PySide2 . QtCore . QSize sizeHint(self) -> PySide2.QtCore.QSize","title":"sizeHint"},{"location":"reference/streamdeck_ui/gui/#sizeincrement","text":"def sizeIncrement ( self ) -> PySide2 . QtCore . QSize sizeIncrement(self) -> PySide2.QtCore.QSize","title":"sizeIncrement"},{"location":"reference/streamdeck_ui/gui/#sizepolicy","text":"def sizePolicy ( self ) -> PySide2 . QtWidgets . QSizePolicy sizePolicy(self) -> PySide2.QtWidgets.QSizePolicy","title":"sizePolicy"},{"location":"reference/streamdeck_ui/gui/#splitdockwidget","text":"def splitDockWidget ( self , after : PySide2 . QtWidgets . QDockWidget , dockwidget : PySide2 . QtWidgets . QDockWidget , orientation : PySide2 . QtCore . Qt . Orientation ) splitDockWidget(self, after: PySide2.QtWidgets.QDockWidget, dockwidget: PySide2.QtWidgets.QDockWidget, orientation: PySide2.QtCore.Qt.Orientation)","title":"splitDockWidget"},{"location":"reference/streamdeck_ui/gui/#stackunder","text":"def stackUnder ( self , arg__1 : PySide2 . QtWidgets . QWidget ) stackUnder(self, arg__1: PySide2.QtWidgets.QWidget)","title":"stackUnder"},{"location":"reference/streamdeck_ui/gui/#starttimer","text":"def startTimer ( self , interval : int , timerType : PySide2 . QtCore . Qt . TimerType = PySide2 . QtCore . Qt . TimerType . CoarseTimer ) -> int startTimer(self, interval: int, timerType: PySide2.QtCore.Qt.TimerType = PySide2.QtCore.Qt.TimerType.CoarseTimer) -> int","title":"startTimer"},{"location":"reference/streamdeck_ui/gui/#statusbar","text":"def statusBar ( self ) -> PySide2 . QtWidgets . QStatusBar statusBar(self) -> PySide2.QtWidgets.QStatusBar","title":"statusBar"},{"location":"reference/streamdeck_ui/gui/#statustip","text":"def statusTip ( self ) -> str statusTip(self) -> str","title":"statusTip"},{"location":"reference/streamdeck_ui/gui/#style","text":"def style ( self ) -> PySide2 . QtWidgets . QStyle style(self) -> PySide2.QtWidgets.QStyle","title":"style"},{"location":"reference/streamdeck_ui/gui/#stylesheet","text":"def styleSheet ( self ) -> str styleSheet(self) -> str","title":"styleSheet"},{"location":"reference/streamdeck_ui/gui/#systray_clicked","text":"def systray_clicked ( self , _status = None ) -> None View Source def systray_clicked ( self , _status = None ) -> None : self . hide () if self . window_shown : self . window_shown = False return self . show () self . activateWindow () getattr ( self , \" raise \" )() # noqa : B009 - Can ' t call as self.raise() due to syntax error. self . window_shown = True","title":"systray_clicked"},{"location":"reference/streamdeck_ui/gui/#tabposition","text":"def tabPosition ( self , area : PySide2 . QtCore . Qt . DockWidgetArea ) -> PySide2 . QtWidgets . QTabWidget . TabPosition tabPosition(self, area: PySide2.QtCore.Qt.DockWidgetArea) -> PySide2.QtWidgets.QTabWidget.TabPosition","title":"tabPosition"},{"location":"reference/streamdeck_ui/gui/#tabshape","text":"def tabShape ( self ) -> PySide2 . QtWidgets . QTabWidget . TabShape tabShape(self) -> PySide2.QtWidgets.QTabWidget.TabShape","title":"tabShape"},{"location":"reference/streamdeck_ui/gui/#tabifieddockwidgets","text":"def tabifiedDockWidgets ( self , dockwidget : PySide2 . QtWidgets . QDockWidget ) -> typing . List [ PySide2 . QtWidgets . QDockWidget ] tabifiedDockWidgets(self, dockwidget: PySide2.QtWidgets.QDockWidget) -> typing.List[PySide2.QtWidgets.QDockWidget]","title":"tabifiedDockWidgets"},{"location":"reference/streamdeck_ui/gui/#tabifydockwidget","text":"def tabifyDockWidget ( self , first : PySide2 . QtWidgets . QDockWidget , second : PySide2 . QtWidgets . QDockWidget ) tabifyDockWidget(self, first: PySide2.QtWidgets.QDockWidget, second: PySide2.QtWidgets.QDockWidget)","title":"tabifyDockWidget"},{"location":"reference/streamdeck_ui/gui/#tabletevent","text":"def tabletEvent ( self , event : PySide2 . QtGui . QTabletEvent ) tabletEvent(self, event: PySide2.QtGui.QTabletEvent)","title":"tabletEvent"},{"location":"reference/streamdeck_ui/gui/#takecentralwidget","text":"def takeCentralWidget ( self ) -> PySide2 . QtWidgets . QWidget takeCentralWidget(self) -> PySide2.QtWidgets.QWidget","title":"takeCentralWidget"},{"location":"reference/streamdeck_ui/gui/#testattribute","text":"def testAttribute ( self , arg__1 : PySide2 . QtCore . Qt . WidgetAttribute ) -> bool testAttribute(self, arg__1: PySide2.QtCore.Qt.WidgetAttribute) -> bool","title":"testAttribute"},{"location":"reference/streamdeck_ui/gui/#thread","text":"def thread ( self ) -> PySide2 . QtCore . QThread thread(self) -> PySide2.QtCore.QThread","title":"thread"},{"location":"reference/streamdeck_ui/gui/#timerevent","text":"def timerEvent ( self , event : PySide2 . QtCore . QTimerEvent ) timerEvent(self, event: PySide2.QtCore.QTimerEvent)","title":"timerEvent"},{"location":"reference/streamdeck_ui/gui/#toolbararea","text":"def toolBarArea ( self , toolbar : PySide2 . QtWidgets . QToolBar ) -> PySide2 . QtCore . Qt . ToolBarArea toolBarArea(self, toolbar: PySide2.QtWidgets.QToolBar) -> PySide2.QtCore.Qt.ToolBarArea","title":"toolBarArea"},{"location":"reference/streamdeck_ui/gui/#toolbarbreak","text":"def toolBarBreak ( self , toolbar : PySide2 . QtWidgets . QToolBar ) -> bool toolBarBreak(self, toolbar: PySide2.QtWidgets.QToolBar) -> bool","title":"toolBarBreak"},{"location":"reference/streamdeck_ui/gui/#toolbuttonstyle","text":"def toolButtonStyle ( self ) -> PySide2 . QtCore . Qt . ToolButtonStyle toolButtonStyle(self) -> PySide2.QtCore.Qt.ToolButtonStyle","title":"toolButtonStyle"},{"location":"reference/streamdeck_ui/gui/#tooltip","text":"def toolTip ( self ) -> str toolTip(self) -> str","title":"toolTip"},{"location":"reference/streamdeck_ui/gui/#tooltipduration","text":"def toolTipDuration ( self ) -> int toolTipDuration(self) -> int","title":"toolTipDuration"},{"location":"reference/streamdeck_ui/gui/#toplevelwidget","text":"def topLevelWidget ( self ) -> PySide2 . QtWidgets . QWidget topLevelWidget(self) -> PySide2.QtWidgets.QWidget","title":"topLevelWidget"},{"location":"reference/streamdeck_ui/gui/#tr","text":"def tr ( self , arg__1 : str , arg__2 : str = '' , arg__3 : int = - 1 ) -> str tr(self, arg__1: str, arg__2: str = '', arg__3: int = -1) -> str","title":"tr"},{"location":"reference/streamdeck_ui/gui/#undermouse","text":"def underMouse ( self ) -> bool underMouse(self) -> bool","title":"underMouse"},{"location":"reference/streamdeck_ui/gui/#ungrabgesture","text":"def ungrabGesture ( self , type : PySide2 . QtCore . Qt . GestureType ) ungrabGesture(self, type: PySide2.QtCore.Qt.GestureType)","title":"ungrabGesture"},{"location":"reference/streamdeck_ui/gui/#unifiedtitleandtoolbaronmac","text":"def unifiedTitleAndToolBarOnMac ( self ) -> bool unifiedTitleAndToolBarOnMac(self) -> bool","title":"unifiedTitleAndToolBarOnMac"},{"location":"reference/streamdeck_ui/gui/#unsetcursor","text":"def unsetCursor ( self ) unsetCursor(self)","title":"unsetCursor"},{"location":"reference/streamdeck_ui/gui/#unsetlayoutdirection","text":"def unsetLayoutDirection ( self ) unsetLayoutDirection(self)","title":"unsetLayoutDirection"},{"location":"reference/streamdeck_ui/gui/#unsetlocale","text":"def unsetLocale ( self ) unsetLocale(self)","title":"unsetLocale"},{"location":"reference/streamdeck_ui/gui/#update","text":"def update ( ... ) update(self) update(self, arg__1: PySide2.QtCore.QRect) update(self, arg__1: PySide2.QtGui.QRegion) update(self, x: int, y: int, w: int, h: int)","title":"update"},{"location":"reference/streamdeck_ui/gui/#updategeometry","text":"def updateGeometry ( self ) updateGeometry(self)","title":"updateGeometry"},{"location":"reference/streamdeck_ui/gui/#updatemicrofocus","text":"def updateMicroFocus ( self ) updateMicroFocus(self)","title":"updateMicroFocus"},{"location":"reference/streamdeck_ui/gui/#updatesenabled","text":"def updatesEnabled ( self ) -> bool updatesEnabled(self) -> bool","title":"updatesEnabled"},{"location":"reference/streamdeck_ui/gui/#visibleregion","text":"def visibleRegion ( self ) -> PySide2 . QtGui . QRegion visibleRegion(self) -> PySide2.QtGui.QRegion","title":"visibleRegion"},{"location":"reference/streamdeck_ui/gui/#whatsthis","text":"def whatsThis ( self ) -> str whatsThis(self) -> str","title":"whatsThis"},{"location":"reference/streamdeck_ui/gui/#wheelevent","text":"def wheelEvent ( self , event : PySide2 . QtGui . QWheelEvent ) wheelEvent(self, event: PySide2.QtGui.QWheelEvent)","title":"wheelEvent"},{"location":"reference/streamdeck_ui/gui/#width","text":"def width ( self ) -> int width(self) -> int","title":"width"},{"location":"reference/streamdeck_ui/gui/#widthmm","text":"def widthMM ( self ) -> int widthMM(self) -> int","title":"widthMM"},{"location":"reference/streamdeck_ui/gui/#winid","text":"def winId ( self ) -> int winId(self) -> int","title":"winId"},{"location":"reference/streamdeck_ui/gui/#window","text":"def window ( self ) -> PySide2 . QtWidgets . QWidget window(self) -> PySide2.QtWidgets.QWidget","title":"window"},{"location":"reference/streamdeck_ui/gui/#windowfilepath","text":"def windowFilePath ( self ) -> str windowFilePath(self) -> str","title":"windowFilePath"},{"location":"reference/streamdeck_ui/gui/#windowflags","text":"def windowFlags ( self ) -> PySide2 . QtCore . Qt . WindowFlags windowFlags(self) -> PySide2.QtCore.Qt.WindowFlags","title":"windowFlags"},{"location":"reference/streamdeck_ui/gui/#windowhandle","text":"def windowHandle ( self ) -> PySide2 . QtGui . QWindow windowHandle(self) -> PySide2.QtGui.QWindow","title":"windowHandle"},{"location":"reference/streamdeck_ui/gui/#windowicon","text":"def windowIcon ( self ) -> PySide2 . QtGui . QIcon windowIcon(self) -> PySide2.QtGui.QIcon","title":"windowIcon"},{"location":"reference/streamdeck_ui/gui/#windowicontext","text":"def windowIconText ( self ) -> str windowIconText(self) -> str","title":"windowIconText"},{"location":"reference/streamdeck_ui/gui/#windowmodality","text":"def windowModality ( self ) -> PySide2 . QtCore . Qt . WindowModality windowModality(self) -> PySide2.QtCore.Qt.WindowModality","title":"windowModality"},{"location":"reference/streamdeck_ui/gui/#windowopacity","text":"def windowOpacity ( self ) -> float windowOpacity(self) -> float","title":"windowOpacity"},{"location":"reference/streamdeck_ui/gui/#windowrole","text":"def windowRole ( self ) -> str windowRole(self) -> str","title":"windowRole"},{"location":"reference/streamdeck_ui/gui/#windowstate","text":"def windowState ( self ) -> PySide2 . QtCore . Qt . WindowStates windowState(self) -> PySide2.QtCore.Qt.WindowStates","title":"windowState"},{"location":"reference/streamdeck_ui/gui/#windowtitle","text":"def windowTitle ( self ) -> str windowTitle(self) -> str","title":"windowTitle"},{"location":"reference/streamdeck_ui/gui/#windowtype","text":"def windowType ( self ) -> PySide2 . QtCore . Qt . WindowType windowType(self) -> PySide2.QtCore.Qt.WindowType","title":"windowType"},{"location":"reference/streamdeck_ui/gui/#x","text":"def x ( self ) -> int x(self) -> int","title":"x"},{"location":"reference/streamdeck_ui/gui/#y","text":"def y ( self ) -> int y(self) -> int","title":"y"},{"location":"reference/streamdeck_ui/ui_main/","text":"Module streamdeck_ui.ui_main View Source # -*- coding: utf-8 -*- # Form implementation generated from reading ui file 'streamdeck_ui/main.ui', # licensing of 'streamdeck_ui/main.ui' applies. # # Created: Sun Oct 6 02:46:55 2019 # by: pyside2-uic running on PySide2 5.13.1 # # WARNING! All changes made in this file will be lost! from PySide2 import QtCore , QtGui , QtWidgets class Ui_MainWindow ( object ): def setupUi ( self , MainWindow ): MainWindow . setObjectName ( \"MainWindow\" ) MainWindow . resize ( 844 , 625 ) self . centralwidget = QtWidgets . QWidget ( MainWindow ) self . centralwidget . setObjectName ( \"centralwidget\" ) self . verticalLayout_2 = QtWidgets . QVBoxLayout ( self . centralwidget ) self . verticalLayout_2 . setObjectName ( \"verticalLayout_2\" ) self . verticalLayout = QtWidgets . QVBoxLayout () self . verticalLayout . setObjectName ( \"verticalLayout\" ) self . horizontalLayout_3 = QtWidgets . QHBoxLayout () self . horizontalLayout_3 . setObjectName ( \"horizontalLayout_3\" ) self . device_list = QtWidgets . QComboBox ( self . centralwidget ) self . device_list . setMinimumSize ( QtCore . QSize ( 400 , 0 )) self . device_list . setObjectName ( \"device_list\" ) self . horizontalLayout_3 . addWidget ( self . device_list ) spacerItem = QtWidgets . QSpacerItem ( 40 , 20 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Minimum ) self . horizontalLayout_3 . addItem ( spacerItem ) self . label_4 = QtWidgets . QLabel ( self . centralwidget ) sizePolicy = QtWidgets . QSizePolicy ( QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Preferred ) sizePolicy . setHorizontalStretch ( 0 ) sizePolicy . setVerticalStretch ( 0 ) sizePolicy . setHeightForWidth ( self . label_4 . sizePolicy () . hasHeightForWidth ()) self . label_4 . setSizePolicy ( sizePolicy ) self . label_4 . setObjectName ( \"label_4\" ) self . horizontalLayout_3 . addWidget ( self . label_4 ) self . brightness = QtWidgets . QSlider ( self . centralwidget ) sizePolicy = QtWidgets . QSizePolicy ( QtWidgets . QSizePolicy . Minimum , QtWidgets . QSizePolicy . Fixed ) sizePolicy . setHorizontalStretch ( 0 ) sizePolicy . setVerticalStretch ( 0 ) sizePolicy . setHeightForWidth ( self . brightness . sizePolicy () . hasHeightForWidth ()) self . brightness . setSizePolicy ( sizePolicy ) self . brightness . setMinimumSize ( QtCore . QSize ( 200 , 0 )) self . brightness . setOrientation ( QtCore . Qt . Horizontal ) self . brightness . setObjectName ( \"brightness\" ) self . horizontalLayout_3 . addWidget ( self . brightness ) self . verticalLayout . addLayout ( self . horizontalLayout_3 ) self . horizontalLayout = QtWidgets . QHBoxLayout () self . horizontalLayout . setContentsMargins ( - 1 , 20 , - 1 , - 1 ) self . horizontalLayout . setObjectName ( \"horizontalLayout\" ) self . pages = QtWidgets . QTabWidget ( self . centralwidget ) self . pages . setAutoFillBackground ( False ) self . pages . setStyleSheet ( \"b\" ) self . pages . setObjectName ( \"pages\" ) self . page_1 = QtWidgets . QWidget () self . page_1 . setObjectName ( \"page_1\" ) self . gridLayout_2 = QtWidgets . QGridLayout ( self . page_1 ) self . gridLayout_2 . setObjectName ( \"gridLayout_2\" ) self . pages . addTab ( self . page_1 , \"\" ) self . page_2 = QtWidgets . QWidget () self . page_2 . setObjectName ( \"page_2\" ) self . gridLayout_3 = QtWidgets . QGridLayout ( self . page_2 ) self . gridLayout_3 . setObjectName ( \"gridLayout_3\" ) self . pages . addTab ( self . page_2 , \"\" ) self . page_3 = QtWidgets . QWidget () self . page_3 . setObjectName ( \"page_3\" ) self . gridLayout_11 = QtWidgets . QGridLayout ( self . page_3 ) self . gridLayout_11 . setObjectName ( \"gridLayout_11\" ) self . pages . addTab ( self . page_3 , \"\" ) self . page_4 = QtWidgets . QWidget () self . page_4 . setObjectName ( \"page_4\" ) self . gridLayout_10 = QtWidgets . QGridLayout ( self . page_4 ) self . gridLayout_10 . setObjectName ( \"gridLayout_10\" ) self . pages . addTab ( self . page_4 , \"\" ) self . page_5 = QtWidgets . QWidget () self . page_5 . setObjectName ( \"page_5\" ) self . gridLayout_9 = QtWidgets . QGridLayout ( self . page_5 ) self . gridLayout_9 . setObjectName ( \"gridLayout_9\" ) self . pages . addTab ( self . page_5 , \"\" ) self . page_6 = QtWidgets . QWidget () self . page_6 . setObjectName ( \"page_6\" ) self . gridLayout_8 = QtWidgets . QGridLayout ( self . page_6 ) self . gridLayout_8 . setObjectName ( \"gridLayout_8\" ) self . pages . addTab ( self . page_6 , \"\" ) self . page_7 = QtWidgets . QWidget () self . page_7 . setObjectName ( \"page_7\" ) self . gridLayout_7 = QtWidgets . QGridLayout ( self . page_7 ) self . gridLayout_7 . setObjectName ( \"gridLayout_7\" ) self . pages . addTab ( self . page_7 , \"\" ) self . page_8 = QtWidgets . QWidget () self . page_8 . setObjectName ( \"page_8\" ) self . gridLayout_6 = QtWidgets . QGridLayout ( self . page_8 ) self . gridLayout_6 . setObjectName ( \"gridLayout_6\" ) self . pages . addTab ( self . page_8 , \"\" ) self . page_9 = QtWidgets . QWidget () self . page_9 . setObjectName ( \"page_9\" ) self . gridLayout_5 = QtWidgets . QGridLayout ( self . page_9 ) self . gridLayout_5 . setObjectName ( \"gridLayout_5\" ) self . pages . addTab ( self . page_9 , \"\" ) self . tab_10 = QtWidgets . QWidget () self . tab_10 . setObjectName ( \"tab_10\" ) self . gridLayout_4 = QtWidgets . QGridLayout ( self . tab_10 ) self . gridLayout_4 . setObjectName ( \"gridLayout_4\" ) self . pages . addTab ( self . tab_10 , \"\" ) self . horizontalLayout . addWidget ( self . pages ) self . groupBox = QtWidgets . QGroupBox ( self . centralwidget ) self . groupBox . setMinimumSize ( QtCore . QSize ( 250 , 0 )) self . groupBox . setMaximumSize ( QtCore . QSize ( 250 , 16777215 )) self . groupBox . setObjectName ( \"groupBox\" ) self . verticalLayout_3 = QtWidgets . QVBoxLayout ( self . groupBox ) self . verticalLayout_3 . setObjectName ( \"verticalLayout_3\" ) self . formLayout = QtWidgets . QFormLayout () self . formLayout . setObjectName ( \"formLayout\" ) self . label = QtWidgets . QLabel ( self . groupBox ) self . label . setObjectName ( \"label\" ) self . formLayout . setWidget ( 0 , QtWidgets . QFormLayout . LabelRole , self . label ) self . imageButton = QtWidgets . QPushButton ( self . groupBox ) self . imageButton . setObjectName ( \"imageButton\" ) self . formLayout . setWidget ( 0 , QtWidgets . QFormLayout . FieldRole , self . imageButton ) self . label_2 = QtWidgets . QLabel ( self . groupBox ) self . label_2 . setObjectName ( \"label_2\" ) self . formLayout . setWidget ( 1 , QtWidgets . QFormLayout . LabelRole , self . label_2 ) self . text = QtWidgets . QLineEdit ( self . groupBox ) self . text . setObjectName ( \"text\" ) self . formLayout . setWidget ( 1 , QtWidgets . QFormLayout . FieldRole , self . text ) self . label_3 = QtWidgets . QLabel ( self . groupBox ) self . label_3 . setObjectName ( \"label_3\" ) self . formLayout . setWidget ( 2 , QtWidgets . QFormLayout . LabelRole , self . label_3 ) self . command = QtWidgets . QLineEdit ( self . groupBox ) self . command . setObjectName ( \"command\" ) self . formLayout . setWidget ( 2 , QtWidgets . QFormLayout . FieldRole , self . command ) self . label_5 = QtWidgets . QLabel ( self . groupBox ) self . label_5 . setObjectName ( \"label_5\" ) self . formLayout . setWidget ( 3 , QtWidgets . QFormLayout . LabelRole , self . label_5 ) self . keys = QtWidgets . QLineEdit ( self . groupBox ) self . keys . setObjectName ( \"keys\" ) self . formLayout . setWidget ( 3 , QtWidgets . QFormLayout . FieldRole , self . keys ) self . label_6 = QtWidgets . QLabel ( self . groupBox ) self . label_6 . setObjectName ( \"label_6\" ) self . formLayout . setWidget ( 6 , QtWidgets . QFormLayout . LabelRole , self . label_6 ) self . write = QtWidgets . QPlainTextEdit ( self . groupBox ) self . write . setObjectName ( \"write\" ) self . formLayout . setWidget ( 6 , QtWidgets . QFormLayout . FieldRole , self . write ) self . label_8 = QtWidgets . QLabel ( self . groupBox ) self . label_8 . setObjectName ( \"label_8\" ) self . formLayout . setWidget ( 4 , QtWidgets . QFormLayout . LabelRole , self . label_8 ) self . switch_page = QtWidgets . QSpinBox ( self . groupBox ) self . switch_page . setMinimum ( 0 ) self . switch_page . setMaximum ( 10 ) self . switch_page . setProperty ( \"value\" , 0 ) self . switch_page . setObjectName ( \"switch_page\" ) self . formLayout . setWidget ( 4 , QtWidgets . QFormLayout . FieldRole , self . switch_page ) self . label_7 = QtWidgets . QLabel ( self . groupBox ) self . label_7 . setObjectName ( \"label_7\" ) self . formLayout . setWidget ( 5 , QtWidgets . QFormLayout . LabelRole , self . label_7 ) self . change_brightness = QtWidgets . QSpinBox ( self . groupBox ) self . change_brightness . setMinimum ( - 99 ) self . change_brightness . setObjectName ( \"change_brightness\" ) self . formLayout . setWidget ( 5 , QtWidgets . QFormLayout . FieldRole , self . change_brightness ) self . verticalLayout_3 . addLayout ( self . formLayout ) self . horizontalLayout . addWidget ( self . groupBox ) self . verticalLayout . addLayout ( self . horizontalLayout ) self . verticalLayout_2 . addLayout ( self . verticalLayout ) MainWindow . setCentralWidget ( self . centralwidget ) self . menubar = QtWidgets . QMenuBar ( MainWindow ) self . menubar . setGeometry ( QtCore . QRect ( 0 , 0 , 844 , 30 )) self . menubar . setObjectName ( \"menubar\" ) self . menuFile = QtWidgets . QMenu ( self . menubar ) self . menuFile . setObjectName ( \"menuFile\" ) MainWindow . setMenuBar ( self . menubar ) self . statusbar = QtWidgets . QStatusBar ( MainWindow ) self . statusbar . setObjectName ( \"statusbar\" ) MainWindow . setStatusBar ( self . statusbar ) self . actionImport = QtWidgets . QAction ( MainWindow ) self . actionImport . setObjectName ( \"actionImport\" ) self . actionExport = QtWidgets . QAction ( MainWindow ) self . actionExport . setObjectName ( \"actionExport\" ) self . menuFile . addAction ( self . actionImport ) self . menuFile . addAction ( self . actionExport ) self . menubar . addAction ( self . menuFile . menuAction ()) self . retranslateUi ( MainWindow ) self . pages . setCurrentIndex ( 0 ) QtCore . QMetaObject . connectSlotsByName ( MainWindow ) def retranslateUi ( self , MainWindow ): MainWindow . setWindowTitle ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"MainWindow\" , None , - 1 ) ) self . label_4 . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Brightness:\" , None , - 1 ) ) self . pages . setTabText ( self . pages . indexOf ( self . page_1 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"Page 1\" , None , - 1 ), ) self . pages . setTabText ( self . pages . indexOf ( self . page_2 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"2\" , None , - 1 ), ) self . pages . setTabText ( self . pages . indexOf ( self . page_3 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"3\" , None , - 1 ), ) self . pages . setTabText ( self . pages . indexOf ( self . page_4 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"4\" , None , - 1 ), ) self . pages . setTabText ( self . pages . indexOf ( self . page_5 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"5\" , None , - 1 ), ) self . pages . setTabText ( self . pages . indexOf ( self . page_6 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"6\" , None , - 1 ), ) self . pages . setTabText ( self . pages . indexOf ( self . page_7 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"7\" , None , - 1 ), ) self . pages . setTabText ( self . pages . indexOf ( self . page_8 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"8\" , None , - 1 ), ) self . pages . setTabText ( self . pages . indexOf ( self . page_9 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"9\" , None , - 1 ), ) self . pages . setTabText ( self . pages . indexOf ( self . tab_10 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"10\" , None , - 1 ), ) self . groupBox . setTitle ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Configure Button\" , None , - 1 ) ) self . label . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Image:\" , None , - 1 )) self . imageButton . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Choose\" , None , - 1 )) self . label_2 . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Text:\" , None , - 1 )) self . label_3 . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Command:\" , None , - 1 )) self . label_5 . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Press Keys:\" , None , - 1 ) ) self . label_6 . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Write Text:\" , None , - 1 ) ) self . label_8 . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Switch Page:\" , None , - 1 ) ) self . label_7 . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Brightness +/-:\" , None , - 1 ) ) self . menuFile . setTitle ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"File\" , None , - 1 )) self . actionImport . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Import\" , None , - 1 ) ) self . actionExport . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Export\" , None , - 1 ) ) Classes Ui_MainWindow class Ui_MainWindow ( / , * args , ** kwargs ) View Source class Ui_MainWindow ( object ) : def setupUi ( self , MainWindow ) : MainWindow . setObjectName ( \" MainWindow \" ) MainWindow . resize ( 844 , 625 ) self . centralwidget = QtWidgets . QWidget ( MainWindow ) self . centralwidget . setObjectName ( \" centralwidget \" ) self . verticalLayout_2 = QtWidgets . QVBoxLayout ( self . centralwidget ) self . verticalLayout_2 . setObjectName ( \" verticalLayout_2 \" ) self . verticalLayout = QtWidgets . QVBoxLayout () self . verticalLayout . setObjectName ( \" verticalLayout \" ) self . horizontalLayout_3 = QtWidgets . QHBoxLayout () self . horizontalLayout_3 . setObjectName ( \" horizontalLayout_3 \" ) self . device_list = QtWidgets . QComboBox ( self . centralwidget ) self . device_list . setMinimumSize ( QtCore . QSize ( 400 , 0 )) self . device_list . setObjectName ( \" device_list \" ) self . horizontalLayout_3 . addWidget ( self . device_list ) spacerItem = QtWidgets . QSpacerItem ( 40 , 20 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Minimum ) self . horizontalLayout_3 . addItem ( spacerItem ) self . label_4 = QtWidgets . QLabel ( self . centralwidget ) sizePolicy = QtWidgets . QSizePolicy ( QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Preferred ) sizePolicy . setHorizontalStretch ( 0 ) sizePolicy . setVerticalStretch ( 0 ) sizePolicy . setHeightForWidth ( self . label_4 . sizePolicy () . hasHeightForWidth ()) self . label_4 . setSizePolicy ( sizePolicy ) self . label_4 . setObjectName ( \" label_4 \" ) self . horizontalLayout_3 . addWidget ( self . label_4 ) self . brightness = QtWidgets . QSlider ( self . centralwidget ) sizePolicy = QtWidgets . QSizePolicy ( QtWidgets . QSizePolicy . Minimum , QtWidgets . QSizePolicy . Fixed ) sizePolicy . setHorizontalStretch ( 0 ) sizePolicy . setVerticalStretch ( 0 ) sizePolicy . setHeightForWidth ( self . brightness . sizePolicy () . hasHeightForWidth ()) self . brightness . setSizePolicy ( sizePolicy ) self . brightness . setMinimumSize ( QtCore . QSize ( 200 , 0 )) self . brightness . setOrientation ( QtCore . Qt . Horizontal ) self . brightness . setObjectName ( \" brightness \" ) self . horizontalLayout_3 . addWidget ( self . brightness ) self . verticalLayout . addLayout ( self . horizontalLayout_3 ) self . horizontalLayout = QtWidgets . QHBoxLayout () self . horizontalLayout . setContentsMargins ( - 1 , 20 , - 1 , - 1 ) self . horizontalLayout . setObjectName ( \" horizontalLayout \" ) self . pages = QtWidgets . QTabWidget ( self . centralwidget ) self . pages . setAutoFillBackground ( False ) self . pages . setStyleSheet ( \" b \" ) self . pages . setObjectName ( \" pages \" ) self . page_1 = QtWidgets . QWidget () self . page_1 . setObjectName ( \" page_1 \" ) self . gridLayout_2 = QtWidgets . QGridLayout ( self . page_1 ) self . gridLayout_2 . setObjectName ( \" gridLayout_2 \" ) self . pages . addTab ( self . page_1 , \"\" ) self . page_2 = QtWidgets . QWidget () self . page_2 . setObjectName ( \" page_2 \" ) self . gridLayout_3 = QtWidgets . QGridLayout ( self . page_2 ) self . gridLayout_3 . setObjectName ( \" gridLayout_3 \" ) self . pages . addTab ( self . page_2 , \"\" ) self . page_3 = QtWidgets . QWidget () self . page_3 . setObjectName ( \" page_3 \" ) self . gridLayout_11 = QtWidgets . QGridLayout ( self . page_3 ) self . gridLayout_11 . setObjectName ( \" gridLayout_11 \" ) self . pages . addTab ( self . page_3 , \"\" ) self . page_4 = QtWidgets . QWidget () self . page_4 . setObjectName ( \" page_4 \" ) self . gridLayout_10 = QtWidgets . QGridLayout ( self . page_4 ) self . gridLayout_10 . setObjectName ( \" gridLayout_10 \" ) self . pages . addTab ( self . page_4 , \"\" ) self . page_5 = QtWidgets . QWidget () self . page_5 . setObjectName ( \" page_5 \" ) self . gridLayout_9 = QtWidgets . QGridLayout ( self . page_5 ) self . gridLayout_9 . setObjectName ( \" gridLayout_9 \" ) self . pages . addTab ( self . page_5 , \"\" ) self . page_6 = QtWidgets . QWidget () self . page_6 . setObjectName ( \" page_6 \" ) self . gridLayout_8 = QtWidgets . QGridLayout ( self . page_6 ) self . gridLayout_8 . setObjectName ( \" gridLayout_8 \" ) self . pages . addTab ( self . page_6 , \"\" ) self . page_7 = QtWidgets . QWidget () self . page_7 . setObjectName ( \" page_7 \" ) self . gridLayout_7 = QtWidgets . QGridLayout ( self . page_7 ) self . gridLayout_7 . setObjectName ( \" gridLayout_7 \" ) self . pages . addTab ( self . page_7 , \"\" ) self . page_8 = QtWidgets . QWidget () self . page_8 . setObjectName ( \" page_8 \" ) self . gridLayout_6 = QtWidgets . QGridLayout ( self . page_8 ) self . gridLayout_6 . setObjectName ( \" gridLayout_6 \" ) self . pages . addTab ( self . page_8 , \"\" ) self . page_9 = QtWidgets . QWidget () self . page_9 . setObjectName ( \" page_9 \" ) self . gridLayout_5 = QtWidgets . QGridLayout ( self . page_9 ) self . gridLayout_5 . setObjectName ( \" gridLayout_5 \" ) self . pages . addTab ( self . page_9 , \"\" ) self . tab_10 = QtWidgets . QWidget () self . tab_10 . setObjectName ( \" tab_10 \" ) self . gridLayout_4 = QtWidgets . QGridLayout ( self . tab_10 ) self . gridLayout_4 . setObjectName ( \" gridLayout_4 \" ) self . pages . addTab ( self . tab_10 , \"\" ) self . horizontalLayout . addWidget ( self . pages ) self . groupBox = QtWidgets . QGroupBox ( self . centralwidget ) self . groupBox . setMinimumSize ( QtCore . QSize ( 250 , 0 )) self . groupBox . setMaximumSize ( QtCore . QSize ( 250 , 16777215 )) self . groupBox . setObjectName ( \" groupBox \" ) self . verticalLayout_3 = QtWidgets . QVBoxLayout ( self . groupBox ) self . verticalLayout_3 . setObjectName ( \" verticalLayout_3 \" ) self . formLayout = QtWidgets . QFormLayout () self . formLayout . setObjectName ( \" formLayout \" ) self . label = QtWidgets . QLabel ( self . groupBox ) self . label . setObjectName ( \" label \" ) self . formLayout . setWidget ( 0 , QtWidgets . QFormLayout . LabelRole , self . label ) self . imageButton = QtWidgets . QPushButton ( self . groupBox ) self . imageButton . setObjectName ( \" imageButton \" ) self . formLayout . setWidget ( 0 , QtWidgets . QFormLayout . FieldRole , self . imageButton ) self . label_2 = QtWidgets . QLabel ( self . groupBox ) self . label_2 . setObjectName ( \" label_2 \" ) self . formLayout . setWidget ( 1 , QtWidgets . QFormLayout . LabelRole , self . label_2 ) self . text = QtWidgets . QLineEdit ( self . groupBox ) self . text . setObjectName ( \" text \" ) self . formLayout . setWidget ( 1 , QtWidgets . QFormLayout . FieldRole , self . text ) self . label_3 = QtWidgets . QLabel ( self . groupBox ) self . label_3 . setObjectName ( \" label_3 \" ) self . formLayout . setWidget ( 2 , QtWidgets . QFormLayout . LabelRole , self . label_3 ) self . command = QtWidgets . QLineEdit ( self . groupBox ) self . command . setObjectName ( \" command \" ) self . formLayout . setWidget ( 2 , QtWidgets . QFormLayout . FieldRole , self . command ) self . label_5 = QtWidgets . QLabel ( self . groupBox ) self . label_5 . setObjectName ( \" label_5 \" ) self . formLayout . setWidget ( 3 , QtWidgets . QFormLayout . LabelRole , self . label_5 ) self . keys = QtWidgets . QLineEdit ( self . groupBox ) self . keys . setObjectName ( \" keys \" ) self . formLayout . setWidget ( 3 , QtWidgets . QFormLayout . FieldRole , self . keys ) self . label_6 = QtWidgets . QLabel ( self . groupBox ) self . label_6 . setObjectName ( \" label_6 \" ) self . formLayout . setWidget ( 6 , QtWidgets . QFormLayout . LabelRole , self . label_6 ) self . write = QtWidgets . QPlainTextEdit ( self . groupBox ) self . write . setObjectName ( \" write \" ) self . formLayout . setWidget ( 6 , QtWidgets . QFormLayout . FieldRole , self . write ) self . label_8 = QtWidgets . QLabel ( self . groupBox ) self . label_8 . setObjectName ( \" label_8 \" ) self . formLayout . setWidget ( 4 , QtWidgets . QFormLayout . LabelRole , self . label_8 ) self . switch_page = QtWidgets . QSpinBox ( self . groupBox ) self . switch_page . setMinimum ( 0 ) self . switch_page . setMaximum ( 10 ) self . switch_page . setProperty ( \" value \" , 0 ) self . switch_page . setObjectName ( \" switch_page \" ) self . formLayout . setWidget ( 4 , QtWidgets . QFormLayout . FieldRole , self . switch_page ) self . label_7 = QtWidgets . QLabel ( self . groupBox ) self . label_7 . setObjectName ( \" label_7 \" ) self . formLayout . setWidget ( 5 , QtWidgets . QFormLayout . LabelRole , self . label_7 ) self . change_brightness = QtWidgets . QSpinBox ( self . groupBox ) self . change_brightness . setMinimum ( - 99 ) self . change_brightness . setObjectName ( \" change_brightness \" ) self . formLayout . setWidget ( 5 , QtWidgets . QFormLayout . FieldRole , self . change_brightness ) self . verticalLayout_3 . addLayout ( self . formLayout ) self . horizontalLayout . addWidget ( self . groupBox ) self . verticalLayout . addLayout ( self . horizontalLayout ) self . verticalLayout_2 . addLayout ( self . verticalLayout ) MainWindow . setCentralWidget ( self . centralwidget ) self . menubar = QtWidgets . QMenuBar ( MainWindow ) self . menubar . setGeometry ( QtCore . QRect ( 0 , 0 , 844 , 30 )) self . menubar . setObjectName ( \" menubar \" ) self . menuFile = QtWidgets . QMenu ( self . menubar ) self . menuFile . setObjectName ( \" menuFile \" ) MainWindow . setMenuBar ( self . menubar ) self . statusbar = QtWidgets . QStatusBar ( MainWindow ) self . statusbar . setObjectName ( \" statusbar \" ) MainWindow . setStatusBar ( self . statusbar ) self . actionImport = QtWidgets . QAction ( MainWindow ) self . actionImport . setObjectName ( \" actionImport \" ) self . actionExport = QtWidgets . QAction ( MainWindow ) self . actionExport . setObjectName ( \" actionExport \" ) self . menuFile . addAction ( self . actionImport ) self . menuFile . addAction ( self . actionExport ) self . menubar . addAction ( self . menuFile . menuAction ()) self . retranslateUi ( MainWindow ) self . pages . setCurrentIndex ( 0 ) QtCore . QMetaObject . connectSlotsByName ( MainWindow ) def retranslateUi ( self , MainWindow ) : MainWindow . setWindowTitle ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" MainWindow \" , None , - 1 ) ) self . label_4 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Brightness: \" , None , - 1 ) ) self . pages . setTabText ( self . pages . indexOf ( self . page_1 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" Page 1 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_2 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 2 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_3 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 3 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_4 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 4 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_5 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 5 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_6 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 6 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_7 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 7 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_8 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 8 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_9 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 9 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . tab_10 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 10 \" , None , - 1 ) , ) self . groupBox . setTitle ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Configure Button \" , None , - 1 ) ) self . label . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Image: \" , None , - 1 )) self . imageButton . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Choose \" , None , - 1 )) self . label_2 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Text: \" , None , - 1 )) self . label_3 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Command: \" , None , - 1 )) self . label_5 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Press Keys: \" , None , - 1 ) ) self . label_6 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Write Text: \" , None , - 1 ) ) self . label_8 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Switch Page: \" , None , - 1 ) ) self . label_7 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Brightness +/-: \" , None , - 1 ) ) self . menuFile . setTitle ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" File \" , None , - 1 )) self . actionImport . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Import \" , None , - 1 ) ) self . actionExport . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Export \" , None , - 1 ) ) Methods retranslateUi def retranslateUi ( self , MainWindow ) View Source def retranslateUi ( self , MainWindow ) : MainWindow . setWindowTitle ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" MainWindow \" , None , - 1 ) ) self . label_4 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Brightness: \" , None , - 1 ) ) self . pages . setTabText ( self . pages . indexOf ( self . page_1 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" Page 1 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_2 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 2 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_3 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 3 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_4 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 4 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_5 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 5 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_6 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 6 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_7 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 7 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_8 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 8 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_9 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 9 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . tab_10 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 10 \" , None , - 1 ) , ) self . groupBox . setTitle ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Configure Button \" , None , - 1 ) ) self . label . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Image: \" , None , - 1 )) self . imageButton . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Choose \" , None , - 1 )) self . label_2 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Text: \" , None , - 1 )) self . label_3 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Command: \" , None , - 1 )) self . label_5 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Press Keys: \" , None , - 1 ) ) self . label_6 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Write Text: \" , None , - 1 ) ) self . label_8 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Switch Page: \" , None , - 1 ) ) self . label_7 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Brightness +/-: \" , None , - 1 ) ) self . menuFile . setTitle ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" File \" , None , - 1 )) self . actionImport . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Import \" , None , - 1 ) ) self . actionExport . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Export \" , None , - 1 ) ) setupUi def setupUi ( self , MainWindow ) View Source def setupUi ( self , MainWindow ): MainWindow . setObjectName ( \"MainWindow\" ) MainWindow . resize ( 844 , 625 ) self . centralwidget = QtWidgets . QWidget ( MainWindow ) self . centralwidget . setObjectName ( \"centralwidget\" ) self . verticalLayout_2 = QtWidgets . QVBoxLayout ( self . centralwidget ) self . verticalLayout_2 . setObjectName ( \"verticalLayout_2\" ) self . verticalLayout = QtWidgets . QVBoxLayout () self . verticalLayout . setObjectName ( \"verticalLayout\" ) self . horizontalLayout_3 = QtWidgets . QHBoxLayout () self . horizontalLayout_3 . setObjectName ( \"horizontalLayout_3\" ) self . device_list = QtWidgets . QComboBox ( self . centralwidget ) self . device_list . setMinimumSize ( QtCore . QSize ( 400 , 0 )) self . device_list . setObjectName ( \"device_list\" ) self . horizontalLayout_3 . addWidget ( self . device_list ) spacerItem = QtWidgets . QSpacerItem ( 40 , 20 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Minimum ) self . horizontalLayout_3 . addItem ( spacerItem ) self . label_4 = QtWidgets . QLabel ( self . centralwidget ) sizePolicy = QtWidgets . QSizePolicy ( QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Preferred ) sizePolicy . setHorizontalStretch ( 0 ) sizePolicy . setVerticalStretch ( 0 ) sizePolicy . setHeightForWidth ( self . label_4 . sizePolicy (). hasHeightForWidth ()) self . label_4 . setSizePolicy ( sizePolicy ) self . label_4 . setObjectName ( \"label_4\" ) self . horizontalLayout_3 . addWidget ( self . label_4 ) self . brightness = QtWidgets . QSlider ( self . centralwidget ) sizePolicy = QtWidgets . QSizePolicy ( QtWidgets . QSizePolicy . Minimum , QtWidgets . QSizePolicy . Fixed ) sizePolicy . setHorizontalStretch ( 0 ) sizePolicy . setVerticalStretch ( 0 ) sizePolicy . setHeightForWidth ( self . brightness . sizePolicy (). hasHeightForWidth ()) self . brightness . setSizePolicy ( sizePolicy ) self . brightness . setMinimumSize ( QtCore . QSize ( 200 , 0 )) self . brightness . setOrientation ( QtCore . Qt . Horizontal ) self . brightness . setObjectName ( \"brightness\" ) self . horizontalLayout_3 . addWidget ( self . brightness ) self . verticalLayout . addLayout ( self . horizontalLayout_3 ) self . horizontalLayout = QtWidgets . QHBoxLayout () self . horizontalLayout . setContentsMargins ( - 1 , 20 , - 1 , - 1 ) self . horizontalLayout . setObjectName ( \"horizontalLayout\" ) self . pages = QtWidgets . QTabWidget ( self . centralwidget ) self . pages . setAutoFillBackground ( False ) self . pages . setStyleSheet ( \"b\" ) self . pages . setObjectName ( \"pages\" ) self . page_1 = QtWidgets . QWidget () self . page_1 . setObjectName ( \"page_1\" ) self . gridLayout_2 = QtWidgets . QGridLayout ( self . page_1 ) self . gridLayout_2 . setObjectName ( \"gridLayout_2\" ) self . pages . addTab ( self . page_1 , \"\" ) self . page_2 = QtWidgets . QWidget () self . page_2 . setObjectName ( \"page_2\" ) self . gridLayout_3 = QtWidgets . QGridLayout ( self . page_2 ) self . gridLayout_3 . setObjectName ( \"gridLayout_3\" ) self . pages . addTab ( self . page_2 , \"\" ) self . page_3 = QtWidgets . QWidget () self . page_3 . setObjectName ( \"page_3\" ) self . gridLayout_11 = QtWidgets . QGridLayout ( self . page_3 ) self . gridLayout_11 . setObjectName ( \"gridLayout_11\" ) self . pages . addTab ( self . page_3 , \"\" ) self . page_4 = QtWidgets . QWidget () self . page_4 . setObjectName ( \"page_4\" ) self . gridLayout_10 = QtWidgets . QGridLayout ( self . page_4 ) self . gridLayout_10 . setObjectName ( \"gridLayout_10\" ) self . pages . addTab ( self . page_4 , \"\" ) self . page_5 = QtWidgets . QWidget () self . page_5 . setObjectName ( \"page_5\" ) self . gridLayout_9 = QtWidgets . QGridLayout ( self . page_5 ) self . gridLayout_9 . setObjectName ( \"gridLayout_9\" ) self . pages . addTab ( self . page_5 , \"\" ) self . page_6 = QtWidgets . QWidget () self . page_6 . setObjectName ( \"page_6\" ) self . gridLayout_8 = QtWidgets . QGridLayout ( self . page_6 ) self . gridLayout_8 . setObjectName ( \"gridLayout_8\" ) self . pages . addTab ( self . page_6 , \"\" ) self . page_7 = QtWidgets . QWidget () self . page_7 . setObjectName ( \"page_7\" ) self . gridLayout_7 = QtWidgets . QGridLayout ( self . page_7 ) self . gridLayout_7 . setObjectName ( \"gridLayout_7\" ) self . pages . addTab ( self . page_7 , \"\" ) self . page_8 = QtWidgets . QWidget () self . page_8 . setObjectName ( \"page_8\" ) self . gridLayout_6 = QtWidgets . QGridLayout ( self . page_8 ) self . gridLayout_6 . setObjectName ( \"gridLayout_6\" ) self . pages . addTab ( self . page_8 , \"\" ) self . page_9 = QtWidgets . QWidget () self . page_9 . setObjectName ( \"page_9\" ) self . gridLayout_5 = QtWidgets . QGridLayout ( self . page_9 ) self . gridLayout_5 . setObjectName ( \"gridLayout_5\" ) self . pages . addTab ( self . page_9 , \"\" ) self . tab_10 = QtWidgets . QWidget () self . tab_10 . setObjectName ( \"tab_10\" ) self . gridLayout_4 = QtWidgets . QGridLayout ( self . tab_10 ) self . gridLayout_4 . setObjectName ( \"gridLayout_4\" ) self . pages . addTab ( self . tab_10 , \"\" ) self . horizontalLayout . addWidget ( self . pages ) self . groupBox = QtWidgets . QGroupBox ( self . centralwidget ) self . groupBox . setMinimumSize ( QtCore . QSize ( 250 , 0 )) self . groupBox . setMaximumSize ( QtCore . QSize ( 250 , 16777215 )) self . groupBox . setObjectName ( \"groupBox\" ) self . verticalLayout_3 = QtWidgets . QVBoxLayout ( self . groupBox ) self . verticalLayout_3 . setObjectName ( \"verticalLayout_3\" ) self . formLayout = QtWidgets . QFormLayout () self . formLayout . setObjectName ( \"formLayout\" ) self . label = QtWidgets . QLabel ( self . groupBox ) self . label . setObjectName ( \"label\" ) self . formLayout . setWidget ( 0 , QtWidgets . QFormLayout . LabelRole , self . label ) self . imageButton = QtWidgets . QPushButton ( self . groupBox ) self . imageButton . setObjectName ( \"imageButton\" ) self . formLayout . setWidget ( 0 , QtWidgets . QFormLayout . FieldRole , self . imageButton ) self . label_2 = QtWidgets . QLabel ( self . groupBox ) self . label_2 . setObjectName ( \"label_2\" ) self . formLayout . setWidget ( 1 , QtWidgets . QFormLayout . LabelRole , self . label_2 ) self . text = QtWidgets . QLineEdit ( self . groupBox ) self . text . setObjectName ( \"text\" ) self . formLayout . setWidget ( 1 , QtWidgets . QFormLayout . FieldRole , self . text ) self . label_3 = QtWidgets . QLabel ( self . groupBox ) self . label_3 . setObjectName ( \"label_3\" ) self . formLayout . setWidget ( 2 , QtWidgets . QFormLayout . LabelRole , self . label_3 ) self . command = QtWidgets . QLineEdit ( self . groupBox ) self . command . setObjectName ( \"command\" ) self . formLayout . setWidget ( 2 , QtWidgets . QFormLayout . FieldRole , self . command ) self . label_5 = QtWidgets . QLabel ( self . groupBox ) self . label_5 . setObjectName ( \"label_5\" ) self . formLayout . setWidget ( 3 , QtWidgets . QFormLayout . LabelRole , self . label_5 ) self . keys = QtWidgets . QLineEdit ( self . groupBox ) self . keys . setObjectName ( \"keys\" ) self . formLayout . setWidget ( 3 , QtWidgets . QFormLayout . FieldRole , self . keys ) self . label_6 = QtWidgets . QLabel ( self . groupBox ) self . label_6 . setObjectName ( \"label_6\" ) self . formLayout . setWidget ( 6 , QtWidgets . QFormLayout . LabelRole , self . label_6 ) self . write = QtWidgets . QPlainTextEdit ( self . groupBox ) self . write . setObjectName ( \"write\" ) self . formLayout . setWidget ( 6 , QtWidgets . QFormLayout . FieldRole , self . write ) self . label_8 = QtWidgets . QLabel ( self . groupBox ) self . label_8 . setObjectName ( \"label_8\" ) self . formLayout . setWidget ( 4 , QtWidgets . QFormLayout . LabelRole , self . label_8 ) self . switch_page = QtWidgets . QSpinBox ( self . groupBox ) self . switch_page . setMinimum ( 0 ) self . switch_page . setMaximum ( 10 ) self . switch_page . setProperty ( \"value\" , 0 ) self . switch_page . setObjectName ( \"switch_page\" ) self . formLayout . setWidget ( 4 , QtWidgets . QFormLayout . FieldRole , self . switch_page ) self . label_7 = QtWidgets . QLabel ( self . groupBox ) self . label_7 . setObjectName ( \"label_7\" ) self . formLayout . setWidget ( 5 , QtWidgets . QFormLayout . LabelRole , self . label_7 ) self . change_brightness = QtWidgets . QSpinBox ( self . groupBox ) self . change_brightness . setMinimum ( - 99 ) self . change_brightness . setObjectName ( \"change_brightness\" ) self . formLayout . setWidget ( 5 , QtWidgets . QFormLayout . FieldRole , self . change_brightness ) self . verticalLayout_3 . addLayout ( self . formLayout ) self . horizontalLayout . addWidget ( self . groupBox ) self . verticalLayout . addLayout ( self . horizontalLayout ) self . verticalLayout_2 . addLayout ( self . verticalLayout ) MainWindow . setCentralWidget ( self . centralwidget ) self . menubar = QtWidgets . QMenuBar ( MainWindow ) self . menubar . setGeometry ( QtCore . QRect ( 0 , 0 , 844 , 30 )) self . menubar . setObjectName ( \"menubar\" ) self . menuFile = QtWidgets . QMenu ( self . menubar ) self . menuFile . setObjectName ( \"menuFile\" ) MainWindow . setMenuBar ( self . menubar ) self . statusbar = QtWidgets . QStatusBar ( MainWindow ) self . statusbar . setObjectName ( \"statusbar\" ) MainWindow . setStatusBar ( self . statusbar ) self . actionImport = QtWidgets . QAction ( MainWindow ) self . actionImport . setObjectName ( \"actionImport\" ) self . actionExport = QtWidgets . QAction ( MainWindow ) self . actionExport . setObjectName ( \"actionExport\" ) self . menuFile . addAction ( self . actionImport ) self . menuFile . addAction ( self . actionExport ) self . menubar . addAction ( self . menuFile . menuAction ()) self . retranslateUi ( MainWindow ) self . pages . setCurrentIndex ( 0 ) QtCore . QMetaObject . connectSlotsByName ( MainWindow )","title":"Ui Main"},{"location":"reference/streamdeck_ui/ui_main/#module-streamdeck_uiui_main","text":"View Source # -*- coding: utf-8 -*- # Form implementation generated from reading ui file 'streamdeck_ui/main.ui', # licensing of 'streamdeck_ui/main.ui' applies. # # Created: Sun Oct 6 02:46:55 2019 # by: pyside2-uic running on PySide2 5.13.1 # # WARNING! All changes made in this file will be lost! from PySide2 import QtCore , QtGui , QtWidgets class Ui_MainWindow ( object ): def setupUi ( self , MainWindow ): MainWindow . setObjectName ( \"MainWindow\" ) MainWindow . resize ( 844 , 625 ) self . centralwidget = QtWidgets . QWidget ( MainWindow ) self . centralwidget . setObjectName ( \"centralwidget\" ) self . verticalLayout_2 = QtWidgets . QVBoxLayout ( self . centralwidget ) self . verticalLayout_2 . setObjectName ( \"verticalLayout_2\" ) self . verticalLayout = QtWidgets . QVBoxLayout () self . verticalLayout . setObjectName ( \"verticalLayout\" ) self . horizontalLayout_3 = QtWidgets . QHBoxLayout () self . horizontalLayout_3 . setObjectName ( \"horizontalLayout_3\" ) self . device_list = QtWidgets . QComboBox ( self . centralwidget ) self . device_list . setMinimumSize ( QtCore . QSize ( 400 , 0 )) self . device_list . setObjectName ( \"device_list\" ) self . horizontalLayout_3 . addWidget ( self . device_list ) spacerItem = QtWidgets . QSpacerItem ( 40 , 20 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Minimum ) self . horizontalLayout_3 . addItem ( spacerItem ) self . label_4 = QtWidgets . QLabel ( self . centralwidget ) sizePolicy = QtWidgets . QSizePolicy ( QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Preferred ) sizePolicy . setHorizontalStretch ( 0 ) sizePolicy . setVerticalStretch ( 0 ) sizePolicy . setHeightForWidth ( self . label_4 . sizePolicy () . hasHeightForWidth ()) self . label_4 . setSizePolicy ( sizePolicy ) self . label_4 . setObjectName ( \"label_4\" ) self . horizontalLayout_3 . addWidget ( self . label_4 ) self . brightness = QtWidgets . QSlider ( self . centralwidget ) sizePolicy = QtWidgets . QSizePolicy ( QtWidgets . QSizePolicy . Minimum , QtWidgets . QSizePolicy . Fixed ) sizePolicy . setHorizontalStretch ( 0 ) sizePolicy . setVerticalStretch ( 0 ) sizePolicy . setHeightForWidth ( self . brightness . sizePolicy () . hasHeightForWidth ()) self . brightness . setSizePolicy ( sizePolicy ) self . brightness . setMinimumSize ( QtCore . QSize ( 200 , 0 )) self . brightness . setOrientation ( QtCore . Qt . Horizontal ) self . brightness . setObjectName ( \"brightness\" ) self . horizontalLayout_3 . addWidget ( self . brightness ) self . verticalLayout . addLayout ( self . horizontalLayout_3 ) self . horizontalLayout = QtWidgets . QHBoxLayout () self . horizontalLayout . setContentsMargins ( - 1 , 20 , - 1 , - 1 ) self . horizontalLayout . setObjectName ( \"horizontalLayout\" ) self . pages = QtWidgets . QTabWidget ( self . centralwidget ) self . pages . setAutoFillBackground ( False ) self . pages . setStyleSheet ( \"b\" ) self . pages . setObjectName ( \"pages\" ) self . page_1 = QtWidgets . QWidget () self . page_1 . setObjectName ( \"page_1\" ) self . gridLayout_2 = QtWidgets . QGridLayout ( self . page_1 ) self . gridLayout_2 . setObjectName ( \"gridLayout_2\" ) self . pages . addTab ( self . page_1 , \"\" ) self . page_2 = QtWidgets . QWidget () self . page_2 . setObjectName ( \"page_2\" ) self . gridLayout_3 = QtWidgets . QGridLayout ( self . page_2 ) self . gridLayout_3 . setObjectName ( \"gridLayout_3\" ) self . pages . addTab ( self . page_2 , \"\" ) self . page_3 = QtWidgets . QWidget () self . page_3 . setObjectName ( \"page_3\" ) self . gridLayout_11 = QtWidgets . QGridLayout ( self . page_3 ) self . gridLayout_11 . setObjectName ( \"gridLayout_11\" ) self . pages . addTab ( self . page_3 , \"\" ) self . page_4 = QtWidgets . QWidget () self . page_4 . setObjectName ( \"page_4\" ) self . gridLayout_10 = QtWidgets . QGridLayout ( self . page_4 ) self . gridLayout_10 . setObjectName ( \"gridLayout_10\" ) self . pages . addTab ( self . page_4 , \"\" ) self . page_5 = QtWidgets . QWidget () self . page_5 . setObjectName ( \"page_5\" ) self . gridLayout_9 = QtWidgets . QGridLayout ( self . page_5 ) self . gridLayout_9 . setObjectName ( \"gridLayout_9\" ) self . pages . addTab ( self . page_5 , \"\" ) self . page_6 = QtWidgets . QWidget () self . page_6 . setObjectName ( \"page_6\" ) self . gridLayout_8 = QtWidgets . QGridLayout ( self . page_6 ) self . gridLayout_8 . setObjectName ( \"gridLayout_8\" ) self . pages . addTab ( self . page_6 , \"\" ) self . page_7 = QtWidgets . QWidget () self . page_7 . setObjectName ( \"page_7\" ) self . gridLayout_7 = QtWidgets . QGridLayout ( self . page_7 ) self . gridLayout_7 . setObjectName ( \"gridLayout_7\" ) self . pages . addTab ( self . page_7 , \"\" ) self . page_8 = QtWidgets . QWidget () self . page_8 . setObjectName ( \"page_8\" ) self . gridLayout_6 = QtWidgets . QGridLayout ( self . page_8 ) self . gridLayout_6 . setObjectName ( \"gridLayout_6\" ) self . pages . addTab ( self . page_8 , \"\" ) self . page_9 = QtWidgets . QWidget () self . page_9 . setObjectName ( \"page_9\" ) self . gridLayout_5 = QtWidgets . QGridLayout ( self . page_9 ) self . gridLayout_5 . setObjectName ( \"gridLayout_5\" ) self . pages . addTab ( self . page_9 , \"\" ) self . tab_10 = QtWidgets . QWidget () self . tab_10 . setObjectName ( \"tab_10\" ) self . gridLayout_4 = QtWidgets . QGridLayout ( self . tab_10 ) self . gridLayout_4 . setObjectName ( \"gridLayout_4\" ) self . pages . addTab ( self . tab_10 , \"\" ) self . horizontalLayout . addWidget ( self . pages ) self . groupBox = QtWidgets . QGroupBox ( self . centralwidget ) self . groupBox . setMinimumSize ( QtCore . QSize ( 250 , 0 )) self . groupBox . setMaximumSize ( QtCore . QSize ( 250 , 16777215 )) self . groupBox . setObjectName ( \"groupBox\" ) self . verticalLayout_3 = QtWidgets . QVBoxLayout ( self . groupBox ) self . verticalLayout_3 . setObjectName ( \"verticalLayout_3\" ) self . formLayout = QtWidgets . QFormLayout () self . formLayout . setObjectName ( \"formLayout\" ) self . label = QtWidgets . QLabel ( self . groupBox ) self . label . setObjectName ( \"label\" ) self . formLayout . setWidget ( 0 , QtWidgets . QFormLayout . LabelRole , self . label ) self . imageButton = QtWidgets . QPushButton ( self . groupBox ) self . imageButton . setObjectName ( \"imageButton\" ) self . formLayout . setWidget ( 0 , QtWidgets . QFormLayout . FieldRole , self . imageButton ) self . label_2 = QtWidgets . QLabel ( self . groupBox ) self . label_2 . setObjectName ( \"label_2\" ) self . formLayout . setWidget ( 1 , QtWidgets . QFormLayout . LabelRole , self . label_2 ) self . text = QtWidgets . QLineEdit ( self . groupBox ) self . text . setObjectName ( \"text\" ) self . formLayout . setWidget ( 1 , QtWidgets . QFormLayout . FieldRole , self . text ) self . label_3 = QtWidgets . QLabel ( self . groupBox ) self . label_3 . setObjectName ( \"label_3\" ) self . formLayout . setWidget ( 2 , QtWidgets . QFormLayout . LabelRole , self . label_3 ) self . command = QtWidgets . QLineEdit ( self . groupBox ) self . command . setObjectName ( \"command\" ) self . formLayout . setWidget ( 2 , QtWidgets . QFormLayout . FieldRole , self . command ) self . label_5 = QtWidgets . QLabel ( self . groupBox ) self . label_5 . setObjectName ( \"label_5\" ) self . formLayout . setWidget ( 3 , QtWidgets . QFormLayout . LabelRole , self . label_5 ) self . keys = QtWidgets . QLineEdit ( self . groupBox ) self . keys . setObjectName ( \"keys\" ) self . formLayout . setWidget ( 3 , QtWidgets . QFormLayout . FieldRole , self . keys ) self . label_6 = QtWidgets . QLabel ( self . groupBox ) self . label_6 . setObjectName ( \"label_6\" ) self . formLayout . setWidget ( 6 , QtWidgets . QFormLayout . LabelRole , self . label_6 ) self . write = QtWidgets . QPlainTextEdit ( self . groupBox ) self . write . setObjectName ( \"write\" ) self . formLayout . setWidget ( 6 , QtWidgets . QFormLayout . FieldRole , self . write ) self . label_8 = QtWidgets . QLabel ( self . groupBox ) self . label_8 . setObjectName ( \"label_8\" ) self . formLayout . setWidget ( 4 , QtWidgets . QFormLayout . LabelRole , self . label_8 ) self . switch_page = QtWidgets . QSpinBox ( self . groupBox ) self . switch_page . setMinimum ( 0 ) self . switch_page . setMaximum ( 10 ) self . switch_page . setProperty ( \"value\" , 0 ) self . switch_page . setObjectName ( \"switch_page\" ) self . formLayout . setWidget ( 4 , QtWidgets . QFormLayout . FieldRole , self . switch_page ) self . label_7 = QtWidgets . QLabel ( self . groupBox ) self . label_7 . setObjectName ( \"label_7\" ) self . formLayout . setWidget ( 5 , QtWidgets . QFormLayout . LabelRole , self . label_7 ) self . change_brightness = QtWidgets . QSpinBox ( self . groupBox ) self . change_brightness . setMinimum ( - 99 ) self . change_brightness . setObjectName ( \"change_brightness\" ) self . formLayout . setWidget ( 5 , QtWidgets . QFormLayout . FieldRole , self . change_brightness ) self . verticalLayout_3 . addLayout ( self . formLayout ) self . horizontalLayout . addWidget ( self . groupBox ) self . verticalLayout . addLayout ( self . horizontalLayout ) self . verticalLayout_2 . addLayout ( self . verticalLayout ) MainWindow . setCentralWidget ( self . centralwidget ) self . menubar = QtWidgets . QMenuBar ( MainWindow ) self . menubar . setGeometry ( QtCore . QRect ( 0 , 0 , 844 , 30 )) self . menubar . setObjectName ( \"menubar\" ) self . menuFile = QtWidgets . QMenu ( self . menubar ) self . menuFile . setObjectName ( \"menuFile\" ) MainWindow . setMenuBar ( self . menubar ) self . statusbar = QtWidgets . QStatusBar ( MainWindow ) self . statusbar . setObjectName ( \"statusbar\" ) MainWindow . setStatusBar ( self . statusbar ) self . actionImport = QtWidgets . QAction ( MainWindow ) self . actionImport . setObjectName ( \"actionImport\" ) self . actionExport = QtWidgets . QAction ( MainWindow ) self . actionExport . setObjectName ( \"actionExport\" ) self . menuFile . addAction ( self . actionImport ) self . menuFile . addAction ( self . actionExport ) self . menubar . addAction ( self . menuFile . menuAction ()) self . retranslateUi ( MainWindow ) self . pages . setCurrentIndex ( 0 ) QtCore . QMetaObject . connectSlotsByName ( MainWindow ) def retranslateUi ( self , MainWindow ): MainWindow . setWindowTitle ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"MainWindow\" , None , - 1 ) ) self . label_4 . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Brightness:\" , None , - 1 ) ) self . pages . setTabText ( self . pages . indexOf ( self . page_1 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"Page 1\" , None , - 1 ), ) self . pages . setTabText ( self . pages . indexOf ( self . page_2 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"2\" , None , - 1 ), ) self . pages . setTabText ( self . pages . indexOf ( self . page_3 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"3\" , None , - 1 ), ) self . pages . setTabText ( self . pages . indexOf ( self . page_4 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"4\" , None , - 1 ), ) self . pages . setTabText ( self . pages . indexOf ( self . page_5 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"5\" , None , - 1 ), ) self . pages . setTabText ( self . pages . indexOf ( self . page_6 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"6\" , None , - 1 ), ) self . pages . setTabText ( self . pages . indexOf ( self . page_7 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"7\" , None , - 1 ), ) self . pages . setTabText ( self . pages . indexOf ( self . page_8 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"8\" , None , - 1 ), ) self . pages . setTabText ( self . pages . indexOf ( self . page_9 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"9\" , None , - 1 ), ) self . pages . setTabText ( self . pages . indexOf ( self . tab_10 ), QtWidgets . QApplication . translate ( \"MainWindow\" , \"10\" , None , - 1 ), ) self . groupBox . setTitle ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Configure Button\" , None , - 1 ) ) self . label . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Image:\" , None , - 1 )) self . imageButton . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Choose\" , None , - 1 )) self . label_2 . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Text:\" , None , - 1 )) self . label_3 . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Command:\" , None , - 1 )) self . label_5 . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Press Keys:\" , None , - 1 ) ) self . label_6 . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Write Text:\" , None , - 1 ) ) self . label_8 . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Switch Page:\" , None , - 1 ) ) self . label_7 . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Brightness +/-:\" , None , - 1 ) ) self . menuFile . setTitle ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"File\" , None , - 1 )) self . actionImport . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Import\" , None , - 1 ) ) self . actionExport . setText ( QtWidgets . QApplication . translate ( \"MainWindow\" , \"Export\" , None , - 1 ) )","title":"Module streamdeck_ui.ui_main"},{"location":"reference/streamdeck_ui/ui_main/#classes","text":"","title":"Classes"},{"location":"reference/streamdeck_ui/ui_main/#ui_mainwindow","text":"class Ui_MainWindow ( / , * args , ** kwargs ) View Source class Ui_MainWindow ( object ) : def setupUi ( self , MainWindow ) : MainWindow . setObjectName ( \" MainWindow \" ) MainWindow . resize ( 844 , 625 ) self . centralwidget = QtWidgets . QWidget ( MainWindow ) self . centralwidget . setObjectName ( \" centralwidget \" ) self . verticalLayout_2 = QtWidgets . QVBoxLayout ( self . centralwidget ) self . verticalLayout_2 . setObjectName ( \" verticalLayout_2 \" ) self . verticalLayout = QtWidgets . QVBoxLayout () self . verticalLayout . setObjectName ( \" verticalLayout \" ) self . horizontalLayout_3 = QtWidgets . QHBoxLayout () self . horizontalLayout_3 . setObjectName ( \" horizontalLayout_3 \" ) self . device_list = QtWidgets . QComboBox ( self . centralwidget ) self . device_list . setMinimumSize ( QtCore . QSize ( 400 , 0 )) self . device_list . setObjectName ( \" device_list \" ) self . horizontalLayout_3 . addWidget ( self . device_list ) spacerItem = QtWidgets . QSpacerItem ( 40 , 20 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Minimum ) self . horizontalLayout_3 . addItem ( spacerItem ) self . label_4 = QtWidgets . QLabel ( self . centralwidget ) sizePolicy = QtWidgets . QSizePolicy ( QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Preferred ) sizePolicy . setHorizontalStretch ( 0 ) sizePolicy . setVerticalStretch ( 0 ) sizePolicy . setHeightForWidth ( self . label_4 . sizePolicy () . hasHeightForWidth ()) self . label_4 . setSizePolicy ( sizePolicy ) self . label_4 . setObjectName ( \" label_4 \" ) self . horizontalLayout_3 . addWidget ( self . label_4 ) self . brightness = QtWidgets . QSlider ( self . centralwidget ) sizePolicy = QtWidgets . QSizePolicy ( QtWidgets . QSizePolicy . Minimum , QtWidgets . QSizePolicy . Fixed ) sizePolicy . setHorizontalStretch ( 0 ) sizePolicy . setVerticalStretch ( 0 ) sizePolicy . setHeightForWidth ( self . brightness . sizePolicy () . hasHeightForWidth ()) self . brightness . setSizePolicy ( sizePolicy ) self . brightness . setMinimumSize ( QtCore . QSize ( 200 , 0 )) self . brightness . setOrientation ( QtCore . Qt . Horizontal ) self . brightness . setObjectName ( \" brightness \" ) self . horizontalLayout_3 . addWidget ( self . brightness ) self . verticalLayout . addLayout ( self . horizontalLayout_3 ) self . horizontalLayout = QtWidgets . QHBoxLayout () self . horizontalLayout . setContentsMargins ( - 1 , 20 , - 1 , - 1 ) self . horizontalLayout . setObjectName ( \" horizontalLayout \" ) self . pages = QtWidgets . QTabWidget ( self . centralwidget ) self . pages . setAutoFillBackground ( False ) self . pages . setStyleSheet ( \" b \" ) self . pages . setObjectName ( \" pages \" ) self . page_1 = QtWidgets . QWidget () self . page_1 . setObjectName ( \" page_1 \" ) self . gridLayout_2 = QtWidgets . QGridLayout ( self . page_1 ) self . gridLayout_2 . setObjectName ( \" gridLayout_2 \" ) self . pages . addTab ( self . page_1 , \"\" ) self . page_2 = QtWidgets . QWidget () self . page_2 . setObjectName ( \" page_2 \" ) self . gridLayout_3 = QtWidgets . QGridLayout ( self . page_2 ) self . gridLayout_3 . setObjectName ( \" gridLayout_3 \" ) self . pages . addTab ( self . page_2 , \"\" ) self . page_3 = QtWidgets . QWidget () self . page_3 . setObjectName ( \" page_3 \" ) self . gridLayout_11 = QtWidgets . QGridLayout ( self . page_3 ) self . gridLayout_11 . setObjectName ( \" gridLayout_11 \" ) self . pages . addTab ( self . page_3 , \"\" ) self . page_4 = QtWidgets . QWidget () self . page_4 . setObjectName ( \" page_4 \" ) self . gridLayout_10 = QtWidgets . QGridLayout ( self . page_4 ) self . gridLayout_10 . setObjectName ( \" gridLayout_10 \" ) self . pages . addTab ( self . page_4 , \"\" ) self . page_5 = QtWidgets . QWidget () self . page_5 . setObjectName ( \" page_5 \" ) self . gridLayout_9 = QtWidgets . QGridLayout ( self . page_5 ) self . gridLayout_9 . setObjectName ( \" gridLayout_9 \" ) self . pages . addTab ( self . page_5 , \"\" ) self . page_6 = QtWidgets . QWidget () self . page_6 . setObjectName ( \" page_6 \" ) self . gridLayout_8 = QtWidgets . QGridLayout ( self . page_6 ) self . gridLayout_8 . setObjectName ( \" gridLayout_8 \" ) self . pages . addTab ( self . page_6 , \"\" ) self . page_7 = QtWidgets . QWidget () self . page_7 . setObjectName ( \" page_7 \" ) self . gridLayout_7 = QtWidgets . QGridLayout ( self . page_7 ) self . gridLayout_7 . setObjectName ( \" gridLayout_7 \" ) self . pages . addTab ( self . page_7 , \"\" ) self . page_8 = QtWidgets . QWidget () self . page_8 . setObjectName ( \" page_8 \" ) self . gridLayout_6 = QtWidgets . QGridLayout ( self . page_8 ) self . gridLayout_6 . setObjectName ( \" gridLayout_6 \" ) self . pages . addTab ( self . page_8 , \"\" ) self . page_9 = QtWidgets . QWidget () self . page_9 . setObjectName ( \" page_9 \" ) self . gridLayout_5 = QtWidgets . QGridLayout ( self . page_9 ) self . gridLayout_5 . setObjectName ( \" gridLayout_5 \" ) self . pages . addTab ( self . page_9 , \"\" ) self . tab_10 = QtWidgets . QWidget () self . tab_10 . setObjectName ( \" tab_10 \" ) self . gridLayout_4 = QtWidgets . QGridLayout ( self . tab_10 ) self . gridLayout_4 . setObjectName ( \" gridLayout_4 \" ) self . pages . addTab ( self . tab_10 , \"\" ) self . horizontalLayout . addWidget ( self . pages ) self . groupBox = QtWidgets . QGroupBox ( self . centralwidget ) self . groupBox . setMinimumSize ( QtCore . QSize ( 250 , 0 )) self . groupBox . setMaximumSize ( QtCore . QSize ( 250 , 16777215 )) self . groupBox . setObjectName ( \" groupBox \" ) self . verticalLayout_3 = QtWidgets . QVBoxLayout ( self . groupBox ) self . verticalLayout_3 . setObjectName ( \" verticalLayout_3 \" ) self . formLayout = QtWidgets . QFormLayout () self . formLayout . setObjectName ( \" formLayout \" ) self . label = QtWidgets . QLabel ( self . groupBox ) self . label . setObjectName ( \" label \" ) self . formLayout . setWidget ( 0 , QtWidgets . QFormLayout . LabelRole , self . label ) self . imageButton = QtWidgets . QPushButton ( self . groupBox ) self . imageButton . setObjectName ( \" imageButton \" ) self . formLayout . setWidget ( 0 , QtWidgets . QFormLayout . FieldRole , self . imageButton ) self . label_2 = QtWidgets . QLabel ( self . groupBox ) self . label_2 . setObjectName ( \" label_2 \" ) self . formLayout . setWidget ( 1 , QtWidgets . QFormLayout . LabelRole , self . label_2 ) self . text = QtWidgets . QLineEdit ( self . groupBox ) self . text . setObjectName ( \" text \" ) self . formLayout . setWidget ( 1 , QtWidgets . QFormLayout . FieldRole , self . text ) self . label_3 = QtWidgets . QLabel ( self . groupBox ) self . label_3 . setObjectName ( \" label_3 \" ) self . formLayout . setWidget ( 2 , QtWidgets . QFormLayout . LabelRole , self . label_3 ) self . command = QtWidgets . QLineEdit ( self . groupBox ) self . command . setObjectName ( \" command \" ) self . formLayout . setWidget ( 2 , QtWidgets . QFormLayout . FieldRole , self . command ) self . label_5 = QtWidgets . QLabel ( self . groupBox ) self . label_5 . setObjectName ( \" label_5 \" ) self . formLayout . setWidget ( 3 , QtWidgets . QFormLayout . LabelRole , self . label_5 ) self . keys = QtWidgets . QLineEdit ( self . groupBox ) self . keys . setObjectName ( \" keys \" ) self . formLayout . setWidget ( 3 , QtWidgets . QFormLayout . FieldRole , self . keys ) self . label_6 = QtWidgets . QLabel ( self . groupBox ) self . label_6 . setObjectName ( \" label_6 \" ) self . formLayout . setWidget ( 6 , QtWidgets . QFormLayout . LabelRole , self . label_6 ) self . write = QtWidgets . QPlainTextEdit ( self . groupBox ) self . write . setObjectName ( \" write \" ) self . formLayout . setWidget ( 6 , QtWidgets . QFormLayout . FieldRole , self . write ) self . label_8 = QtWidgets . QLabel ( self . groupBox ) self . label_8 . setObjectName ( \" label_8 \" ) self . formLayout . setWidget ( 4 , QtWidgets . QFormLayout . LabelRole , self . label_8 ) self . switch_page = QtWidgets . QSpinBox ( self . groupBox ) self . switch_page . setMinimum ( 0 ) self . switch_page . setMaximum ( 10 ) self . switch_page . setProperty ( \" value \" , 0 ) self . switch_page . setObjectName ( \" switch_page \" ) self . formLayout . setWidget ( 4 , QtWidgets . QFormLayout . FieldRole , self . switch_page ) self . label_7 = QtWidgets . QLabel ( self . groupBox ) self . label_7 . setObjectName ( \" label_7 \" ) self . formLayout . setWidget ( 5 , QtWidgets . QFormLayout . LabelRole , self . label_7 ) self . change_brightness = QtWidgets . QSpinBox ( self . groupBox ) self . change_brightness . setMinimum ( - 99 ) self . change_brightness . setObjectName ( \" change_brightness \" ) self . formLayout . setWidget ( 5 , QtWidgets . QFormLayout . FieldRole , self . change_brightness ) self . verticalLayout_3 . addLayout ( self . formLayout ) self . horizontalLayout . addWidget ( self . groupBox ) self . verticalLayout . addLayout ( self . horizontalLayout ) self . verticalLayout_2 . addLayout ( self . verticalLayout ) MainWindow . setCentralWidget ( self . centralwidget ) self . menubar = QtWidgets . QMenuBar ( MainWindow ) self . menubar . setGeometry ( QtCore . QRect ( 0 , 0 , 844 , 30 )) self . menubar . setObjectName ( \" menubar \" ) self . menuFile = QtWidgets . QMenu ( self . menubar ) self . menuFile . setObjectName ( \" menuFile \" ) MainWindow . setMenuBar ( self . menubar ) self . statusbar = QtWidgets . QStatusBar ( MainWindow ) self . statusbar . setObjectName ( \" statusbar \" ) MainWindow . setStatusBar ( self . statusbar ) self . actionImport = QtWidgets . QAction ( MainWindow ) self . actionImport . setObjectName ( \" actionImport \" ) self . actionExport = QtWidgets . QAction ( MainWindow ) self . actionExport . setObjectName ( \" actionExport \" ) self . menuFile . addAction ( self . actionImport ) self . menuFile . addAction ( self . actionExport ) self . menubar . addAction ( self . menuFile . menuAction ()) self . retranslateUi ( MainWindow ) self . pages . setCurrentIndex ( 0 ) QtCore . QMetaObject . connectSlotsByName ( MainWindow ) def retranslateUi ( self , MainWindow ) : MainWindow . setWindowTitle ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" MainWindow \" , None , - 1 ) ) self . label_4 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Brightness: \" , None , - 1 ) ) self . pages . setTabText ( self . pages . indexOf ( self . page_1 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" Page 1 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_2 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 2 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_3 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 3 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_4 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 4 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_5 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 5 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_6 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 6 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_7 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 7 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_8 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 8 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_9 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 9 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . tab_10 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 10 \" , None , - 1 ) , ) self . groupBox . setTitle ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Configure Button \" , None , - 1 ) ) self . label . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Image: \" , None , - 1 )) self . imageButton . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Choose \" , None , - 1 )) self . label_2 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Text: \" , None , - 1 )) self . label_3 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Command: \" , None , - 1 )) self . label_5 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Press Keys: \" , None , - 1 ) ) self . label_6 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Write Text: \" , None , - 1 ) ) self . label_8 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Switch Page: \" , None , - 1 ) ) self . label_7 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Brightness +/-: \" , None , - 1 ) ) self . menuFile . setTitle ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" File \" , None , - 1 )) self . actionImport . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Import \" , None , - 1 ) ) self . actionExport . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Export \" , None , - 1 ) )","title":"Ui_MainWindow"},{"location":"reference/streamdeck_ui/ui_main/#methods","text":"","title":"Methods"},{"location":"reference/streamdeck_ui/ui_main/#retranslateui","text":"def retranslateUi ( self , MainWindow ) View Source def retranslateUi ( self , MainWindow ) : MainWindow . setWindowTitle ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" MainWindow \" , None , - 1 ) ) self . label_4 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Brightness: \" , None , - 1 ) ) self . pages . setTabText ( self . pages . indexOf ( self . page_1 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" Page 1 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_2 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 2 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_3 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 3 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_4 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 4 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_5 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 5 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_6 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 6 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_7 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 7 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_8 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 8 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . page_9 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 9 \" , None , - 1 ) , ) self . pages . setTabText ( self . pages . indexOf ( self . tab_10 ) , QtWidgets . QApplication . translate ( \" MainWindow \" , \" 10 \" , None , - 1 ) , ) self . groupBox . setTitle ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Configure Button \" , None , - 1 ) ) self . label . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Image: \" , None , - 1 )) self . imageButton . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Choose \" , None , - 1 )) self . label_2 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Text: \" , None , - 1 )) self . label_3 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Command: \" , None , - 1 )) self . label_5 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Press Keys: \" , None , - 1 ) ) self . label_6 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Write Text: \" , None , - 1 ) ) self . label_8 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Switch Page: \" , None , - 1 ) ) self . label_7 . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Brightness +/-: \" , None , - 1 ) ) self . menuFile . setTitle ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" File \" , None , - 1 )) self . actionImport . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Import \" , None , - 1 ) ) self . actionExport . setText ( QtWidgets . QApplication . translate ( \" MainWindow \" , \" Export \" , None , - 1 ) )","title":"retranslateUi"},{"location":"reference/streamdeck_ui/ui_main/#setupui","text":"def setupUi ( self , MainWindow ) View Source def setupUi ( self , MainWindow ): MainWindow . setObjectName ( \"MainWindow\" ) MainWindow . resize ( 844 , 625 ) self . centralwidget = QtWidgets . QWidget ( MainWindow ) self . centralwidget . setObjectName ( \"centralwidget\" ) self . verticalLayout_2 = QtWidgets . QVBoxLayout ( self . centralwidget ) self . verticalLayout_2 . setObjectName ( \"verticalLayout_2\" ) self . verticalLayout = QtWidgets . QVBoxLayout () self . verticalLayout . setObjectName ( \"verticalLayout\" ) self . horizontalLayout_3 = QtWidgets . QHBoxLayout () self . horizontalLayout_3 . setObjectName ( \"horizontalLayout_3\" ) self . device_list = QtWidgets . QComboBox ( self . centralwidget ) self . device_list . setMinimumSize ( QtCore . QSize ( 400 , 0 )) self . device_list . setObjectName ( \"device_list\" ) self . horizontalLayout_3 . addWidget ( self . device_list ) spacerItem = QtWidgets . QSpacerItem ( 40 , 20 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Minimum ) self . horizontalLayout_3 . addItem ( spacerItem ) self . label_4 = QtWidgets . QLabel ( self . centralwidget ) sizePolicy = QtWidgets . QSizePolicy ( QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Preferred ) sizePolicy . setHorizontalStretch ( 0 ) sizePolicy . setVerticalStretch ( 0 ) sizePolicy . setHeightForWidth ( self . label_4 . sizePolicy (). hasHeightForWidth ()) self . label_4 . setSizePolicy ( sizePolicy ) self . label_4 . setObjectName ( \"label_4\" ) self . horizontalLayout_3 . addWidget ( self . label_4 ) self . brightness = QtWidgets . QSlider ( self . centralwidget ) sizePolicy = QtWidgets . QSizePolicy ( QtWidgets . QSizePolicy . Minimum , QtWidgets . QSizePolicy . Fixed ) sizePolicy . setHorizontalStretch ( 0 ) sizePolicy . setVerticalStretch ( 0 ) sizePolicy . setHeightForWidth ( self . brightness . sizePolicy (). hasHeightForWidth ()) self . brightness . setSizePolicy ( sizePolicy ) self . brightness . setMinimumSize ( QtCore . QSize ( 200 , 0 )) self . brightness . setOrientation ( QtCore . Qt . Horizontal ) self . brightness . setObjectName ( \"brightness\" ) self . horizontalLayout_3 . addWidget ( self . brightness ) self . verticalLayout . addLayout ( self . horizontalLayout_3 ) self . horizontalLayout = QtWidgets . QHBoxLayout () self . horizontalLayout . setContentsMargins ( - 1 , 20 , - 1 , - 1 ) self . horizontalLayout . setObjectName ( \"horizontalLayout\" ) self . pages = QtWidgets . QTabWidget ( self . centralwidget ) self . pages . setAutoFillBackground ( False ) self . pages . setStyleSheet ( \"b\" ) self . pages . setObjectName ( \"pages\" ) self . page_1 = QtWidgets . QWidget () self . page_1 . setObjectName ( \"page_1\" ) self . gridLayout_2 = QtWidgets . QGridLayout ( self . page_1 ) self . gridLayout_2 . setObjectName ( \"gridLayout_2\" ) self . pages . addTab ( self . page_1 , \"\" ) self . page_2 = QtWidgets . QWidget () self . page_2 . setObjectName ( \"page_2\" ) self . gridLayout_3 = QtWidgets . QGridLayout ( self . page_2 ) self . gridLayout_3 . setObjectName ( \"gridLayout_3\" ) self . pages . addTab ( self . page_2 , \"\" ) self . page_3 = QtWidgets . QWidget () self . page_3 . setObjectName ( \"page_3\" ) self . gridLayout_11 = QtWidgets . QGridLayout ( self . page_3 ) self . gridLayout_11 . setObjectName ( \"gridLayout_11\" ) self . pages . addTab ( self . page_3 , \"\" ) self . page_4 = QtWidgets . QWidget () self . page_4 . setObjectName ( \"page_4\" ) self . gridLayout_10 = QtWidgets . QGridLayout ( self . page_4 ) self . gridLayout_10 . setObjectName ( \"gridLayout_10\" ) self . pages . addTab ( self . page_4 , \"\" ) self . page_5 = QtWidgets . QWidget () self . page_5 . setObjectName ( \"page_5\" ) self . gridLayout_9 = QtWidgets . QGridLayout ( self . page_5 ) self . gridLayout_9 . setObjectName ( \"gridLayout_9\" ) self . pages . addTab ( self . page_5 , \"\" ) self . page_6 = QtWidgets . QWidget () self . page_6 . setObjectName ( \"page_6\" ) self . gridLayout_8 = QtWidgets . QGridLayout ( self . page_6 ) self . gridLayout_8 . setObjectName ( \"gridLayout_8\" ) self . pages . addTab ( self . page_6 , \"\" ) self . page_7 = QtWidgets . QWidget () self . page_7 . setObjectName ( \"page_7\" ) self . gridLayout_7 = QtWidgets . QGridLayout ( self . page_7 ) self . gridLayout_7 . setObjectName ( \"gridLayout_7\" ) self . pages . addTab ( self . page_7 , \"\" ) self . page_8 = QtWidgets . QWidget () self . page_8 . setObjectName ( \"page_8\" ) self . gridLayout_6 = QtWidgets . QGridLayout ( self . page_8 ) self . gridLayout_6 . setObjectName ( \"gridLayout_6\" ) self . pages . addTab ( self . page_8 , \"\" ) self . page_9 = QtWidgets . QWidget () self . page_9 . setObjectName ( \"page_9\" ) self . gridLayout_5 = QtWidgets . QGridLayout ( self . page_9 ) self . gridLayout_5 . setObjectName ( \"gridLayout_5\" ) self . pages . addTab ( self . page_9 , \"\" ) self . tab_10 = QtWidgets . QWidget () self . tab_10 . setObjectName ( \"tab_10\" ) self . gridLayout_4 = QtWidgets . QGridLayout ( self . tab_10 ) self . gridLayout_4 . setObjectName ( \"gridLayout_4\" ) self . pages . addTab ( self . tab_10 , \"\" ) self . horizontalLayout . addWidget ( self . pages ) self . groupBox = QtWidgets . QGroupBox ( self . centralwidget ) self . groupBox . setMinimumSize ( QtCore . QSize ( 250 , 0 )) self . groupBox . setMaximumSize ( QtCore . QSize ( 250 , 16777215 )) self . groupBox . setObjectName ( \"groupBox\" ) self . verticalLayout_3 = QtWidgets . QVBoxLayout ( self . groupBox ) self . verticalLayout_3 . setObjectName ( \"verticalLayout_3\" ) self . formLayout = QtWidgets . QFormLayout () self . formLayout . setObjectName ( \"formLayout\" ) self . label = QtWidgets . QLabel ( self . groupBox ) self . label . setObjectName ( \"label\" ) self . formLayout . setWidget ( 0 , QtWidgets . QFormLayout . LabelRole , self . label ) self . imageButton = QtWidgets . QPushButton ( self . groupBox ) self . imageButton . setObjectName ( \"imageButton\" ) self . formLayout . setWidget ( 0 , QtWidgets . QFormLayout . FieldRole , self . imageButton ) self . label_2 = QtWidgets . QLabel ( self . groupBox ) self . label_2 . setObjectName ( \"label_2\" ) self . formLayout . setWidget ( 1 , QtWidgets . QFormLayout . LabelRole , self . label_2 ) self . text = QtWidgets . QLineEdit ( self . groupBox ) self . text . setObjectName ( \"text\" ) self . formLayout . setWidget ( 1 , QtWidgets . QFormLayout . FieldRole , self . text ) self . label_3 = QtWidgets . QLabel ( self . groupBox ) self . label_3 . setObjectName ( \"label_3\" ) self . formLayout . setWidget ( 2 , QtWidgets . QFormLayout . LabelRole , self . label_3 ) self . command = QtWidgets . QLineEdit ( self . groupBox ) self . command . setObjectName ( \"command\" ) self . formLayout . setWidget ( 2 , QtWidgets . QFormLayout . FieldRole , self . command ) self . label_5 = QtWidgets . QLabel ( self . groupBox ) self . label_5 . setObjectName ( \"label_5\" ) self . formLayout . setWidget ( 3 , QtWidgets . QFormLayout . LabelRole , self . label_5 ) self . keys = QtWidgets . QLineEdit ( self . groupBox ) self . keys . setObjectName ( \"keys\" ) self . formLayout . setWidget ( 3 , QtWidgets . QFormLayout . FieldRole , self . keys ) self . label_6 = QtWidgets . QLabel ( self . groupBox ) self . label_6 . setObjectName ( \"label_6\" ) self . formLayout . setWidget ( 6 , QtWidgets . QFormLayout . LabelRole , self . label_6 ) self . write = QtWidgets . QPlainTextEdit ( self . groupBox ) self . write . setObjectName ( \"write\" ) self . formLayout . setWidget ( 6 , QtWidgets . QFormLayout . FieldRole , self . write ) self . label_8 = QtWidgets . QLabel ( self . groupBox ) self . label_8 . setObjectName ( \"label_8\" ) self . formLayout . setWidget ( 4 , QtWidgets . QFormLayout . LabelRole , self . label_8 ) self . switch_page = QtWidgets . QSpinBox ( self . groupBox ) self . switch_page . setMinimum ( 0 ) self . switch_page . setMaximum ( 10 ) self . switch_page . setProperty ( \"value\" , 0 ) self . switch_page . setObjectName ( \"switch_page\" ) self . formLayout . setWidget ( 4 , QtWidgets . QFormLayout . FieldRole , self . switch_page ) self . label_7 = QtWidgets . QLabel ( self . groupBox ) self . label_7 . setObjectName ( \"label_7\" ) self . formLayout . setWidget ( 5 , QtWidgets . QFormLayout . LabelRole , self . label_7 ) self . change_brightness = QtWidgets . QSpinBox ( self . groupBox ) self . change_brightness . setMinimum ( - 99 ) self . change_brightness . setObjectName ( \"change_brightness\" ) self . formLayout . setWidget ( 5 , QtWidgets . QFormLayout . FieldRole , self . change_brightness ) self . verticalLayout_3 . addLayout ( self . formLayout ) self . horizontalLayout . addWidget ( self . groupBox ) self . verticalLayout . addLayout ( self . horizontalLayout ) self . verticalLayout_2 . addLayout ( self . verticalLayout ) MainWindow . setCentralWidget ( self . centralwidget ) self . menubar = QtWidgets . QMenuBar ( MainWindow ) self . menubar . setGeometry ( QtCore . QRect ( 0 , 0 , 844 , 30 )) self . menubar . setObjectName ( \"menubar\" ) self . menuFile = QtWidgets . QMenu ( self . menubar ) self . menuFile . setObjectName ( \"menuFile\" ) MainWindow . setMenuBar ( self . menubar ) self . statusbar = QtWidgets . QStatusBar ( MainWindow ) self . statusbar . setObjectName ( \"statusbar\" ) MainWindow . setStatusBar ( self . statusbar ) self . actionImport = QtWidgets . QAction ( MainWindow ) self . actionImport . setObjectName ( \"actionImport\" ) self . actionExport = QtWidgets . QAction ( MainWindow ) self . actionExport . setObjectName ( \"actionExport\" ) self . menuFile . addAction ( self . actionImport ) self . menuFile . addAction ( self . actionExport ) self . menubar . addAction ( self . menuFile . menuAction ()) self . retranslateUi ( MainWindow ) self . pages . setCurrentIndex ( 0 ) QtCore . QMetaObject . connectSlotsByName ( MainWindow )","title":"setupUi"}]}